<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ecng.Xaml.Charting</name>
    </assembly>
    <members>
        <member name="M:Ecng.Xaml.Licensing.Core.IUltrachartLicenseProvider.Validate(System.Object)">
            <summary>
            Validates the component
            </summary>
            <param name="parameter">The component to validate</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.AxisDragCursor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.AxisDragCursor"/> class.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.AxisDragCursor.AngleProperty">
            <summary>
            Defines the Angle DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AxisDragCursor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.YAxisDragModifier"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.AxisDragCursor.Angle">
            <summary>
            Defines by what Angle to rotate AxisDragCursor 
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.TimeframeSegmentWheelModifier">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.MouseWheelZoomModifier"/> provides zooming (or shrinking) of the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> on mouse wheel scroll
            Add to a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> and set IsEnabled to true to enable this behaviour
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.TimeframeSegmentWheelModifier.ActionTypeProperty">
            <summary>
            Defines the ActionType DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TimeframeSegmentWheelModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.MouseWheelZoomModifier"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.TimeframeSegmentWheelModifier.ActionType">
            <summary>
            Gets or sets the <see cref="P:Ecng.Xaml.Charting.ChartModifiers.TimeframeSegmentWheelModifier.ActionType"/> to perform on mouse-wheel interaction
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TimeframeSegmentWheelModifier.OnModifierMouseWheel(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse Wheel is scrolled on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse wheel operation</param>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.IChartModifierBase">
            <summary>
            A Base interface for common shared properties between ChartModifiers in the 2D and 3D Ultrachart libraries 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.IChartModifierBase.Services">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/> which provides access to services throughout Ultrachart. 
            ServiceContainers are created one per <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.IChartModifierBase.ModifierSurface">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.Visuals.IChartModifierSurface"/> instance on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>, which acts as a canvas to place UIElements
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.IChartModifierBase.ModifierName">
            <summary>
            Gets modifier name
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.IChartModifierBase.IsAttached">
            <summary>
            Gets or sets whether this Chart Modifier is attached to a parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.IChartModifierBase.DataContext">
            <summary>
            Gets or sets the DataContext for this Chart Modifier 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.IChartModifierBase.ReceiveHandledEvents">
            <summary>
            If true, this <see cref="T:Ecng.Xaml.Charting.ChartModifiers.IChartModifier"/> can receive handled events. Chart modifiers work similarly to mouse event handlers in WPF and Silverlight. If a modifier
            further up the stack receives an event and handles it, then subsequent modifiers do not receive the event. This property overrides this behaviour. 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.IChartModifierBase.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.IChartModifierBase.OnDetached">
            <summary>
            Called immediately before the Chart Modifier is detached from the Chart Surface
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.InertialZoomPanModifier">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.InertialZoomPanModifier"/> provides a mouse drag to pan the X and Y axes.
            Add to a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> and set IsEnabled to true to enable this behaviour
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InertialZoomPanModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.InertialZoomPanModifier"/> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InertialZoomPanModifier.Pan(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Receives zoom command from the user.
            </summary>
            <param name="currentPoint">Current point of zoom gesture.</param>
            <param name="lastPoint">Previous point of zoom gesture.</param>
            <param name="startPoint">Start point of zoom gesture.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InertialZoomPanModifier.OnModifierMouseUp(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InertialZoomPanModifier.ResetInertia">
            <summary>
            Instantly stops any inertia that can be associated with this modifier.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.ModifierEventArgsBase">
            <summary>
            Defines a ModifierEventArgsBase, which provides a set of properties and methods which are common to all derived classes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierEventArgsBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ModifierEventArgsBase"/> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierEventArgsBase.#ctor(Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ModifierEventArgsBase"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="isMaster">if set to <c>true</c> [is master].</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ModifierEventArgsBase.IsMaster">
            <summary>
            If True, then this mouse event occurred on a master <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/>. 
            Used to process which modifier was the source of an event when multiple modifiers are linked
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ModifierEventArgsBase.Handled">
            <summary>
            Gets or sets whether this event is Handled. If true, no further modifiers will be informed of the mouse event and mouse events will cease bubbling and tunnelling
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ModifierEventArgsBase.Source">
            <summary>
            In the case where e.Master is true, this returns the instance of the master chart modifier
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs">
            <summary>
            Defines a cross-platform Manipulation event args, used by <see cref="T:Ecng.Xaml.Charting.ChartModifiers.IChartModifier"/> derived types to process manipulation events.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs"/> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Input.TouchPoint},System.Boolean,Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs"/> class.
            </summary>
            <param name="touchPoints">The touch points.</param>
            <param name="isMaster">if set to <c>true</c>, this is a Master event, else Slave event.</param>
            <param name="master">The master instance in the case where charts are synchronized using <see cref="F:Ecng.Xaml.Charting.Utility.Mouse.MouseManager.MouseEventGroupProperty"/>.</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs.Manipulators">
            <summary>
            Gets a collection of objects that represents the touch contacts for the manipulation.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.PinchZoomModifier">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.PinchZoomModifier"/> provides zooming of the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> with the pinch gesture
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.PinchZoomModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.PinchZoomModifier"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.PinchZoomModifier.IsDragging">
            <summary>
            If True, Dragging is in progress
            </summary>        
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.PinchZoomModifier.IsUniform">
            <summary>
            Gets or sets the value of IsUniform property, showing whether the aspect of the chart is preserved while zooming in or out.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.PinchZoomModifier.PerformZoom(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Performs a zoom around the <paramref name="mousePoint" /> by the specified X and Y factor
            </summary>
            <param name="mousePoint">The mouse point.</param>
            <param name="xValue">The x zoom factor.</param>
            <param name="yValue">The y zoom factor.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.PinchZoomModifier.OnModifierTouchDown(Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a Multi-Touch Down interaction occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.PinchZoomModifier.OnModifierTouchMove(Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a Multi-Touch Move interaction occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.PinchZoomModifier.OnModifierTouchUp(Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a Multi-Touch Up interaction occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.RelativeZoomModifierBase">
            <summary>
            Defines the base class to modifiers which performs relative zoom, such as the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.MouseWheelZoomModifier"/> and <see cref="T:Ecng.Xaml.Charting.ChartModifiers.PinchZoomModifier"/>.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.RelativeZoomModifierBase.XyDirectionProperty">
            <summary>
            Defines the XyDirection dependency property
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.RelativeZoomModifierBase.XyDirection">
            <summary>
            Gets or sets the <see cref="P:Ecng.Xaml.Charting.ChartModifiers.RelativeZoomModifierBase.XyDirection"/> to restrict zoom interactivity to.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.RelativeZoomModifierBase.GrowFactor">
            <summary>
            Gets or sets the grow factor to scale (or shrink) both axes on mouse wheel
            </summary>
            <value>The grow factor.</value>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.RelativeZoomModifierBase.PerformZoom(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Performs a zoom on all X and Y Axis around the <paramref name="mousePoint" /> by the specified X and Y factor
            </summary>
            <param name="mousePoint">The mouse point.</param>
            <param name="xValue">The x zoom factor.</param>
            <param name="yValue">The y zoom factor.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.RelativeZoomModifierBase.GrowBy(System.Windows.Point,Ecng.Xaml.Charting.Visuals.Axes.IAxis,System.Double)">
            <summary>
            Performs a zoom on a specific axis around the <paramref name="mousePoint" /> by the specified scale factor
            </summary>
            <param name="mousePoint">The mouse point.</param>
            <param name="axis">The axis.</param>
            <param name="fraction">The scale factor.</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier"/> provides drawing of vertical slices based on collection of <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation"/>
            Add to a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> and set VerticalLines collection to enable this behaviour
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier.IncludeSeriesProperty">
            <summary>
            Defined IncludeSeries Attached Property
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier.GetIncludeSeries(System.Windows.DependencyObject)">
            <summary>
            Gets the include Series or not
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier.SetIncludeSeries(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the include Series or not
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier.VerticalLinesProperty">
            <summary>
             Defines the VerticalLines DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier.VerticalLines">
            <summary>
            Gets or sets <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotationCollection"/> of <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation"/> for making vertical slices
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier.GetSeriesInfoAt(System.Windows.Point)">
            <summary>
            Enumerates the RenderableSeries on the parent <see cref="P:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.ParentSurface" /> and gets <see cref="T:Ecng.Xaml.Charting.SeriesInfo" /> objects in given point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier.GetRolloverMarkerFrom(Ecng.Xaml.Charting.SeriesInfo)">
            <summary>
            Get rollover marker from <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> to place on chart 
            </summary>
            <param name="seriesInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier.DetachRolloverMarker(System.Windows.FrameworkElement)">
            <summary>
            Detaches a RolloverMarker from the <see cref="!:UltrachartSurface.ModifierSurface" />
            </summary>
            <param name="rolloverMarker">The rollover marker.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier.OnParentSurfaceMouseLeave">
            <summary>
            Called when the mouse leaves the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier.IsEnabledAt(System.Windows.Point)">
            <summary>
            When overridden in derived classes, indicates whether mouse point is valid for current modifier
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase" /> instance
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier.OnAttached">
            <summary>
            Called when the element is attached to the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier.OnDetached">
            <summary>
            Called immediately before the Chart Modifier is detached from the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase"/> is part of the ChartModifier API, which provides vertical slices on <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> and a mouse-over templated tooltip to bind to a custom DataContext, provided by the output of the Hit-Test operation on a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase.RolloverLabelProperty">
            <summary>
            Defines the RolloverLabel Attached Property, which can be attached to point marker
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase.HoverDelay">
            <summary>
            Gets or sets delay for showing of tooltips in miliseconds
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase.#ctor">
            <summary>
            Creates instance of <see cref="T:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase.OnDetached">
            <summary>
            Called immediately before the Chart Modifier is detached from the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> instance
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase.DetachRolloverMarker(System.Windows.FrameworkElement)">
            <summary>
            Detaches a RolloverMarker from the <see cref="!:UltrachartSurface.ModifierSurface" />
            </summary>
            <param name="rolloverMarker">The rollover marker.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase.IsHitPointValid(Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            When overridden in derived classes, indicates whether <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/> result of hit-test should be returned from the <see cref="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase.GetSeriesInfoAt(System.Windows.Point)"/> method.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase.HandleSlaveMouseEvent(System.Windows.Point)">
            <summary>
            When overriden in a derived class, called to handle the Slave <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> MouseMove event
            </summary>
            <param name="mousePoint">The current Mouse-point</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase.HandleMasterMouseEvent(System.Windows.Point)">
            <summary>
            When overriden in a derived class, called to handle the Master <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> MouseMove event
            </summary>
            <param name="mousePoint">The current Mouse-point</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase.GetSeriesInfoAt(System.Windows.Point)">
            <summary>
            Enumerates the RenderableSeries on the parent <see cref="P:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.ParentSurface" /> and gets <see cref="T:Ecng.Xaml.Charting.SeriesInfo" /> objects in given point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase.GetRolloverMarkerFrom(Ecng.Xaml.Charting.SeriesInfo)">
            <summary>
            Get rollover marker from <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> to place on chart 
            </summary>
            <param name="seriesInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase.TryUpdateOverlays(System.Windows.Point)">
            <summary>
            If the current modifier IsEnabled, and the Point is valid for the modifier, updates axis and chart overlays
            </summary>
            <param name="atPoint">The current mouse point</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase.TryUpdateAxesLabels(System.Windows.Point)">
            <summary>
            If <see cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.ShowAxisLabels"/>, and the Point is valid for the modifier, updates axis labels
            </summary>
            <param name="showAxesLabelsAt">The current mouse point</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase.ClearAll">
            <summary>
            When overriden in a derived class, this method should clear all markers and tooltips from the <see cref="!:UltrachartSurface.ModifierSurface" />
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase.OnTooltipLabelTemplateChanged">
            <summary>
            When overriden in a derived class, applies new template to tooltip label, <seealso cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.TooltipLabelTemplateSelector" /> and <seealso cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.TooltipLabelTemplate" />
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase.OnAxisLabelTemplateChanged">
            <summary>
            When overriden in a derived class, applies new template to axis labels, <seealso cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.AxisLabelTemplateSelector" /> and <seealso cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.AxisLabelTemplate" />
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifierBase.OnSelectedSeriesChanged(System.Collections.Generic.IEnumerable{Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries},System.Collections.Generic.IEnumerable{Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries})">
            <summary>
            Called when the parent surface SelectedSeries collection changes
            </summary>
            <param name="oldSeries"></param>
            <param name="newSeries"></param>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier">
            <summary>
            A custom <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> which places an <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation"/> on the YAxis for each
            <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> in the chart, showing the current <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> latest Y-value. 
            
            E.g. for each series, place one axis-marker with the latest Y-value of the series
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.AxisMarkerStyleProperty">
            <summary>
            The axis marker style DependencyProperty. 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.YAxisIdProperty">
            <summary>
            Defines the YAxisId DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.IsSeriesValueModifierEnabledProperty">
            <summary>
            The IsSeriesValueModifier DependencyProperty. When Set to True on a RenderableSeries, this series will be included in the SeriesValueModifier processing, else it will be excluded
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.SetIsSeriesValueModifierEnabled(System.Windows.UIElement,System.Boolean)">
            <summary>
            Sets the IsSeriesValueModifierEnabled property on the element. 
            When Set to True on a RenderableSeries, this series will be included in the SeriesValueModifier processing, else it will be excluded
            </summary>
            <param name="element">The element.</param>
            <param name="value">if set to <c>true</c> this series will be included in the SeriesValueModifier processing, else it will be excluded.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.GetIsSeriesValueModifierEnabled(System.Windows.UIElement)">
            <summary>
            Gets the IsSeriesValueModifierEnabled property on the element. 
            When Set to True on a RenderableSeries, this series will be included in the SeriesValueModifier processing, else it will be excluded
            </summary>
            <param name="element">The element.</param>
            <returns>if set to <c>true</c> this series will be included in the SeriesValueModifier processing, else it will be excluded.</returns>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.IsRenderableSeriesInViewportProperty">
            <summary>
            Defines the IsRenderableSeriesInViewport attached property. It is used to hide the AxisMarker associated with a renderable series when it goes outside the viewport.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.GetIsRenderableSeriesInViewport(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.IsRenderableSeriesInViewportProperty"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.SetIsRenderableSeriesInViewport(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Gets the value of the <see cref="F:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.IsRenderableSeriesInViewportProperty"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.IsLastPointInViewportProperty">
            <summary>
            Defines the IsLastPointInViewportProperty attached property.  It is used to change the opacity of AxisMarker 
            associated with a renderable series when the last point it goes outside the viewport.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.GetIsLastPointInViewport(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.IsLastPointInViewportProperty"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.SetIsLastPointInViewport(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="F:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.IsLastPointInViewportProperty"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.SeriesMarkerColorProperty">
            <summary>
            Defines the LastPointColor attached property. Holds the color of the last visible bar in a viewport for a RenderableSeries
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.GetSeriesMarkerColor(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.SeriesMarkerColorProperty"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.SetSeriesMarkerColor(System.Windows.DependencyObject,System.Windows.Media.Color)">
            <summary>
            Sets the value of the <see cref="F:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.SeriesMarkerColorProperty"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.AnnotationsBySeries">
            <summary>
            Stores <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation"/> instances keyed by <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.AxisMarkerStyle">
            <summary>
            Gets or sets a Style to apply to Axis Markers. 
            See remarks for implementation
            </summary>
            <remarks>
            NOTE: If you intend to override the AxisMarkerStyle, assume the DataContext is the RenderableSeries and you should include bindings of AxisMarker.Y1 to the RenderableSeries.DataSeries.LatestValue</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.YAxisId">
            <summary>
            Defines which YAxis to bind the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier"/> to, matching by string Id
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.OnDetached">
            <summary>
            Called immediately before the Chart Modifier is detached from the Chart Surface
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier"/> instance
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier.OnParentSurfaceRendered(Ecng.Xaml.Charting.UltrachartRenderedMessage)">
            <summary>
            Called when the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" /> is rendered
            </summary>
            <param name="e">The <see cref="T:Ecng.Xaml.Charting.UltrachartRenderedMessage" /> which contains the event arg data</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifierBase">
            <summary>
            Base class for modifiers responsible for pan by mouse drag.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifierBase.XyDirectionProperty">
            <summary>
            Defines the XyDirection dependency property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifierBase.ClipModeXProperty">
            <summary>
            Defines the ClipToExtentsX Dependency Property 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifierBase.ZoomExtentsYProperty">
            <summary>
            Defines the ZoomExtentsY DependencyProperty
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifierBase.ZoomExtentsY">
            <summary>
            If true, zooms to extents on the Y-Axis on each zoom operation when panning in X-Direction only. Use in conjuction with <see cref="P:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifierBase.XyDirection"/> to achieve different zooming effects
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifierBase.XyDirection">
            <summary>
            Defines the direction of the InertialZoomPanModifier
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifierBase.ClipModeX">
            <summary>
            Defines how panning behaves when you reach the edge of the X-Axis extents. 
            e.g. ClipMode.ClipAtExtents prevents panning outside of the X-Axis, ClipMode.None allows panning outside
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifierBase.IsDragging">
            <summary>
            Gets whether the user is currently dragging the chart
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifierBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifierBase"/> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifierBase.OnModifierMouseDown(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifierBase.OnModifierMouseUp(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifierBase.OnModifierMouseMove(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifierBase.Pan(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Receives pan command from the user.
            </summary>
            <param name="currentPoint">Current point of the gesture.</param>
            <param name="lastPoint">Previous point of the gesture.</param>
            <param name="startPoint">Start point of the gesture.</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase">
            <summary>
            Provides base class for dragging operations on axes
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.AxisIdProperty">
            <summary>
            Defines the YAxisId DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.DragModeProperty">
            <summary>
            Defines the DragMode DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.MinTouchAreaProperty">
            <summary>
            Defines the MinTouchArea DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.DragMode">
            <summary>
            Gets or sets the DragMode of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.YAxisDragModifier"/>. This modifier may be used to scale the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRange"/>
            or pan the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRange"/> creating a scrolling or vertical pan effect.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.AxisId">
            <summary>
            Defines which YAxis to bind the YAxisDragModifier to, matching by string Id
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.MinTouchArea">
            <summary>
            Gets or sets minimal area of recognition (min height for horizontal axis or min width for vertical), where user click or touch triggers zoom behavior.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.IsDragging">
            <summary>
            Gets a value indicating whether the user is currently dragging the axis
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.OnDetached">
            <summary>
            Called immediately before the Chart Modifier is detached from the Chart Surface
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.SetAxisCursor(System.Windows.Input.Cursor)">
            <summary>
            Sets passed cursor on current axis, or default cursor returned by <see cref="M:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.GetUsedCursor(Ecng.Xaml.Charting.Visuals.Axes.IAxis)"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> instance
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.GetCurrentAxis">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> instance, which current modifier is associated with, on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.GetIsSecondHalf(System.Windows.Point,System.Windows.Rect,System.Boolean)">
            <summary>
            Gets whether the specified mouse point is within the second (right-most or top-most) half of the Axis bounds
            </summary>
            <param name="point">The mouse point</param>
            <param name="axisBounds">The axis bounds</param>
            <param name="isHorizontalAxis">Value, which indicates whether current axis is horizontal or not</param>
            <returns>True if the point is within the second (right-most or top-most) half of the axis bounds, else false</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.GetUsedCursor(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Depending on axis orientation, returns a Cursor to show during mouse-over of the axis
            </summary>
            <param name="axis">The axis instance</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.OnModifierMouseDown(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.OnModifierMouseMove(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.OnModifierMouseUp(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.PerformPan(System.Windows.Point,System.Windows.Point)">
            <summary>
            Peforms a pan on the assocaited <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>. The pan is considered to be a drag from <paramref name="currentPoint"/> to <paramref name="lastPoint"/>
            </summary>
            <param name="currentPoint">The current mouse point</param>
            <param name="lastPoint">The last mouse point</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.PerformScale(System.Windows.Point,System.Windows.Point,System.Boolean)">
            <summary>
            Performs a Scale on the associated <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>. The scale is considered to be a drag from <paramref name="currentPoint"/> to <paramref name="lastPoint"/>
            </summary>
            <param name="currentPoint">The current mouse point</param>
            <param name="lastPoint">The last mouse point</param>
            <param name="isSecondHalf">Boolean flag to determine which side of the axis is scaled</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.CalculateScaledRange(System.Windows.Point,System.Windows.Point,System.Boolean,Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            When overriden in a derived class, calculates an output <see cref="T:Ecng.Xaml.Charting.IRange"/> to apply to the associated <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase">Axis</see>, 
            given the input parameters
            </summary>
            <param name="currentPoint">The current mouse position</param>
            <param name="lastPoint">The last mouse position</param>
            <param name="isSecondHalf">A flag, which determines how the scale operates, e.g. which half of the axis (top or bottom, left or right) was dragged</param>
            <param name="axis">The axis being operated on</param>
            <returns>The output <see cref="T:Ecng.Xaml.Charting.IRange"/></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AxisDragModifierBase.CalculateRelativeRange(Ecng.Xaml.Charting.IRange,Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            When overriden in a derived class, calculates an output <see cref="T:Ecng.Xaml.Charting.IRange"/> to apply to the associated <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase">Axis</see>, 
            given the input parameters.
            </summary>
            <remarks>A Relative-Range is defined as one that affects the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GrowBy"/>, not the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRange"/>. This 
            is used in cases where the YAxis or XAxis has <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AutoRange"/> set to Always, and you still want to be able to drag the axis to 
            set a constant, relative margin of spacing around the upper and lower bounds of the data</remarks>
            <param name="fromRange">The input range, expecting a VisibleRange</param>
            <param name="axis">The axis being operated on</param>
            <returns>The output <see cref="T:Ecng.Xaml.Charting.IRange"/> which can then be applied to the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GrowBy"/> property to get the same affect as applying the input visible-range</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.SourceMode">
            <summary>
            Defines constants for different series sources in <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.SourceMode.AllSeries">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase"/> uses All Series as inputs
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.SourceMode.AllVisibleSeries">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase"/> uses All Visible Series as inputs
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.SourceMode.SelectedSeries">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase"/> uses Selected series as inputs
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.SourceMode.UnselectedSeries">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase"/> uses Unselected series as inputs
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase">
            <summary>
            An abstract base class which factors out handling of Axis and Chart Label templates which are shared in the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier"/> and <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier"/>.
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier"/>
            <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier"/>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.UseInterpolationProperty">
            <summary>
            Defines the UseInterpolation DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.SourceModeProperty">
            <summary>
            Defines the RolloverMode DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.SeriesDataProperty">
            <summary>
            Defines the SeriesData Dependency property which you may bind to in your applications to show cursor updates on mouse-move
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.CurrentPoint">
            <summary>
            The Current MousePoint on the parent <see cref="!:UltrachartSurface.ModifierSurface"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.SeriesData">
            <summary>
            Gets or sets the <see cref="T:Ecng.Xaml.Charting.ChartDataObject"/> which may be bound to, to provide feedback to the user of cursor updates
            </summary>
            <value>The series data.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.UseInterpolation">
            <summary>
            Gets or sets whether the interaction should use interpolation
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.SourceMode">
            <summary>
            Gets or sets type of series on which interaction is performed
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.OnParentSurfaceRendered(Ecng.Xaml.Charting.UltrachartRenderedMessage)">
            <summary>
            Called when the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> is rendered
            </summary>
            <param name="e">The <see cref="T:Ecng.Xaml.Charting.UltrachartRenderedMessage"/> which contains the event arg data</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.OnParentSurfaceMouseLeave">
            <summary>
            Called when the mouse leaves the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.ClearAll">
            <summary>
            When overriden in a derived class, this method should clear all markers and tooltips from the <see cref="!:UltrachartSurface.ModifierSurface"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.OnModifierMouseMove(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.HandleMouseEvent(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            General logic for processing mouse events
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.IsEnabledAt(System.Windows.Point)">
            <summary>
            When overridden in derived classes, indicates whether mouse point is valid for current modifier
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.HandleMasterMouseEvent(System.Windows.Point)">
            <summary>
            When overriden in a derived class, called to handle the Master <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> MouseMove event
            </summary>
            <param name="mousePoint">The current Mouse-point</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.HandleSlaveMouseEvent(System.Windows.Point)">
            <summary>
            When overriden in a derived class, called to handle the Slave <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> MouseMove event
            </summary>
            <param name="mousePoint">The current Mouse-point</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.HitTestAxis(Ecng.Xaml.Charting.Visuals.Axes.IAxis,System.Windows.Point)">
            <summary>
            Performs hit-test on <paramref name="axis"/>, used internally by modifiers
            </summary>
            <param name="axis"></param>
            <param name="atPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.GetSeriesInfoAt(System.Windows.Point)">
            <summary>
            Enumerates RenderableSeries on the parent <see cref="P:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.ParentSurface"/> and gets <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> objects in given point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.GetSeriesInfoAt(System.Windows.Point,System.Double)">
            <summary>
            Enumerates RenderableSeries on the parent <see cref="P:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.ParentSurface"/> and gets <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> objects in given point
            </summary>
            <param name="point"></param>
            <param name="hitTestRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.GetSeriesInfoAt(System.Func{Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo})">
            <summary>
            Called internally, gets the SeriesInfo on all RenderableSeries using the provided hit-test function
            </summary>
            <param name="hitTestMethod">The hit-test function</param>
            <returns>The seriesinfo list</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.IsHitPointValid(Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            When overridden in derived classes, indicates whether <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/> result of hit-test should be returned from the <see cref="M:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.GetSeriesInfoAt(System.Windows.Point)"/> method.
            </summary>
            <param name="hitTestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.IsSeriesValid(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries)">
            <summary>
            When overridden in derived classes, indicates whether the series should be inspected in order to get <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> inside the <see cref="M:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.GetSeriesInfoAt(System.Windows.Point)"/> method.
            </summary>
            <param name="series"></param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.TooltipModifier">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.TooltipModifier"/> provides a mouse-over tooltip to a chart, outputting a single <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> object to bind to which updates as the mouse moves over data-points.
            Add to a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> and set IsEnabled to true to enable this behaviour
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.TooltipModifier.IncludeSeriesProperty">
            <summary>
            Defined IncludeSeries Attached Property
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifier.GetIncludeSeries(System.Windows.DependencyObject)">
            <summary>
            Gets the include Series or not
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifier.SetIncludeSeries(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the include Series or not
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.TooltipModifier.TooltipLabelDataContextSelectorProperty">
            <summary>
            Defines the TooltipLabelDataContext DependencyProperty
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifier.TooltipLabelDataContextSelector">
            <summary>
            Gets or sets the function which is called internally to get a DataContext for a particular data point
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.TooltipModifier"/> class
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifier.ClearAll">
            <summary>
            When overriden in a derived class, this method should clear all markers and tooltips from the <see cref="!:UltrachartSurface.ModifierSurface" />
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifier.HandleMasterMouseEvent(System.Windows.Point)">
            <summary>
            When overriden in a derived class, called to handle the Master <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase" /> MouseMove event
            </summary>
            <param name="mousePoint">The current Mouse-point</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifier.HandleSlaveMouseEvent(System.Windows.Point)">
            <summary>
            When overriden in a derived class, called to handle the Slave <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase" /> MouseMove event
            </summary>
            <param name="mousePoint">The current Mouse-point</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifier.OnTooltipLabelTemplateChanged">
            <summary>
            When overriden in a derived class, applies new template to tooltip label, <seealso cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.TooltipLabelTemplateSelector" /> and <seealso cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.TooltipLabelTemplate" />
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifier.OnAxisLabelTemplateChanged">
            <summary>
            When overriden in a derived class, applies new template to axis labels, <seealso cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.AxisLabelTemplateSelector" /> and <seealso cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.AxisLabelTemplate" />
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.ShowTooltipOptions">
            <summary>
            Specifies actions that cause roolover tooltip to be shown
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ShowTooltipOptions.MouseOver">
            <summary>
            Show tooltip when mouse is over point
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ShowTooltipOptions.MouseHover">
            <summary>
            Show tooltip when mouse hovers over the surface
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ShowTooltipOptions.Always">
            <summary>
            Show tooltip always
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ShowTooltipOptions.MouseLeftButtonDown">
            <summary>
            Show tooltip when mouse left button is pressed
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ShowTooltipOptions.MouseRightButtonDown">
            <summary>
            Show tooltip when mouse right button is pressed
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ShowTooltipOptions.MouseMiddleButtonDown">
            <summary>
            Show tooltip when mouse middle button is pressed
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase"/> is part of the ChartModifier API, which factors out handling of Axis and Chart Label templates, and provides a mouse-over templated tooltip to bind to a custom DataContext, provided by the output of the Hit-Test operation on a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/>
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/>
            <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier"/>
            <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier"/>
            <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.TooltipModifier"/>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.ShowTooltipOnProperty">
            <summary>
            Defines the ShowTooltipOn DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.LineOverlayStyleProperty">
            <summary>
            Defines the LineOverlayStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.AxisLabelTemplateProperty">
            <summary>
            Defines the AxisLabelTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.ShowAxisLabelsProperty">
            <summary>
            Defines the ShowAxisLabels DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.TooltipLabelTemplateProperty">
            <summary>
            Defines the LabelTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.AxisLabelTemplateSelectorProperty">
            <summary>
            Defines the AxisLabelTemplateSelector DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.TooltipLabelTemplateSelectorProperty">
            <summary>
            Defines the LabelTemplateSelector DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.DefaultAxisLabelTemplateSelectorProperty">
            <summary>
            Defines the DefaultAxisLabelTemplateSelector DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.DefaultAxisLabelTemplateSelectorStyleProperty">
            <summary>
            Defines the DefaultAxisLabelTemplateSelectorStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.DefaultTooltipLabelTemplateSelectorProperty">
            <summary>
            Defines the DefaultTooltipLabelTemplateSelector DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.DefaultTooltipLabelTemplateSelectorStyleProperty">
            <summary>
            Defines the DefaultTooltipLabelTemplateSelectorStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.HoverDelayProperty">
            <summary>
            Defines HoverDelay DependencyProperty
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.ShowTooltipOn">
            <summary>
            Gets or sets when to show tooltips
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.LineOverlayStyle">
            <summary>
            Gets or sets the style applied to the modifier overlays (TargetType=Line)
            </summary>
            <value>The crosshairs style.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.AxisLabelTemplate">
            <summary>
            Gets or sets the AxisLabelTemplate used for the labels on axes
            </summary>
            <value>The axis label template.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.TooltipLabelTemplate">
            <summary>
            Gets or sets the TooltipLabelTemplate used for the labels on data-points
            </summary>
            <value>The axis label template.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.ShowAxisLabels">
            <summary>
            Gets or sets value, indicates whether show labels on axes or not
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.AxisLabelTemplateSelector">
            <summary>
            Gets or sets instance of <see cref="T:Ecng.Xaml.Charting.IDataTemplateSelector"/> which is used by modifier
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.TooltipLabelTemplateSelector">
            <summary>
            Gets or sets instance of <see cref="T:Ecng.Xaml.Charting.IDataTemplateSelector"/> which is used by modifier
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.DefaultAxisLabelTemplateSelector">
            <summary>
            Gets default instance of <see cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.AxisLabelTemplateSelector"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.DefaultAxisLabelTemplateSelectorStyle">
            <summary>
            Gets or sets style for <see cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.DefaultAxisLabelTemplateSelector"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.DefaultTooltipLabelTemplateSelector">
            <summary>
            Gets default instance of <see cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.TooltipLabelTemplateSelector"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.DefaultTooltipLabelTemplateSelectorStyle">
            <summary>
            Gets or sets style for <see cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.DefaultTooltipLabelTemplateSelector"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase" /> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.OnModifierMouseDown(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.OnModifierMouseUp(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> instance
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.HasToShowTooltip">
            <summary>
            Checks <see cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.ShowTooltipOn"/> property and returns value, indicating whether the tooltip has to be shown
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.IsHitPointValid(Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            When overridden in derived classes, indicates whether <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/> result of hit-test should be returned from the <see cref="M:Ecng.Xaml.Charting.ChartModifiers.InspectSeriesModifierBase.GetSeriesInfoAt(System.Windows.Point)"/> method.
            </summary>
            <param name="hitTestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.OnXAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when [X axes collection changed].
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.OnYAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when [Y axes collection changed].
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.UpdateAxesOverlay(System.Windows.Point)">
            <summary>
            Updates the Axes Overlays on the X and Y Axis
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.ClearAxesOverlay">
            <summary>
            Clears Axis Overlays on the X and Y Axes 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.RecreateLabels">
            <summary>
            Recreates Labels on the X and Y Axis
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.CreateFromTemplate(System.Windows.Controls.ControlTemplate,Ecng.Xaml.Charting.IDataTemplateSelector,System.Object)">
            <summary>
            Creates instances of <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.TemplatableControl"/> based on passed <paramref name="dataTemplateSelector"/>.
            If <paramref name="dataTemplateSelector"/> == Null, the control is created based on passed <paramref name="template"/>.
            </summary>
            <param name="template">The ControlTemplate to be applied</param>
            <param name="dataTemplateSelector">The object which is used to select a template for a new control</param>
            <param name="dataContext">The value which is used by <paramref name="dataTemplateSelector"/> to determine proper template</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.OnTooltipLabelTemplateChanged">
            <summary>
            When overriden in a derived class, applies new template to tooltip label, <seealso cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.TooltipLabelTemplateSelector" /> and <seealso cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.TooltipLabelTemplate" />
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.OnAxisLabelTemplateChanged">
            <summary>
            When overriden in a derived class, applies new template to axis labels, <seealso cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.AxisLabelTemplateSelector" /> and <seealso cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.AxisLabelTemplate" />
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.AnnotationCreationModifier">
            <summary>
            A custom <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> to be used in conjunction with the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection"/>. The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.AnnotationCreationModifier"/> 
            allows creation of annotations on mouse-click and drag. See the example of use CreateAnnotationsDynamically in the examples-suite
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.AnnotationCreationModifier.YAxisIdProperty">
            <summary>Defines the YAxisId DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.AnnotationCreationModifier.XAxisIdProperty">
            <summary>Defines the XAxisId DependencyProperty</summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.ChartModifiers.AnnotationCreationModifier.AnnotationCreated">
            <summary>
            Event raised when an annotation is created
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.AnnotationCreationModifier.YAxisId">
            <summary>
            Gets or sets the ID of the Y-Axis which this Annotation is measured against
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.AnnotationCreationModifier.XAxisId">
            <summary>
            Gets or sets the ID of the X-Axis which this Annotation is measured against
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.AnnotationCreationModifier.AnnotationType">
            <summary>
            Gets or sets the type of the annotation to create
            </summary>
            <value>
            The type of the annotation.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">value</exception>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.AnnotationCreationModifier.AnnotationStyle">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Style"/> to apply to the annotation being created
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.AnnotationCreationModifier.Annotation">
            <summary>
            Gets the newly created <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AnnotationCreationModifier.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase" /> instance
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AnnotationCreationModifier.OnAnnotationCreated">
            <summary>
            Called when [annotation created].
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AnnotationCreationModifier.OnModifierMouseMove(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="mouseEventArgs">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AnnotationCreationModifier.OnModifierMouseUp(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="mouseButtonEventArgs">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.AnnotationCreationModifier.CreateAnnotation(System.Type,System.Windows.Style)">
            <summary>
            Creates an annotation of the specified Type and applies the style to it
            </summary>
            <param name="annotationType">The Type of annotation to create</param>
            <param name="annotationStyle">The style to apply to the annotation</param>
            <returns>The annotation instance</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.ApiElementBase">
            <summary>
            Base class to expose properties and methods for <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase"/> derived types and <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> derived types
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.ChartModifiers.ApiElementBase.PropertyChanged">
            <summary>
            Occurs when a property changes in the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ApiElementBase.ParentSurface">
            <summary>
            Gets or sets the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to perform operations on 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ApiElementBase.XAxes">
            <summary>
            Returns the XAxes on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ApiElementBase.YAxes">
            <summary>
            Returns the YAxes on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ApiElementBase.YAxis">
            <summary>
            Gets the primary YAxis instance from the parent <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.YAxes"/> collection
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ApiElementBase.XAxis">
            <summary>
            Gets the primary XAxis instance from the parent <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.XAxes"/> collection
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ApiElementBase.Services">
            <summary>
            Gets or sets a <see cref="T:Ecng.Xaml.Charting.IServiceContainer"/> container
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ApiElementBase.ModifierSurface">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.Visuals.IChartModifierSurface"/> instance on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>, which acts as a canvas to place UIElements
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ApiElementBase.IsAttached">
            <summary>
            Gets or sets whether this Element is attached to a parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <value><c>true</c> if this instance is attached; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ApiElementBase.RootGrid">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.Visuals.IMainGrid"/> which is the root component for the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>, 
            containing the XAxis, YAxes, ModifierSurface, RenderSurface and GridLinesPanel
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ApiElementBase.OnAttached">
            <summary>
            Called when the element is attached to the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ApiElementBase.OnDetached">
            <summary>
            Called immediately before the element is detached from the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ApiElementBase.GetYAxis(System.String)">
            <summary>
            Gets the YAxis <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> instance on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> at the specified <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ApiElementBase.GetXAxis(System.String)">
            <summary>
            Gets the XAxis <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> instance on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> at the specified <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ApiElementBase.OnInvalidateParentSurface">
            <summary>
            Raises the <see cref="T:Ecng.Xaml.Charting.InvalidateUltrachartMessage"/> which causes the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to invalidate
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ApiElementBase.GetAndAssertTemplateChild``1(System.String)">
            <summary>
            Gets the TemplateChild by the specified name and casts to type <typeparamref name="T" />, asserting that the result is not null
            </summary>
            <typeparam name="T">The Type of the templated part</typeparam>
            <param name="childName">Name of the templated part.</param>
            <returns>The template part instance</returns>
            <exception cref="T:System.InvalidOperationException">Unable to Apply the Control Template. Child is missing or of the wrong type</exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ApiElementBase.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event, as part of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase">
            <summary>
            Defines the base class to a Chart Modifier, which can be used to extend the interactivity or rendering of the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup" />
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.ReceiveHandledEventsProperty">
            <summary>
            Defines the ReceiveHandledEvents DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.IsEnabledProperty">
            <summary>
            Defines the IsEnabled Attached Property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.ExecuteOnProperty">
            <summary>
            Defines the ExecuteOn DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.MouseModifierProperty">
            <summary>
            Defines the MouseModifier DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.CanReceiveMouseEvents">
            <summary>
            Returns a value indicating whether mouse events should be propagated to the mouse target.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnAttached">
            <summary>
            Called when the element is attached to the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnDetached">
            <summary>
            Called immediately before the element is detached from the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this element is enabled in the user interface (UI).
            </summary>
            <returns>true if the element is enabled; otherwise, false. The default value is true.</returns>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.ExecuteOn">
            <summary>
            Determines when the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ZoomExtentsModifier"/> executes, 
            args.g. <see cref="F:Ecng.Xaml.Charting.ChartModifiers.ExecuteOn.MouseDoubleClick"/> will cause a zoom extents on mouse double 
            click of the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.ReceiveHandledEvents">
            <summary>
            Gets or sets a value, indicates whether current modifier handles events
            which have already been marked as handled
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.ModifierName">
            <summary>
            Gets modifier name
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.IsMouseLeftButtonDown">
            <summary>
            Gets if the Left mouse button is currently down
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.IsMouseMiddleButtonDown">
            <summary>
            Gets if the Middle mouse button is currently down
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.IsMouseRightButtonDown">
            <summary>
            Gets of the right mouse button is currently down
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.MouseEventGroup">
            <summary>
            Gets or sets a Mouse Event Group, an ID used to share mouse events across multiple targets
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnModifierDoubleClick(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse DoubleClick occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnModifierMouseDown(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnModifierMouseMove(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnModifierMouseUp(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnModifierMouseWheel(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse Wheel is scrolled on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse wheel operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnModifierTouchDown(Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a Multi-Touch Down interaction occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnModifierTouchMove(Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a Multi-Touch Move interaction occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnModifierTouchUp(Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a Multi-Touch Up interaction occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.Services">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/> which provides access to services throughout Ultrachart. 
            ServiceContainers are created one per <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.ParentSurface">
            <summary>
            Gets or sets the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to perform operations on
            </summary>
            <value>The parent surface.</value>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.GetPointRelativeTo(System.Windows.Point,Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Transforms the input point relative to the <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable"/> element. Can be used to transform 
            points relative to the <see cref="!:UltrachartSurface.ModifierSurface"/>, or <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.XAxis"/> for instance.
            </summary>
            <param name="point">The input point</param>
            <param name="relativeTo">The <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable"/> element to translate points relative to</param>
            <returns>The output point</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.IsPointWithinBounds(System.Windows.Point,Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Gets whether the mouse point is within the bounds of the hit-testable element. Assumes the mouse-point has not been translated yet (performs translation)
            </summary>
            <param name="mousePoint"></param>
            <param name="hitTestable"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.GetRelativePosition(System.Windows.Point,Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            OBSOLETE
            </summary>
            <param name="point"></param>
            <param name="relativeTo"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnXAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called with the <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.XAxes" /> <see cref="T:Ecng.Xaml.Charting.AxisCollection" /> changes. Overridden in derived classes.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnYAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called with the <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.YAxes" /> <see cref="T:Ecng.Xaml.Charting.AxisCollection" /> changes. Overridden in derived classes.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnAnnotationCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the AnnotationCollection changes. Overridden in derived classes.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnParentSurfaceResized(Ecng.Xaml.Charting.UltrachartResizedMessage)">
            <summary>
            Called when the parent UltrachartSurface is resized
            </summary>
            <param name="e">The <see cref="T:Ecng.Xaml.Charting.UltrachartResizedMessage"/> which contains the event arg data</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnParentSurfaceRendered(Ecng.Xaml.Charting.UltrachartRenderedMessage)">
            <summary>
            Called when the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> is rendered
            </summary>
            <param name="e">The <see cref="T:Ecng.Xaml.Charting.UltrachartRenderedMessage"/> which contains the event arg data</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.SetCursor(System.Windows.Input.Cursor)">
            <summary>
            Sets the Cursor on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="cursor"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the DataContext of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> instance
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnMasterMouseLeave(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the mouse leaves the Master of current <see cref="P:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.MouseEventGroup"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnParentSurfaceMouseLeave">
            <summary>
            Called when the mouse leaves the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnParentSurfaceMouseEnter">
            <summary>
            Called when the mouse enters the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.OnSelectedSeriesChanged(System.Collections.Generic.IEnumerable{Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries},System.Collections.Generic.IEnumerable{Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries})">
            <summary>
            Called when the parent surface SelectedSeries collection changes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.MatchesExecuteOn(Ecng.Xaml.Charting.ChartModifiers.MouseButtons,Ecng.Xaml.Charting.ChartModifiers.ExecuteOn)">
            <summary>
            Determines whether the currently pressed mouse buttons matches the <see cref="P:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.ExecuteOn"/>. Used to 
            filter events such as zoom or pan on right mouse button
            </summary>
            <param name="mouseButtons"></param>
            <param name="executeOn"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.GetSchema">
            <summary>
            Returns an XmlSchema that describes the XML representation of the object that is produced by the WriteXml method and consumed by the ReadXml method
            </summary>
            <remarks>
            This method is reserved by <see cref="T:System.Xml.Serialization.IXmlSerializable"/> and should not be used
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> from its XML representation.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> into its XML representation.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.ResetInertia">
            <summary>
            Instantly stops any inertia that can be associated with this modifier.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.Ecng#Xaml#Charting#ChartModifiers#IChartModifier#OnXAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called with the <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.XAxes" /> <see cref="T:Ecng.Xaml.Charting.AxisCollection" /> changes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.Ecng#Xaml#Charting#ChartModifiers#IChartModifier#OnYAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called with the <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.YAxes" /> <see cref="T:Ecng.Xaml.Charting.AxisCollection" /> changes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.Ecng#Xaml#Charting#ChartModifiers#IChartModifier#OnAnnotationCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the AnnotationCollection changes
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier">
            <summary>
            The CursorModifier provides a cross-hairs (cursor) plus tooltip with X,Y data values under the mouse as the mouse moves. 
            Add to a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> and set IsEnabled to true to enable this behaviour
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.IncludeSeriesProperty">
            <summary>
            Defined IncludeSeries Attached Property
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.GetIncludeSeries(System.Windows.DependencyObject)">
            <summary>
            Gets the include Series or not
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.SetIncludeSeries(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the include Series or not
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.ShowTooltipProperty">
            <summary>
            Defines the ShowTooltip DependencyProperty
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.AxisInfo">
            <summary>
            Provides a collection of <see cref="P:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.AxisInfo"/> structs, which may be data-bound to in the UI defined by the <see cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.AxisLabelTemplate"/> Control template
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.XAxisInfo">
            <summary>
            Provides an <see cref="P:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.AxisInfo"/> object, which may be data-bound to
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.YAxisInfo">
            <summary>
            Provides an <see cref="P:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.AxisInfo"/> object, which may be data-bound to
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.ShowTooltip">
            <summary>
            Gets or sets value, indicates whether show cursor tooltip or not
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.HoverDelay">
            <summary>
            Gets or sets delay for showing of tooltips in miliseconds
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.OnDetached">
            <summary>
            Called immediately before the Chart Modifier is detached from the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.OnParentSurfaceMouseEnter">
            <summary>
            Called when the mouse enters the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.HandleMasterMouseEvent(System.Windows.Point)">
            <summary>
            When overriden in a derived class, called to handle the Master <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase" /> MouseMove event
            </summary>
            <param name="mousePoint">The current Mouse-point</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.GetSeriesInfoAt(System.Windows.Point)">
            <summary>
            Enumerates RenderableSeries on the parent <see cref="P:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.ParentSurface"/> and gets <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> objects in given point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.GetAxesData(System.Windows.Point)">
            <summary>
            Performs a hit-test on all axes and aggregates data into the <see cref="P:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.AxisInfo"/> collection
            </summary>
            <param name="mousePoint"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.HandleSlaveMouseEvent(System.Windows.Point)">
            <summary>
            When overriden in a derived class, called to handle the Slave <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase" /> MouseMove event
            </summary>
            <param name="mousePoint">The current Mouse-point</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.ClearAll">
            <summary>
            When overriden in a derived class, this method should clear all markers and tooltips from the <see cref="!:UltrachartSurface.ModifierSurface" />
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.OnTooltipLabelTemplateChanged">
            <summary>
            When overriden in a derived class, applies new template to tooltip label, <seealso cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.TooltipLabelTemplateSelector" /> and <seealso cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.TooltipLabelTemplate" />
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.CursorModifier.OnAxisLabelTemplateChanged">
            <summary>
            When overriden in a derived class, applies new template to axis labels, <seealso cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.AxisLabelTemplateSelector" /> and <seealso cref="P:Ecng.Xaml.Charting.ChartModifiers.TooltipModifierBase.AxisLabelTemplate" />
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.IChartModifier">
            <summary>
            Defines the interface to a <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/>, which can be used to extend the interactivity or rendering of the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.IChartModifier.ParentSurface">
            <summary>
            Gets or sets the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to perform operations on 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.IChartModifier.XAxis">
            <summary>
            Gets the XAxis <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> instance on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.IChartModifier.YAxes">
            <summary>
            Returns the YAxes on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.IChartModifier.YAxis">
            <summary>
            Gets the primary YAxis, this is the first axis in the YAxes collection
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.IChartModifier.GetYAxis(System.String)">
            <summary>
            Gets the YAxis <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> instance on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> with the specified Id
            </summary>
            <param name="axisId">The Id of the axis to get</param>
            <returns>The Axis instance</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.IChartModifier.IsPointWithinBounds(System.Windows.Point,Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Gets whether the mouse point is within the bounds of the hit-testable element. Assumes the mouse-point has not been translated yet (performs translation)
            </summary>
            <param name="mousePoint"></param>
            <param name="hitTestable"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.IChartModifier.ResetInertia">
            <summary>
            Instantly stops any inertia that can be associated with this modifier.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.IChartModifier.OnXAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called with the <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.XAxes" /> <see cref="T:Ecng.Xaml.Charting.AxisCollection" /> changes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.IChartModifier.OnYAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called with the <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.XAxes" /> <see cref="T:Ecng.Xaml.Charting.AxisCollection" /> changes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.IChartModifier.OnAnnotationCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the AnnotationCollection changes
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.MasterSlaveChartModifier">
            <summary>
            Provides a base class for Linked Chart Modifiers. Classes that inherit this allow mouse events and interaction to occur across Chart Panes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.MasterSlaveChartModifier.OnModifierMouseMove(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.MasterSlaveChartModifier.OnModifierDoubleClick(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse DoubleClick occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.MasterSlaveChartModifier.OnModifierMouseDown(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.MasterSlaveChartModifier.OnModifierMouseUp(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.MasterSlaveChartModifier.OnModifierMouseWheel(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse Wheel is scrolled
            </summary>
            <param name="e">Arguments detailing the mouse wheel operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.MasterSlaveChartModifier.OnModifierTouchDown(Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a Multi-Touch Down interaction occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.MasterSlaveChartModifier.OnModifierTouchMove(Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a Multi-Touch Move interaction occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.MasterSlaveChartModifier.OnModifierTouchUp(Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a Multi-Touch Up interaction occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup">
            <summary>
            Allows a collection of modifiers to be set on the <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ChartModifier"/> property. Child modifiers are stored in the
            <see cref="P:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.ChildModifiers"/> collection, which is backed by a DependencyProperty so may be bound to in Xaml.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.ChildModifiersProperty">
            <summary>
            Defines the ChildModifiers DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.#ctor(Ecng.Xaml.Charting.ChartModifiers.IChartModifier[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup"/> class.
            </summary>
            <param name="childModifiers">The child modifier collection.</param>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.ChildModifiers">
            <summary>
            Gets or sets a collection of child modifiers in this group
            </summary>
            <value>The child modifiers.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.Item(System.String)">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.IChartModifier" /> with the specified name.
            </summary>
            <value>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.IChartModifier" />.
            </value>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.IChartModifier" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.IChartModifier" />.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.OnDetached">
            <summary>
            Called immediately before the Chart Modifier is detached from the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.OnXAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called with the <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.XAxes" /> <see cref="T:Ecng.Xaml.Charting.AxisCollection" /> changes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.OnYAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called with the <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.YAxes" /> <see cref="T:Ecng.Xaml.Charting.AxisCollection" /> changes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.OnAnnotationCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the AnnotationCollection changes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> instance
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.OnModifierDoubleClick(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse DoubleClick occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.OnModifierMouseDown(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.OnModifierMouseMove(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.OnModifierMouseUp(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.OnModifierMouseWheel(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse Wheel is scrolled on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse wheel operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.OnMasterMouseLeave(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the mouse leaves the Master of current <see cref="P:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase.MouseEventGroup" />
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.OnModifierTouchDown(Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a Multi-Touch Down interaction occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.OnModifierTouchMove(Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a Multi-Touch Move interaction occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.OnModifierTouchUp(Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a Multi-Touch Up interaction occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.HasModifier(System.Type)">
            <summary>
            Determines whether the current <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup"/> has a child modifier of the desired type
            </summary>
            <param name="desiredType">The type of child modifier to search for</param>
            <returns><c>true</c> if the current <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup"/> has a chlid modifier by this type; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.OnDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the DataContext of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> changes
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> from its XML representation.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> into its XML representation.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup.ResetInertia">
            <summary>
            Instantly stops any inertia that can be associated with this modifier.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs">
            <summary>
            Defines a cross-platform Mouse event args, used by <see cref="T:Ecng.Xaml.Charting.ChartModifiers.IChartModifier"/> derived types to process mouse events
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs.Delta">
            <summary>
            Gets or sets the mouse wheel delta
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs.MousePoint">
            <summary>
            Gets or sets the mouse point that this event occurred at
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs.MouseButtons">
            <summary>
            Gets or sets the MouseButtons that were pressed at the time of the event
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs.Modifier">
            <summary>
            Gets or sets the Modifier Key that was pressed at the time of the event
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs.#ctor(System.Windows.Point,Ecng.Xaml.Charting.ChartModifiers.MouseButtons,Ecng.Xaml.Charting.ChartModifiers.MouseModifier,System.Boolean,Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs"/> class.
            </summary>
            <param name="mousePoint">The mouse point that this event occurred at relative to the <see cref="!:UltrachartSurface.RootGrid"/>.</param>
            <param name="mouseButtons">The mouse buttons clicked.</param>
            <param name="modifier">The modifier key pressed.</param>
            <param name="isMaster">If True, then this mouse event occurred on a master <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/>. 
            Used to process which modifier was the source of an event when multiple modifiers are linked</param>
            <param name="master">The instance of the master <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> which sourced the event. Default value is null</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs.#ctor(System.Windows.Point,Ecng.Xaml.Charting.ChartModifiers.MouseButtons,Ecng.Xaml.Charting.ChartModifiers.MouseModifier,System.Int32,System.Boolean,Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs"/> class.
            </summary>
            <param name="mousePoint">The mouse point that this event occurred at relative to the <see cref="!:UltrachartSurface.RootGrid"/>.</param>
            <param name="mouseButtons">The mouse buttons clicked.</param>
            <param name="modifier">The modifier key pressed.</param>
            <param name="wheelDelta">The mouse wheel delta.</param>
            <param name="isMaster">If True, then this mouse event occurred on a master <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/>. 
            Used to process which modifier was the source of an event when multiple modifiers are linked</param>
            <param name="master">The instance of the master <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> which sourced the event. Default value is null</param>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.MouseModifier">
            <summary>
            Specifies the Modifier button pressed at the time of a mouse operation
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.MouseModifier.None">
            <summary>
            No modifiers were pressed
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.MouseModifier.Shift">
            <summary>
            The SHIFT button was pressed
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.MouseModifier.Ctrl">
            <summary>
            The CTRL button was pressed
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.MouseModifier.Alt">
            <summary>
            The ALT button was pressed
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.MouseButtons">
            <summary>
            Specifies the MouseButtons pressed at the time of a mouse operation
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.MouseButtons.None">
            <summary>
            No buttons were pressed
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.MouseButtons.Left">
            <summary>
            The LEFT button was pressed
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.MouseButtons.Middle">
            <summary>
            The MIDDLE button was pressed
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.MouseButtons.Right">
            <summary>
            The RIGHT button was pressed
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.MouseWheelZoomModifier">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.MouseWheelZoomModifier"/> provides zooming (or shrinking) of the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> on mouse wheel scroll
            Add to a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> and set IsEnabled to true to enable this behaviour
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.MouseWheelZoomModifier.ActionTypeProperty">
            <summary>
            Defines the ActionType DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.MouseWheelZoomModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.MouseWheelZoomModifier"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.MouseWheelZoomModifier.ActionType">
            <summary>
            Gets or sets the <see cref="P:Ecng.Xaml.Charting.ChartModifiers.MouseWheelZoomModifier.ActionType"/> to perform on mouse-wheel interaction
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.MouseWheelZoomModifier.OnModifierMouseWheel(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse Wheel is scrolled on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse wheel operation</param>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.NullModifier">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.NullModifier"/> can be attached to consume mouse events but perform no action
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier"/> provides a mouse-over hit-test to a chart, plus a collection of <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> objects to bind to which updates as the mouse moves.
            Add to a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> and set IsEnabled to true to enable this behaviour
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier.IncludeSeriesProperty">
            <summary>
            Defined IncludeSeries Attached Property
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier.GetIncludeSeries(System.Windows.DependencyObject)">
            <summary>
            Gets the include Series or not
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier.SetIncludeSeries(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the include Series or not
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier.DrawVerticalLineProperty">
            <summary>
            Defines the DrawVerticalLine DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier.DrawVerticalLine">
            <summary>
            Gets or sets whether a Vertical Line should be drawn at the rollover location
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier.GetRolloverMarkerFrom(Ecng.Xaml.Charting.SeriesInfo)">
            <summary>
            Get rollover marker from <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> to place on chart 
            </summary>
            <param name="seriesInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier.OnSelectedSeriesChanged(System.Collections.Generic.IEnumerable{Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries},System.Collections.Generic.IEnumerable{Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries})">
            <summary>
            Called when the parent surface SelectedSeries collection changes
            </summary>
            <param name="oldSeries"></param>
            <param name="newSeries"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier.ClearAll">
            <summary>
            When overriden in a derived class, this method should clear all markers and tooltips from the <see cref="!:UltrachartSurface.ModifierSurface" />
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier.HandleMasterMouseEvent(System.Windows.Point)">
            <summary>
            When overriden in a derived class, called to handle the Master <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase" /> MouseMove event
            </summary>
            <param name="mousePoint">The current Mouse-point</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier.TryUpdateOverlays(System.Windows.Point)">
            <summary>
            If the current modifier IsEnabled, and the Point is valid for the modifier, updates axis and chart overlays
            </summary>
            <param name="atPoint">The current mouse point</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier"/> provides a mouse drag to zoom into a rectangular region, or horizontal section of the chart.
            Add to a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> and set IsEnabled to true to enable this behaviour
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.IsAnimatedProperty">
            <summary>
            Defines the IsAnimated DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.RubberBandFillProperty">
            <summary>
            Defines the RubberBandFill dependency property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.RubberBandStrokeProperty">
            <summary>
            Defines the RubberBandStroke dependency property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.RubberBandStrokeDashArrayProperty">
            <summary>
            Defines the RubberBandStrokeDashArray dependency property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.IsXAxisOnlyProperty">
            <summary>
            Defines the IsXAxisOnly dependency property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.ZoomExtentsYProperty">
            <summary>
            Defines the ZoomExtentsY DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.MinDragSensitivityProperty">
            <summary>
            Defines the MinDragSensitivity DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier._shape">
            <summary>
            reticule
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.IsAnimated">
            <summary>
            Gets or sets whether zoom operations should be animated. Default true
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.RubberBandFill">
            <summary>
            Gets or sets the Fill brush of the recticule drawn on the screen as the user zooms
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.RubberBandStroke">
            <summary>
            Gets or sets the Stroke brush of the recticule drawn on the screen as the user zooms
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.RubberBandStrokeDashArray">
            <summary>
            Gets or sets the StrokeDashArray, used to set a dashed outline for the rubber band rectangle. 
            See the <see cref="P:System.Windows.Shapes.Shape.StrokeDashArray"/> property for usage
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.IsXAxisOnly">
            <summary>
            Gets or sets whether the RubberBand should zoom the X-Axis only. 
            If true, then the effect will be instead of a rectangle drawn under the mouse, an horizontal section of the 
            entire chart will be selected
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.ZoomExtentsY">
            <summary>
            If true, zooms to extents on the Y-Axis on each zoom operation. Use in conjuction with <see cref="P:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.IsXAxisOnly"/> to achieve different zooming effects
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.MinDragSensitivity">
            <summary>
            Gets or sets the drag sensitivity - rectangles dragged smaller than this size in the diagonal will be ignored when zooming. Default is 10 pixels
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.IsDragging">
            <summary>
            Gets whether the user is currently dragging the mouse
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.OnDetached">
            <summary>
            Called when the Chart Modifier is detached from the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.OnModifierMouseDown(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.OnModifierMouseMove(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.OnModifierMouseUp(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier.CurrentStrategy">
            <summary>
            Property for testing purposes
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.LegendPlacement">
            <summary>
            Enumeration constants to define label placement
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.LegendPlacement.TopLeft">
            <summary>
            Places at the upper left corner
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.LegendPlacement.TopRight">
            <summary>
            Places at the upper right corner
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.LegendPlacement.BottomLeft">
            <summary>
            Places at the bottom left corner
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.LegendPlacement.BottomRight">
            <summary>
            Places at the bottom right corner
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.LegendPlacement.Top">
            <summary>
            Places above the surface
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.LegendPlacement.Bottom">
            <summary>
            Places below the surface
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.LegendPlacement.Left">
            <summary>
            Places to the left of the surface
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.LegendPlacement.Right">
            <summary>
            Places to the right of the surface
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.LegendPlacement.Inside">
            <summary>
            Places inside the ParentSurface
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.LegendModifier">
            <summary>
            Defines a custom chart modifier to provide info for the <see cref="P:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.LegendTemplate"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.LegendDataProperty">
            <summary>
            Defines the LegendData DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.GetLegendDataForProperty">
            <summary>
            Defines the GetLegendDataFor DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.LegendPlacementProperty">
            <summary>
            Defines the LegendPlacement DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.LegendItemTemplateProperty">
            <summary>
            Defines the LegendTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.OrientationProperty">
            <summary>
            Defines the LegendOrientation DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.ShowSeriesMarkersProperty">
            <summary>
            Defines the ShowSeriesMarkers DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.ShowVisibilityCheckboxesProperty">
            <summary>
            Defines the ShowVisibilityCheckboxes DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.ShowLegendProperty">
            <summary>
            Defines the ShowLegend DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.LegendTemplateProperty">
            <summary>
            Defines the UltrachartLegend DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.LegendModifier"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.ShowVisibilityCheckboxes">
            <summary>
            Used in combination with <see cref="P:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.ShowLegend"/> = true. If true, shows the Visibility Checkboxes in the automatically generated legend. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.ShowSeriesMarkers">
            <summary>
            Used in combination with <see cref="P:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.ShowLegend"/> = true. If true, shows the Series Markers in the automatically generated legend
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.LegendPlacement">
            <summary>
            Used in combination with <see cref="P:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.ShowLegend"/> = true. Defines the placement of the auto-generated legend 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.LegendItemTemplate">
            <summary>
            Gets or sets the Legend Item Template, which provides UI that binds to a single <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> instance. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.LegendData">
            <summary>
            The LegendData object provides a collection of <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> which can be bound to in ItemsControls or UltrachartLegend control. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.Orientation">
            <summary>
            Gets or sets the Orientation of the Legend Items, e.g. Vertical, or Horizontal
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.ShowLegend">
            <summary>
            If true, then the LegendModifier automatically shows and hosts a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartLegend"/> inside the chart surface, according to <see cref="P:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.LegendPlacement"/>. If false, then the user may provide an alternative legend control
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.LegendTemplate">
            <summary>
            Used in combination with <see cref="P:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.ShowLegend"/> = true. An optional control template for the auto-generated <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartLegend"/> control
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.GetLegendDataFor">
            <summary>
            Gets or sets an enumeration constant defining which series to interrogate for the legend data source 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.OnAttached">
            <summary>
            Called when the element is attached to the Chart Surface
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.OnDetached">
            <summary>
            Called immediately before the element is detached from the Chart Surface
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.ClearAll">
            <summary>
            When overriden in a derived class, this method should clear all markers and tooltips from the <see cref="!:UltrachartSurface.ModifierSurface" />
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.HandleMasterMouseEvent(System.Windows.Point)">
            <summary>
            When overriden in a derived class, called to handle the Master <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase" /> MouseMove event
            </summary>
            <param name="mousePoint">The current Mouse-point</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.HandleSlaveMouseEvent(System.Windows.Point)">
            <summary>
            When overriden in a derived class, called to handle the Slave <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase" /> MouseMove event
            </summary>
            <param name="mousePoint">The current Mouse-point</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.OnModifierMouseMove(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.OnParentSurfaceRendered(Ecng.Xaml.Charting.UltrachartRenderedMessage)">
            <summary>
            Called when the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> is rendered
            </summary>
            <param name="e">The <see cref="T:Ecng.Xaml.Charting.UltrachartRenderedMessage"/> which contains the event arg data</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.UpdateLegend">
            <summary>
            Refreshes the legend with up-to-date <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> with series names, latest values
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.GetSeriesInfo(System.Collections.Generic.IEnumerable{Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries})">
            <summary>
            Gets the SeriesInfo for all the RenderableSeries passed in
            </summary>
            <param name="allSeries"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.LegendModifier.UpdateSeriesInfo(Ecng.Xaml.Charting.SeriesInfo,Ecng.Xaml.Charting.SeriesInfo)">
            <summary>
            Does a replace of the data on the OldSeriesInfo instance with data from NewSeriesInfo
            </summary>
            <param name="oldSeriesInfo"></param>
            <param name="newSeriesInfo"></param>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.SeriesSelectionModifier">
            <summary>
            Provides the ability to select series via a Chart Modifier
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.SeriesSelectionModifier.SelectedSeriesStyleProperty">
            <summary>
            Defines the SelectedSelectedSeriesStyle DependencyProperty
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.ChartModifiers.SeriesSelectionModifier.SelectionChanged">
            <summary>
            Event raised when the selection changes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesSelectionModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.SeriesSelectionModifier"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.SeriesSelectionModifier.SelectedSeriesStyle">
            <summary>
            Gets or sets a style for selected series.
            </summary>
            <value>The style of the selected series.</value>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesSelectionModifier.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesSelectionModifier.OnSelectedSeriesChanged(System.Collections.Generic.IEnumerable{Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries},System.Collections.Generic.IEnumerable{Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries})">
            <summary>
            Called when the parent surface SelectedSeries collection changes
            </summary>
            <param name="oldSeries"></param>
            <param name="newSeries"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesSelectionModifier.ClearAll">
            <summary>
            When overriden in a derived class, this method should clear all markers and tooltips from the <see cref="!:UltrachartSurface.ModifierSurface" />
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesSelectionModifier.OnParentSurfaceRendered(Ecng.Xaml.Charting.UltrachartRenderedMessage)">
            <summary>
            Called when the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" /> is rendered
            </summary>
            <param name="e">The <see cref="T:Ecng.Xaml.Charting.UltrachartRenderedMessage" /> which contains the event arg data</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesSelectionModifier.OnModifierMouseUp(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesSelectionModifier.HandleSlaveMouseEvent(System.Windows.Point)">
            <summary>
            When overriden in a derived class, called to handle the Slave <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase" /> MouseMove event
            </summary>
            <param name="mousePoint">The current Mouse-point</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.SeriesSelectionModifier.HandleMasterMouseEvent(System.Windows.Point)">
            <summary>
            When overriden in a derived class, called to handle the Master <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase" /> MouseMove event
            </summary>
            <param name="mousePoint">The current Mouse-point</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.XAxisDragModifier">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.XAxisDragModifier"/> provides a mouse drag to scale the X-Axis. 
            This behaviour scales the axis in a different direction depending on which half of the axis the user starts the operation in
            Add to a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> and set IsEnabled to true to enable this behaviour
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.XAxisDragModifier.ClipModeXProperty">
            <summary>
            Defines the ClipToExtentsX Dependency Property 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.XAxisDragModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.XAxisDragModifier"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.XAxisDragModifier.ClipModeX">
            <summary>
            Defines how panning behaves when you reach the edge of the X-Axis extents. 
            e.g. ClipMode.ClipAtExtents prevents panning outside of the X-Axis, ClipMode.None allows panning outside
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.XAxisDragModifier.GetCurrentAxis">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis" /> instance, which current modifier is associated with, on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.XAxisDragModifier.OnModifierMouseDown(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.XAxisDragModifier.OnModifierMouseUp(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.XAxisDragModifier.PerformPan(System.Windows.Point,System.Windows.Point)">
            <summary>
            Peforms a pan on the assocaited <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase" />. The pan is considered to be a drag from <paramref name="currentPoint" /> to <paramref name="lastPoint" />
            </summary>
            <param name="currentPoint">The current mouse point</param>
            <param name="lastPoint">The last mouse point</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.XAxisDragModifier.CalculateScaledRange(System.Windows.Point,System.Windows.Point,System.Boolean,Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            When overriden in a derived class, calculates an output <see cref="T:Ecng.Xaml.Charting.IRange" /> to apply to the associated <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase">Axis</see>,
            given the input parameters
            </summary>
            <param name="currentPoint">The current mouse position</param>
            <param name="lastPoint">The last mouse position</param>
            <param name="isSecondHalf">A flag, which determines how the scale operates, e.g. which half of the axis (top or bottom, left or right) was dragged</param>
            <param name="axis">The axis being operated on</param>
            <returns>
            The output <see cref="T:Ecng.Xaml.Charting.IRange" />
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.YAxisDragModifier">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.YAxisDragModifier"/> provides a mouse drag to scale the Y-Axis. 
            This behaviour scales the axis in a different direction depending on which half of the axis the user starts the operation in
            Add to a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> and set IsEnabled to true to enable this behaviour
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.YAxisDragModifier.GetCurrentAxis">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis" /> instance, which current modifier is associated with, on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.YAxisDragModifier.GetUsedCursor(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Depending on axis orientation and AxisAlignment, returns a Cursor to show during mouse-over of the axis
            </summary>
            <param name="axis">The axis instance</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.YAxisDragModifier.GetIsSecondHalf(System.Windows.Point,System.Windows.Rect,System.Boolean)">
            <summary>
            Gets whether the specified mouse point is within the second (right-most or top-most) half of the Axis bounds
            </summary>
            <param name="point">The mouse point</param>
            <param name="axisBounds">The axis bounds</param>
            <param name="isHorizontalAxis">Value, which indicates whether current axis is horizontal or not</param>
            <returns>
            True if the point is within the second (right-most or top-most) half of the axis bounds, else false
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.YAxisDragModifier.PerformPan(System.Windows.Point,System.Windows.Point)">
            <summary>
            Peforms a pan on the assocaited <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase" />. The pan is considered to be a drag from <paramref name="currentPoint" /> to <paramref name="lastPoint" />
            </summary>
            <param name="currentPoint">The current mouse point</param>
            <param name="lastPoint">The last mouse point</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.YAxisDragModifier.CalculateScaledRange(System.Windows.Point,System.Windows.Point,System.Boolean,Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            When overriden in a derived class, calculates an output <see cref="T:Ecng.Xaml.Charting.IRange" /> to apply to the associated <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase">Axis</see>,
            given the input parameters
            </summary>
            <param name="currentPoint">The current mouse position</param>
            <param name="lastPoint">The last mouse position</param>
            <param name="isSecondHalf">A flag, which determines how the scale operates, e.g. which half of the axis (top or bottom, left or right) was dragged</param>
            <param name="axis">The axis being operated on</param>
            <returns>
            The output <see cref="T:Ecng.Xaml.Charting.IRange" />
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.YAxisDragModifier.OnModifierMouseDown(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.YAxisDragModifier.OnModifierMouseMove(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.YAxisDragModifier.OnModifierMouseUp(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.ExecuteOn">
            <summary>
            Defines constants for when a <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> operation occurs
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ExecuteOn.MouseLeftButton">
            <summary>
            Execute on MouseRightButton
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ExecuteOn.MouseMiddleButton">
            <summary>
            Execute on MouseRightButton
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ExecuteOn.MouseRightButton">
            <summary>
            Execute on MouseRightButton
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ExecuteOn.MouseDoubleClick">
            <summary>
            Execute on MouseDoubleClick
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ExecuteOn.MouseMove">
            <summary>
            Execute on MouseMove
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ExecuteOn.MouseRightButtonUp">
            <summary>
            Execute on MouseRightButtonUp
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.ZoomExtentsModifier">
            <summary>
            Provides zoom to extents, or zoom to specific X and Y VisibleRange on mouse interaction
            </summary>
            <example>
            The following example will create a modifier which zooms to extents on Mouse Double Click
            
            <code>
            ZoomExtentsModifier z = new ZoomExtentsModifier();
            z.ExecuteOn = ExecuteOn.MouseDoubleClick;
            </code>
            </example>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ZoomExtentsModifier.IsAnimatedProperty">
            <summary>
            Defines the IsAnimated DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ChartModifiers.ZoomExtentsModifier.XyDirectionProperty">
            <summary>
            Defines the XyDirection dependency property
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ZoomExtentsModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ZoomExtentsModifier" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ZoomExtentsModifier.XyDirection">
            <summary>
            Defines the direction of the ZoomExtentsModifier
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ZoomExtentsModifier.IsAnimated">
            <summary>
            Gets or sets whether zoom operations should be animated. Default true
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ZoomExtentsModifier.OnModifierDoubleClick(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse DoubleClick occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ZoomExtentsModifier.OnModifierMouseUp(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ZoomExtentsModifier.PerformZoom">
            <summary>
            Performs the zoom function. Called when the user double clicks (right mouse up). May be overridden in derived classes to customize what the zoom actually does
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartModifiers.ZoomExtentsModifier.DoubleTapThreshold">
            <summary>
            Gets or sets maximum time between taps to be considered as double tap.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ZoomExtentsModifier.OnModifierTouchDown(Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a Multi-Touch Down interaction occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ZoomExtentsModifier.OnModifierTouchUp(Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a Multi-Touch Up interaction occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifier">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifier"/> provides a mouse drag to pan the X and Y axes.
            Add to a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> and set IsEnabled to true to enable this behaviour
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifier"/> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifier.OnModifierMouseDown(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifier.Pan(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Receives zoom command from the user.
            </summary>
            <param name="currentPoint">Current point of zoom gesture.</param>
            <param name="lastPoint">Previous point of zoom gesture.</param>
            <param name="startPoint">Start point of zoom gesture.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartModifiers.ZoomPanModifier.OnModifierMouseUp(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.Common.AxisLayoutHelper">
            <summary>
            Attached properties to assist with Axis layout. Used internally by Ultrachart in the Themes
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Common.AxisLayoutHelper.AxisAlignmentProperty">
            <summary>
            The axis alignment property
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.AxisLayoutHelper.GetAxisAlignment(System.Windows.DependencyObject)">
            <summary>
            Gets the axis alignment.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.AxisLayoutHelper.SetAxisAlignment(System.Windows.DependencyObject,Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment)">
            <summary>
            Sets the axis alignment.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Ecng.Xaml.Charting.Common.AxisLayoutHelper.IsInsideItemProperty">
            <summary>
            The is inside item property
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.AxisLayoutHelper.GetIsInsideItem(System.Windows.DependencyObject)">
            <summary>
            Gets the is inside item.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.AxisLayoutHelper.SetIsInsideItem(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the is inside item.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="F:Ecng.Xaml.Charting.Common.AxisLayoutHelper.IsOutsideItemProperty">
            <summary>
            The is outside item property
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.AxisLayoutHelper.GetIsOutsideItem(System.Windows.DependencyObject)">
            <summary>
            Gets the is outside item.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.AxisLayoutHelper.SetIsOutsideItem(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the is outside item.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Common.ClipToBoundsHelper">
            <summary>
            Attached property which helps to set ClipToBounds property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Common.ClipToBoundsHelper.ClipToBoundsProperty">
            <summary>
            Defines the ClipToBounds DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Common.ClipToBoundsHelper.ClipToEllipseBoundsProperty">
            <summary>
            Defines the ClipToEllipseBounds DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.ClipToBoundsHelper.GetClipToBounds(System.Windows.DependencyObject)">
            <summary>
            Gets the ClipToBounds DependencyProperty value
            </summary>
            <param name="depObj">The dependencyObject target</param>
            <returns>The ClipToBounds property value</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.ClipToBoundsHelper.SetClipToBounds(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the ClipToBounds DependencyProperty value. If true, the target object clips any child elements to the bounds when rendering.
            </summary>
            <param name="depObj">The dependencyObject target</param>
            <param name="clipToBounds">if set to <c>true</c> clip to bounds.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.ClipToBoundsHelper.GetClipToEllipseBounds(System.Windows.DependencyObject)">
            <summary>
            Gets the ClipToEllipseBounds DependencyProperty value
            </summary>
            <param name="depObj"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.ClipToBoundsHelper.SetClipToEllipseBounds(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the ClipToEllipseBounds DependencyProperty value. If true, the target object clips any child elements to the ellipse bounds when rendering.
            </summary>
            <param name="depObj"></param>
            <param name="value"></param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Common.CompatibleFocus">
            <summary>
            A helper class which provides properties to control element's focus. 
            Compatible with both Silverlight and WPF.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Common.CompatibleFocus.IsFocusableProperty">
            <summary>
            Defines the IsFocusable DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.CompatibleFocus.GetIsFocusable(System.Windows.DependencyObject)">
            <summary>
            Gets the IsFocusableProperty
            </summary>
            <param name="obj">The object.</param>
            <returns>IsFocusableProperty value</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.CompatibleFocus.SetIsFocusable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the IsFocusableProperty
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The IsFocusableProperty value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Databinding.CategoryIndexToDataValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Databinding.CategoryIndexToDataValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.Common.Databinding.StringToDoubleArrayTypeConverter">
            <summary>
            Used to convert strings in XAML e.g. '0 1 2' to float arrays, for instance, see the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries.StrokeDashArray"/> property
            which uses this converter type
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Databinding.StringToDoubleArrayTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Databinding.StringToDoubleArrayTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the intended conversion type of the converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>
            The converted value.
            </returns>
            <exception cref="T:System.FormatException">Unable to convert the string {0} into a DoubleRange. Please use the format '1.234,5.678'</exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.Common.Databinding.StringToDoubleRangeTypeConverter">
            <summary>
            TypeConverter to allow conversion of a string value to <see cref="T:Ecng.Xaml.Charting.DoubleRange"/>. Used to allow succinct Markup syntax e.g. 
            
            &lt;NumericAxis VisibleRange=&quot;10, 20&quot;/&gt;
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Databinding.StringToDoubleRangeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Databinding.StringToDoubleRangeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the intended conversion type of the converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>
            The converted value.
            </returns>
            <exception cref="T:System.FormatException">Unable to convert the string {0} into a DoubleRange. Please use the format '1.234,5.678'</exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.Common.Extensions.DashSplitter.LengthSplitter">
            <summary>
            This is the decompiled enumerator for SplitLengthIntoDashes, with an added Reset method.
            TODO: Needs cleanup.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.RangeExtensions.GrowBy(Ecng.Xaml.Charting.IRange,System.Double,System.Double,System.Boolean,System.Double)">
            <summary>
            Grows current <see cref="T:Ecng.Xaml.Charting.IRange"/> instance by <paramref name="minFraction"/>, <paramref name="maxFraction"/>
            </summary>
            <param name="range"></param>
            <param name="minFraction"></param>
            <param name="maxFraction"></param>
            <param>Indicates whether perform calculations in logarithmic space</param>
            <param name="isLogarithmic">Indicates whether perform calculations in logarithmic space</param>
            <param name="logBase">If <paramref name="isLogarithmic"/>, use this value as a base for logarithmic calculations</param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Common.Extensions.DependencyObjectExtensions">
            <summary>
            Defines extension methods for the <see cref="T:System.Windows.DependencyObject"/> type. Used internally to Ultrachart
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.DependencyObjectExtensions.FindVisualChild``1(System.Windows.DependencyObject)">
            <summary>
            Finds the visual child of type <typeparam name="T">T</typeparam>
            </summary>
            <param name="parent">The parent.</param>
            <returns>The child, or null if not found</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Common.Extensions.CanvasExtensions">
            <summary>
            Defines attached properties for Canvases
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.DecimalExtensions.RoundOff(System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds using arithmetic (5 rounds up) symmetrical (up is away from zero) rounding
            </summary>
            <param name="d">A Decimal number to be rounded.</param>
            <param name="decimals">The number of significant fractional digits (precision) in the return value.</param>
            <param name="mode">The midpoint rounding mode</param>
            <returns>The number nearest d with precision equal to decimals. If d is halfway between two numbers, then the nearest whole number away from zero is returned.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.DoubleExtensions.RoundOff(System.Double,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds using arithmetic (5 rounds up) symmetrical (up is away from zero) rounding
            </summary>
            <param name="d">A double number to be rounded.</param>
            <param name="decimals">The number of significant fractional digits (precision) in the return value.</param>
            <param name="mode">The midpoint rounding mode</param>
            <returns>The number nearest d with precision equal to decimals. If d is halfway between two numbers, then the nearest whole number away from zero is returned.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.EnumerableExtensions.ToUncheckedList``1(System.Collections.Generic.IList{``0})">
            <returns>warning: returned array may contain padding zeros in end</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.EnumerableExtensions.FindIndex``1(System.Collections.Generic.IList{``0},System.Boolean,System.IComparable,Ecng.Xaml.Charting.Common.Extensions.SearchMode)">
            <summary>
            Finds the index of the item in the List according to the desired <see cref="T:Ecng.Xaml.Charting.Common.Extensions.SearchMode"/>. 
            If <paramref name="isSorted"/> is true, uses fast binary search
            </summary>
            <typeparam name="T">The type of the list</typeparam>
            <param name="list">The list to search</param>
            <param name="isSorted">If true, will use fast binary search</param>
            <param name="value">The value to find the index for</param>
            <param name="searchMode">The <see cref="T:Ecng.Xaml.Charting.Common.Extensions.SearchMode"/> options</param>
            <returns>The found index, or -1 if not found</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.EnumerableExtensions.FindIndex(System.Collections.IList,System.Boolean,System.IComparable,Ecng.Xaml.Charting.Common.Extensions.SearchMode)">
            <summary>
            Finds the index of the item in the List according to the desired <see cref="T:Ecng.Xaml.Charting.Common.Extensions.SearchMode"/>. 
            If <paramref name="isSorted"/> is true, uses fast binary search
            </summary>
            <param name="list">The list to search</param>
            <param name="isSorted">If true, will use fast binary search</param>
            <param name="value">The value to find the index for</param>
            <param name="searchMode">The <see cref="T:Ecng.Xaml.Charting.Common.Extensions.SearchMode"/> options</param>
            <returns>The found index, or -1 if not found</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.EnumerableExtensions.EnumerateUntilNonGap(System.Collections.Generic.IEnumerator{System.Tuple{System.Windows.Point,System.Windows.Point}})">
            <param name="iterator">must be set to first NaN point in collection</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.EnumerableExtensions.EnumerateUntilGap(System.Collections.Generic.IEnumerator{System.Tuple{System.Windows.Point,System.Windows.Point}})">
            <param name="iterator">must be set to first non-NaN point in collection</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.EnumerableExtensions.SplitToSinglePointInfo(System.Collections.Generic.IEnumerable{Ecng.Xaml.Charting.SeriesInfo})">
            <summary>
            Splits single <see cref="T:Ecng.Xaml.Charting.BandSeriesInfo"/> onto two instances in order to siplify working with <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> collections
            </summary>
            <param name="infos"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.EnumerableExtensions.MaxOrNullable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the maximum value or null if sequence is empty.
            </summary>
            <param name="that">The sequence to retrieve the maximum value from.
            </param>
            <returns>The maximum value or null.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.EnumerableExtensions.MinOrNullable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the minimum value or null if sequence is empty.
            </summary>
            <param name="that">The sequence to retrieve the minimum value from.
            </param>
            <returns>The minimum value or null.</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Common.Extensions.SearchMode">
            <summary>
            Enumeration constants to define binary searching of lists
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Common.Extensions.SearchMode.Exact">
            <summary>
            Specifies exact search. If the index is not found, -1 is returned. 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Common.Extensions.SearchMode.Nearest">
            <summary>
            Specifies the nearest index. This will round up or down if the search is in-between x-values
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Common.Extensions.SearchMode.RoundDown">
            <summary>
            Rounds down to the nearest index.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Common.Extensions.SearchMode.RoundUp">
            <summary>
            Rounds up to the nearest index
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.HitTestableExtensions.IsPointWithinBounds(Ecng.Xaml.Charting.Visuals.IHitTestable,System.Windows.Point)">
            <summary>
            Returns true if the point is inside the bounds of the HitTestable, when translated relative to RootGrid
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.ElementExtensions.GetBoundsRelativeTo(System.Windows.FrameworkElement,System.Windows.UIElement)">
            <summary>
            Get the bounds of an element relative to another element.
            </summary>
            <param name="element">The element.</param>
            <param name="otherElement">
            The element relative to the other element.
            </param>
            <returns>
            The bounds of the element relative to another element, or null if
            the elements are not related.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="otherElement"/> is null.
            </exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.ElementExtensions.FindLogicalParent``1(System.Windows.FrameworkElement)">
            <summary>
            Finds the logical parent of the <see cref="T:System.Windows.FrameworkElement"/> 
            </summary>
            <typeparam name="T">The type of parent to find</typeparam>
            <param name="frameworkElement">The FrameworkElement.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.RenderableSeriesExtension.GetSeriesColorAtPoint(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            Returns the color of a particular data point in the passed <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> instance.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.PointExtensions.Floor(System.Windows.Point)">
            <summary>
            Returns a new Point where X and Y components are equivalent to Math.Floor of the input point
            </summary>
            <param name="point">The input point, e.g. x=1.242, y=6.336</param>
            <returns>The Floor'ed point, e.g. x=1, y=6</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.StringExtensions.Substring(System.String,System.String,System.String)">
            <summary>
            Returns the substring of the input string which is sandwiched between the Before and After strings
            </summary>
            <param name="input"></param>
            <param name="before"></param>
            <param name="after"></param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Common.Extensions.VisualTreeExtensions">
            <summary>
            Provides useful extensions for working with the visual tree.
            </summary>
            <remarks>
            Since many of these extension methods are declared on types like
            DependencyObject high up in the class hierarchy, we've placed them in
            the Primitives namespace which is less likely to be imported for normal
            scenarios.
            </remarks>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.VisualTreeExtensions.GetVisualAncestors(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree ancestors of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree ancestors of the element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.VisualTreeExtensions.GetVisualAncestorsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree ancestors of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree ancestors of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.VisualTreeExtensions.GetVisualAncestorsAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree ancestors of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree ancestors of an element and the element itself.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.VisualTreeExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.VisualTreeExtensions.GetVisualChildrenAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.VisualTreeExtensions.GetVisualChildrenAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.VisualTreeExtensions.GetVisualDescendants(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree descendants of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.VisualTreeExtensions.GetVisualDescendantsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree descendants of an element and the element
            itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree descendants of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.VisualTreeExtensions.GetVisualDescendantsAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree descendants of an element and the element
            itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree descendants of an element and the element itself.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.VisualTreeExtensions.GetVisualSiblings(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree siblings of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree siblings of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.VisualTreeExtensions.GetVisualSiblingsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree siblings of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree siblings of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.VisualTreeExtensions.InvokeOnLayoutUpdated(System.Windows.FrameworkElement,System.Action)">
            <summary>
            Perform an action when the element's LayoutUpdated event fires.
            </summary>
            <param name="element">The element.</param>
            <param name="action">The action to perform.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is null.
            </exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Extensions.VisualTreeExtensions.GetLogicalChildren(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical children of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Common.Helpers.ObjectPool`1">
            <summary>
            Represents a pool of objects with a size limit.
            </summary>
            <typeparam name="T">The type of object in the pool.</typeparam>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Helpers.ObjectPool`1.#ctor">
            <summary>
            Initializes a new instance of the ObjectPool class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Helpers.ObjectPool`1.#ctor(System.Int32,System.Func{`0,`0})">
            <summary>
            Initializes a new instance of the ObjectPool class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Common.Helpers.ObjectPool`1.Count">
            <summary>
            Gets the summary amount of created instances
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Common.Helpers.ObjectPool`1.AvailableCount">
            <summary>
            Gets the amount of pooled instances
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Common.Helpers.ObjectPool`1.IsEmpty">
            <summary>
            Gets the value indicating whether current ObjectPool instance is empty.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Helpers.ObjectPool`1.Get">
            <summary>
            Retrieves an item from the pool. 
            </summary>
            <returns>The item retrieved from the pool.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Helpers.ObjectPool`1.Get(System.Func{`0,`0})">
            <summary>
            Retrieves an item from the pool. 
            </summary>
            <returns>The item retrieved from the pool.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Helpers.ObjectPool`1.Get(System.Func{`0})">
            <summary>
            Retrieves an item from the pool. 
            </summary>
            <returns>The item retrieved from the pool.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Helpers.ObjectPool`1.Put(`0)">
            <summary>
            Places an item in the pool.
            </summary>
            <param name="item">The item to place to the pool.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Helpers.ObjectPool`1.Dispose">
            <summary>
            Disposes of items in the pool that implement IDisposable.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Helpers.InterfaceHelpers.CopyInterfaceProperties``1(``0,``0)">
            <summary>
            Copies the interface properties from one object to another
            </summary>
            <typeparam name="T">The interface type that both objects implement to copy the properties on</typeparam>
            <param name="from">The object that implements interface type T to copy from</param>
            <param name="to">The object that implements interface type T to copy to</param>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Helpers.InterfaceHelpers.CheckInterfaceProperties``1">
            <summary>
            Performs the following checks on generic type T, and objects From, To. If T is not an interface, 
            an exception is thrown. If either object From or To do not implement T, an exception is thrown
            </summary>
            <typeparam name="T">The generic type to check if it is an interface</typeparam>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="T:Ecng.Xaml.Charting.Common.MarkupExtensions.Static">
            <summary>
            A MarkupExtension which introduces x:Static like syntax to both WPF and Silverlight (Cross-platform). This is used internally
            for the themes, but is also useful e.g. when creating custom Control Templates for Ultrachart
            </summary>
            <remarks>
            Licensed under the CodeProject Open License
            http://www.codeproject.com/Articles/305932/Static-and-Type-markup-extensions-for-Silverlight
            </remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.MarkupExtensions.Static.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Common.MarkupExtensions.Static" /> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.MarkupExtensions.Static.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Common.MarkupExtensions.Static" /> class.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.MarkupExtensions.Static.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Common.MarkupExtensions.Static" /> class.
            </summary>
            <param name="memberType">Type of the member.</param>
            <param name="member">The member.</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.Common.MarkupExtensions.Static.MemberType">
            <summary>
            Gets or sets the type of the member.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Common.MarkupExtensions.Static.Member">
            <summary>
            Gets or sets the member.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Common.MarkupExtensions.Static.UnsetArgument">
            <summary>
            The unset argument
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Common.MarkupExtensions.Static.Arg1">
            <summary>
            Gets or sets the arg1.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Common.MarkupExtensions.Static.Arg2">
            <summary>
            Gets or sets the arg2.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Common.MarkupExtensions.Static.Arg3">
            <summary>
            Gets or sets the arg3.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.MarkupExtensions.Static.GetDefaultMemberType(System.Windows.DependencyObject)">
            <summary>
            Gets the default type of the member.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.MarkupExtensions.Static.SetDefaultMemberType(System.Windows.DependencyObject,System.Type)">
            <summary>
            Sets the default type of the member.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Ecng.Xaml.Charting.Common.MarkupExtensions.Static.DefaultMemberTypeProperty">
            <summary>
            The default member type property
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.MarkupExtensions.Static.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">A service provider helper that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
            <exception cref="T:System.InvalidOperationException">Member property must be set to a non-empty value on Static markup extension.</exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.MarkupExtensions.Static.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Common.MarkupExtensions.ThemeBinding">
            <summary>
            Used to provide dynamic bindings to <see cref="T:Ecng.Xaml.Charting.Themes.IThemeProvider"/> resources (Brushes, Colors) inside a Ultrachart Theme. For an example of use, 
            see the Default.xaml file in the source code
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.MarkupExtensions.ThemeBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Common.MarkupExtensions.ThemeBinding"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Common.MarkupExtensions.ThemeBinding.Path">
            <summary>
            Gets or sets the path to the property on a <see cref="T:Ecng.Xaml.Charting.Themes.IThemeProvider"/> instance
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Common.MarkupExtensions.ThemeBinding.Mode">
            <summary>
            Gets or sets the BindingMode.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.MarkupExtensions.ThemeBinding.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">A service provider helper that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
            <exception cref="T:System.Exception">Not a DependencyObject</exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.Common.MarkupExtensions.TypeExtension">
            <summary>
            A MarkupExtension which introduces x:Type like syntax to both WPF and Silverlight (Cross-platform). This is used internally
            for the themes, but is also useful e.g. when creating custom Control Templates for Ultrachart
            </summary>
            <remarks>
            Licensed under the CodeProject Open License
            http://www.codeproject.com/Articles/305932/Static-and-Type-markup-extensions-for-Silverlight
            </remarks>
            
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.MarkupExtensions.TypeExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Common.MarkupExtensions.TypeExtension" /> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.MarkupExtensions.TypeExtension.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Common.MarkupExtensions.TypeExtension" /> class.
            </summary>
            <param name="type">The type to wrap</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.Common.MarkupExtensions.TypeExtension.Type">
            <summary>
            Gets or sets the type information for this extension.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Common.MarkupExtensions.TypeExtension.TypeName">
            <summary>
            Gets or sets the type name represented by this markup extension.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Common.SmartDisposable`1">
            <summary>
            Wrap a Disposable type to ensure it gets disposed by the Finalizer, if not explictly disposed
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.SmartDisposable`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Common.StringlyTyped">
            <summary>
            An abstract base-class that wraps a string, to avoid Stringly Typed circumstances where methods return or pass too many strings
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Common.StringlyTyped.Value">
            <summary>
            Gets the string value
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Common.WeakReference`1">
            <summary>
            WeakReference{T} generic implementation. 
            </summary>
            <remarks>
                Wraps a WeakReference but does not inherit. You cannot inherit a WeakReference for Silverlight/WinRT
                See http://stackoverflow.com/questions/3231945/inherited-weakreference-throwing-reflectiontypeloadexception-in-silverlight
            </remarks>
            <typeparam name="T">The type of object to wrap</typeparam>
        </member>
        <member name="T:Ecng.Xaml.Charting.Common.Device">
            <summary>
            Used to show or hide UIElements based on framework (WPF, Silverlight)
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Common.Device.SnapsToDevicePixelsProperty">
            <summary>
            Defines the SnapsToDevicePixels DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Device.SetSnapsToDevicePixels(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the SnapsToDevicePixels attached property on the specified DependencyObject
            </summary>
            <param name="element">The DependencyObject</param>
            <param name="snapToDevicePixels">The value of the SnapsToDevicePixels attached property to set</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Common.Device.GetSnapsToDevicePixels(System.Windows.DependencyObject)">
            <summary>
            Gets the SnapsToDevicePixels attached property from the specified DependencyObject
            </summary>
            <param name="element">The DependencyObject</param>
            <return>The value of the SnapsToDevicePixels attached property</return>
        </member>
        <member name="T:Ecng.Xaml.Charting.AxisAlignmentToAxisOrientationConverter">
            <summary>
            Converts input <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment"/> to <see cref="T:System.Windows.FlowDirection"/>, is such a way that Left becomes RightToLeft and Right becomes LeftToRight
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisAlignmentToAxisOrientationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisAlignmentToAxisOrientationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.AxisAlignmentToFlowDirectionConverter">
            <summary>
            A converter to transform <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment"/> enumeration values into <see cref="T:System.Windows.FlowDirection"/> for use in the Axis Text drawing
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisAlignmentToFlowDirectionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisAlignmentToFlowDirectionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.AxisAlignmentToHorizontalAlignmentConverter">
            <summary>
            Converts input <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment"/> to <see cref="T:System.Windows.FlowDirection"/>, is such a way that Left becomes RightToLeft and Right becomes LeftToRight
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisAlignmentToHorizontalAlignmentConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisAlignmentToHorizontalAlignmentConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.AxisAlignmentToHorizontalAnchorPointConverter">
            <summary>
            A Converter used by the Axis to align text and markers depending on <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisAlignmentToHorizontalAnchorPointConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisAlignmentToHorizontalAnchorPointConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.AxisAlignmentToVerticalAlignmentConverter">
            <summary>
            Converts input <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment"/> to <see cref="T:System.Windows.FlowDirection"/>, is such a way that Left becomes RightToLeft and Right becomes LeftToRight
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisAlignmentToVerticalAlignmentConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisAlignmentToVerticalAlignmentConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.AxisAlignmentToVeticalAnchorPointConverter">
            <summary>
            A Converter used by the Axis to align text and markers depending on <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisAlignmentToVeticalAnchorPointConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisAlignmentToVeticalAnchorPointConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.AxisAlignmentToVisibilityConverter">
            <summary>
            A Converter used by the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation"/> to show or hide marker points depending on <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.AxisAlignmentToVisibilityConverter.IsLeftPointer">
            <summary>
            If the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation"/> is pointing left or not
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisAlignmentToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisAlignmentToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.BandSeriesInfoToYValueConverter">
            <summary>
            A converter used to output Y-values from <see cref="T:Ecng.Xaml.Charting.BandSeriesInfo"/>, used as part of the Hit-Test API and 
            in the data-templates for <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier"/> and <see cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.BandSeriesInfoToYValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.BandSeriesInfoToYValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.BooleanToDefaultAxisAlignmentConverter">
            <summary>
            Converts given boolean value which indicates if axis is X or Y axis to the default alignment value,
             <see cref="F:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment.Bottom"/> for XAxis and <see cref="F:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment.Right"/> for YAxis
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.BooleanToDefaultAxisAlignmentConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.BooleanToDefaultAxisAlignmentConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.BooleanToRotationTransformConverter">
            <summary>
            Used internally by Ultrachart: Provides 90 Degree <see cref="T:System.Windows.Media.RotateTransform"/> if value is true, else 0 Degree
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.BooleanToRotationTransformConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.BooleanToRotationTransformConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.DataTemplateToObjectConverter">
            <summary>
            A TypeConverter which loads a <see cref="T:System.Windows.DataTemplate"/> and returns a <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.DataTemplateToObjectConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.DataTemplateToObjectConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.DoubleToThicknessConverter">
            <summary>
            Converts a double value to a <see cref="T:System.Windows.Thickness"/> with equal value all round
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleToThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleToThicknessConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.HorisontalOrientationVisibilityConverter">
            <summary>
            Converts <see cref="T:System.Windows.Controls.Orientation"/> = Horisontal to <see cref="T:System.Windows.Visibility"/> = Visible
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.HorisontalOrientationVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.HorisontalOrientationVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.ShowVisibilityCheckboxesConverter">
            <summary>
            Workaround converter to allow for cross-platform Ancestor binding to UltrachartLegend in SL and WPF
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ShowVisibilityCheckboxesConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ShowVisibilityCheckboxesConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.ThicknessToDoubleConverter">
            <summary>
            Convert <see cref="T:System.Windows.Thickness"/> value to double by taking mean of its values
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ValueMultiplicatorConverter">
            <summary>
            A ValueConverter that multiplies double numeric values
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ValueMultiplicatorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ValueMultiplicatorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.VerticalOrientationVisibilityConverter">
            <summary>
            Converts <see cref="T:System.Windows.Controls.Orientation"/> = Vertical to <see cref="T:System.Windows.Visibility"/> = Visible
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.VerticalOrientationVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.VerticalOrientationVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.ToggleButtonExtensions">
            <summary>
            Attached property to mimic radio grouping on toggle buttons
            Taken from here: http://www.bradcunningham.net/2009/09/grouping-and-checkboxes-in-wpf.html
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ToggleButtonExtensions.GroupNameProperty">
            <summary>
            Defines the GroupName DependenccyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ToggleButtonExtensions.SetGroupName(System.Windows.Controls.Primitives.ToggleButton,System.String)">
            <summary>
            Sets the GroupName Attached Property
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ToggleButtonExtensions.GetGroupName(System.Windows.Controls.Primitives.ToggleButton)">
            <summary>
            Gets the GroupName Attached Property
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.AxisTitleTemplateSelector">
            <summary>
            Used Internally by Ultrachart. Selects the Axis Title Template depending on title object type 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.AxisTitleTemplateSelector.StringTitleTemplate">
            <summary>
            Gets or sets the standard String DataTemplate
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisTitleTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            When overidden in derived classes, contains the logic for choosing a proper DataTemplate
            </summary>
            <param name="item"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.AxisInfoTemplateSelector">
            <summary>
            Provides class for choosing proper DataTemplate according to a <see cref="T:System.Type"/> of <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.AxisInfo"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.AxisInfoTemplateSelector.YAxisDataTemplateProperty">
            <summary>
            Defines the YAxisDataTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.AxisInfoTemplateSelector.XAxisDataTemplateProperty">
            <summary>
            Defines the  XAxisDataTemplate DependencyProperty
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.AxisInfoTemplateSelector.YAxisDataTemplate">
            <summary>
            Gets or sets the DataTemplate for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis" />
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.AxisInfoTemplateSelector.XAxisDataTemplate">
            <summary>
            Gets or sets the DataTemplate for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis" />
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisInfoTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            When overidden in derived classes, contains the logic for choosing a proper DataTemplate
            </summary>
            <param name="item"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.IDataTemplateSelector">
            <summary>
            Defines base interface for DataTemplateSelector which is used for selecting DataTemplate
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.IDataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            Contains the logic for choosing a proper DataTemplate
            </summary>
            <param name="item"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="E:Ecng.Xaml.Charting.IDataTemplateSelector.DataTemplateChanged">
            <summary>
            Raised when one of DataTemplate properties changed
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.DataTemplateSelector">
            <summary>
            Provides the base functionality for template selectors, used by the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier"/> and <see cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier"/>
            to select an appropriate <see cref="T:System.Windows.DataTemplate"/> for the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/> type outputted by the modifiers (which is dependent on RenderableSeries type)
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.DataTemplateSelector.DefaultTemplateProperty">
            <summary>
            Defines the DefaultTemplate DependencyProperty
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.DataTemplateSelector.DefaultTemplate">
            <summary>
            Gets or sets the template which is used as default
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.DataTemplateSelector.UpdateControlTemplate">
            <summary>
            Forces an update of ControlTemplate due to known bug in Wpf 4
            </summary>
            <remarks>
            See http://social.msdn.microsoft.com/Forums/nl/wpf/thread/e6643abc-4457-44aa-a3ee-dd389c88bd86 for more info
            </remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            When overidden in derived classes, contains the logic for choosing a proper DataTemplate
            </summary>
            <param name="item"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="E:Ecng.Xaml.Charting.DataTemplateSelector.DataTemplateChanged">
            <summary>
            Raised when one of DataTemplate properties changed
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.DataTemplateSelector.OnContentChanged(System.Object,System.Object)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes.
            </summary>
            <param name="oldContent">The old value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
            <param name="newContent">The new value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.DataTemplateSelector.OnDataTemplateChanged">
            <summary>
            Raises the DataTemplateChanged event
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.FrameworkVisibility">
            <summary>
            Enumeration constants to define FrameworkVisibility
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.FrameworkVisibility.All">
            <summary>
            Show this element in all frameworks
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.FrameworkVisibility.Wpf">
            <summary>
            Show this element in WPF only
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.FrameworkVisibility.Silverlight">
            <summary>
            Show this element in Silverlight only
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.FrameworkVisibilityManager">
            <summary>
            Used to show or hide UIElements based on framework (WPF, Silverlight)
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.FrameworkVisibilityManager.VisibleInProperty">
            <summary>
            Defines the VisibleIn DependencyProperty, used to set which frameworks (WPF, Silverlight, All) an element is visible in
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.FrameworkVisibilityManager.SetVisibleIn(System.Windows.DependencyObject,Ecng.Xaml.Charting.FrameworkVisibility)">
            <summary>
            Sets the VisibleIn DependencyProperty, used to set which frameworks (WPF, Silverlight, All) an element is visible in
            </summary>
            <param name="element">The element.</param>
            <param name="visibleIn">The <see cref="T:Ecng.Xaml.Charting.FrameworkVisibility"/> enum</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.FrameworkVisibilityManager.GetVisibleIn(System.Windows.DependencyObject)">
            <summary>
            Gets the VisibleIn DependencyProperty, used to set which frameworks (WPF, Silverlight, All) an element is visible in
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.IComparableToObjectConverter">
            <summary>
            ValueConverter to assist in marshalling <see cref="T:System.IComparable"/> types to object. Necessary because the XAML binding engine does not cope well with <see cref="T:System.IComparable"/> values
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.IComparableToObjectConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.IComparableToObjectConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.InvertBooleanConverter">
            <summary>
            Value converter which inverts a boolean
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.InvertBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.InvertBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.StringToLabelValueConverter">
            <summary>
            TypeConverter to assist in transforming strings to <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotation"/> Labels
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.StringToLabelValueConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.StringToLabelValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the intended conversion type of the converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.SeriesInfoTemplateSelector">
            <summary>
                Provides class for choosing proper DataTemplate according to a <see cref="T:System.Type" /> of <see cref="T:Ecng.Xaml.Charting.SeriesInfo" />
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.SeriesInfoTemplateSelector.HeatmapSeriesTemplateProperty">
            <summary>
            Defines the HeatmapSeriesTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.SeriesInfoTemplateSelector.BandSeries1TemplateProperty">
            <summary>
            Defines the BandSeries1Template DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.SeriesInfoTemplateSelector.BandSeries2TemplateProperty">
            <summary>
            Defines the BandSeries2Template DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.SeriesInfoTemplateSelector.BoxPlotSeriesTemplateProperty">
            <summary>
            Defines the BoxPlotSeriesTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.SeriesInfoTemplateSelector.OhlcSeriesTemplateProperty">
            <summary>
            Defines the OhlcSeriesTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.SeriesInfoTemplateSelector.HlcSeriesTemplateProperty">
            <summary>
            Defines the HlcSeriesTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.SeriesInfoTemplateSelector.OneHundredPercentStackedSeriesTemplateProperty">
            <summary>
            Defines the OneHundredPercentStackedSeriesTemplate DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.SeriesInfoTemplateSelector.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:Ecng.Xaml.Charting.SeriesInfoTemplateSelector"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfoTemplateSelector.HeatmapSeriesTemplate">
            <summary>
            Gets or sets the DataTemplate for <see cref="T:Ecng.Xaml.Charting.HeatmapSeriesInfo" />
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfoTemplateSelector.BandSeries1Template">
            <summary>
            Gets or sets the DataTemplate for the first series of the <see cref="T:Ecng.Xaml.Charting.BandSeriesInfo" />
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfoTemplateSelector.BandSeries2Template">
            <summary>
            Gets or sets the DataTemplate for the second series of the <see cref="T:Ecng.Xaml.Charting.BandSeriesInfo" />
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfoTemplateSelector.BoxPlotSeriesTemplate">
            <summary>
            Gets or sets the DataTemplate for <see cref="T:Ecng.Xaml.Charting.OhlcSeriesInfo" />
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfoTemplateSelector.OhlcSeriesTemplate">
            <summary>
            Gets or sets the DataTemplate for <see cref="T:Ecng.Xaml.Charting.OhlcSeriesInfo" />
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfoTemplateSelector.HlcSeriesTemplate">
            <summary>
            Gets or sets the DataTemplate for <see cref="T:Ecng.Xaml.Charting.OhlcSeriesInfo" />
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfoTemplateSelector.OneHundredPercentStackedSeriesTemplate">
            <summary>
            Gets or sets the DataTemplate for <see cref="T:Ecng.Xaml.Charting.OneHundredPercentStackedSeriesInfo" />
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.SeriesInfoTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            When overidden in derived classes, contains the logic for choosing a proper DataTemplate
            </summary>
            <param name="item"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Licensing.UltrachartSurfaceLicenseProvider.Validate(System.Object)">
            <summary>
            Validates the component
            </summary>
            <param name="parameter">The component to validate</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Licensing.UltraStockChartLicenseProvider.Validate(System.Object)">
            <summary>
            Validates the component
            </summary>
            <param name="parameter">The component to validate</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.AxisProxy">
            <summary>
            Wraps an Axis, exposing certain properties for use in multi-threaded rendering routines 
            
            (e.g. DependencyProperties cannot be accessed on background threads)
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.PropertyChangedEventArgsWithValues">
            <summary>
             Provides data for the System.ComponentModel.INotifyPropertyChanged.PropertyChanged event.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.PropertyChangedEventArgsWithValues.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the PropertyChangedEventArgsWithValues class
            </summary>
            <param name="propertyName"> The name of the property that changed.</param>
            <param name="oldValue"> Old value of the property that changed. </param>
            <param name="newValue"> New value of the property that changed. </param>
        </member>
        <member name="P:Ecng.Xaml.Charting.PropertyChangedEventArgsWithValues.OldValue">
            <summary>
            Gets an old value of property that changed
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.PropertyChangedEventArgsWithValues.NewValue">
            <summary>
            Gets a new value of property that changed
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.SegmentDataSeries.TimeframeSegmentDataSeries">
            <summary>
            base class for segmented data series
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Model.DataSeries.SegmentDataSeries.TimeframeSegmentDataSeries.DataSeriesChanged">
            <summary>
            Event raised whenever points are added to, removed or one or more DataSeries properties changes
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.SegmentDataSeries.TimeframeSegmentDataSeries.SeriesName">
            <summary>
            Gets or sets the name of this series
            </summary>
            <value>The name of the series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.SegmentDataSeries.TimeframeSegmentDataSeries.XType">
            <summary>
            Gets the Type of X-data points in this DataSeries. Used to check compatibility with Axis types
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.SegmentDataSeries.TimeframeSegmentDataSeries.YType">
            <summary>
            Gets the Type of Y-data points in this DataSeries. Used to check compatibility with Axis types
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.SegmentDataSeries.TimeframeSegmentDataSeries.LatestYValue">
            <summary>
            Gets the latest Y-Value of the DataSeries
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.SegmentDataSeries.TimeframeSegmentDataSeries.InvalidateParentSurface(Ecng.Xaml.Charting.Model.DataSeries.RangeMode)">
            <summary>
            May be called to trigger a redraw on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />. This method is extremely useful
            when <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries" /> are in a ViewModel and bound via MVVM to <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries" />.
            Please see the <paramref name="rangeMode" /> parameter for invalidation options
            </summary>
            <param name="rangeMode">Provides <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.RangeMode" /> invalidation options for the parent surface</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.SegmentDataSeries.TimeframeSegmentDataSeries.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.SegmentDataSeries.TimeframeSegmentDataSeries.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>
            The disposable Update Suspender
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.SegmentDataSeries.TimeframeSegmentDataSeries.ResumeUpdates(Ecng.Xaml.Charting.Visuals.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by IUpdateSuspender
            </summary>
            <param name="suspender"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.ListDecimalDataDistributionCalculator" -->
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListDecimalDataDistributionCalculator.IsSortedAscending">
            <summary>
            Gets or sets if the data is sorted
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListDecimalDataDistributionCalculator.IsEvenlySpaced">
            <summary>
            Gets or sets if the data is evenly spaced, within a visual epsilon (typically 1.0/8000.0 of the default spacing)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.DecimalDataDistributionCalculator" -->
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.ListDoubleDataDistributionCalculator" -->
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListDoubleDataDistributionCalculator.IsSortedAscending">
            <summary>
            Gets or sets if the data is sorted
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListDoubleDataDistributionCalculator.IsEvenlySpaced">
            <summary>
            Gets or sets if the data is evenly spaced, within a visual epsilon (typically 1.0/8000.0 of the default spacing)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.DoubleDataDistributionCalculator" -->
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.ListSingleDataDistributionCalculator" -->
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListSingleDataDistributionCalculator.IsSortedAscending">
            <summary>
            Gets or sets if the data is sorted
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListSingleDataDistributionCalculator.IsEvenlySpaced">
            <summary>
            Gets or sets if the data is evenly spaced, within a visual epsilon (typically 1.0/8000.0 of the default spacing)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.SingleDataDistributionCalculator" -->
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.ListInt32DataDistributionCalculator" -->
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListInt32DataDistributionCalculator.IsSortedAscending">
            <summary>
            Gets or sets if the data is sorted
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListInt32DataDistributionCalculator.IsEvenlySpaced">
            <summary>
            Gets or sets if the data is evenly spaced, within a visual epsilon (typically 1.0/8000.0 of the default spacing)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.Int32DataDistributionCalculator" -->
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.ListUInt32DataDistributionCalculator" -->
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListUInt32DataDistributionCalculator.IsSortedAscending">
            <summary>
            Gets or sets if the data is sorted
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListUInt32DataDistributionCalculator.IsEvenlySpaced">
            <summary>
            Gets or sets if the data is evenly spaced, within a visual epsilon (typically 1.0/8000.0 of the default spacing)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.UInt32DataDistributionCalculator" -->
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.ListInt64DataDistributionCalculator" -->
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListInt64DataDistributionCalculator.IsSortedAscending">
            <summary>
            Gets or sets if the data is sorted
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListInt64DataDistributionCalculator.IsEvenlySpaced">
            <summary>
            Gets or sets if the data is evenly spaced, within a visual epsilon (typically 1.0/8000.0 of the default spacing)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.Int64DataDistributionCalculator" -->
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.ListUInt64DataDistributionCalculator" -->
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListUInt64DataDistributionCalculator.IsSortedAscending">
            <summary>
            Gets or sets if the data is sorted
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListUInt64DataDistributionCalculator.IsEvenlySpaced">
            <summary>
            Gets or sets if the data is evenly spaced, within a visual epsilon (typically 1.0/8000.0 of the default spacing)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.UInt64DataDistributionCalculator" -->
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.ListInt16DataDistributionCalculator" -->
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListInt16DataDistributionCalculator.IsSortedAscending">
            <summary>
            Gets or sets if the data is sorted
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListInt16DataDistributionCalculator.IsEvenlySpaced">
            <summary>
            Gets or sets if the data is evenly spaced, within a visual epsilon (typically 1.0/8000.0 of the default spacing)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.Int16DataDistributionCalculator" -->
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.ListUInt16DataDistributionCalculator" -->
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListUInt16DataDistributionCalculator.IsSortedAscending">
            <summary>
            Gets or sets if the data is sorted
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListUInt16DataDistributionCalculator.IsEvenlySpaced">
            <summary>
            Gets or sets if the data is evenly spaced, within a visual epsilon (typically 1.0/8000.0 of the default spacing)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.UInt16DataDistributionCalculator" -->
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.ListByteDataDistributionCalculator" -->
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListByteDataDistributionCalculator.IsSortedAscending">
            <summary>
            Gets or sets if the data is sorted
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListByteDataDistributionCalculator.IsEvenlySpaced">
            <summary>
            Gets or sets if the data is evenly spaced, within a visual epsilon (typically 1.0/8000.0 of the default spacing)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.ByteDataDistributionCalculator" -->
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.ListSByteDataDistributionCalculator" -->
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListSByteDataDistributionCalculator.IsSortedAscending">
            <summary>
            Gets or sets if the data is sorted
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListSByteDataDistributionCalculator.IsEvenlySpaced">
            <summary>
            Gets or sets if the data is evenly spaced, within a visual epsilon (typically 1.0/8000.0 of the default spacing)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.SByteDataDistributionCalculator" -->
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.ListDateTimeDataDistributionCalculator" -->
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListDateTimeDataDistributionCalculator.IsSortedAscending">
            <summary>
            Gets or sets if the data is sorted
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListDateTimeDataDistributionCalculator.IsEvenlySpaced">
            <summary>
            Gets or sets if the data is evenly spaced, within a visual epsilon (typically 1.0/8000.0 of the default spacing)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.DateTimeDataDistributionCalculator" -->
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.ListTimeSpanDataDistributionCalculator" -->
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListTimeSpanDataDistributionCalculator.IsSortedAscending">
            <summary>
            Gets or sets if the data is sorted
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ListTimeSpanDataDistributionCalculator.IsEvenlySpaced">
            <summary>
            Gets or sets if the data is evenly spaced, within a visual epsilon (typically 1.0/8000.0 of the default spacing)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ecng.Xaml.Charting.Model.DataSeries.TimeSpanDataDistributionCalculator" -->
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.BaseDataDistributionCalculator`1.DataIsSortedAscending">
            <summary>
            Gets whether this DataSeries contains Sorted data in the X-direction.
            Note: Sorted data will result in far faster indexing operations. If at all possible, try to keep your data sorted in the X-direction
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.BaseDataDistributionCalculator`1.DataIsEvenlySpaced">
            <summary>
            Gets whether the data is evenly paced
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BaseDataDistributionCalculator`1.UpdateDataDistributionFlagsWhenRemovedXValues">
            <summary>
            Updates the data distribution flags when x values removed.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BaseDataDistributionCalculator`1.OnAppendXValue(Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn{`0},`0,System.Boolean)">
            <summary>
            Called when X Values are appended. Should update the Data Distribution flags
            </summary>
            <param name="xValues">The x values.</param>
            <param name="newXValue">The new x value.</param>
            <param name="acceptsUnsortedData">if set to <c>true</c> the series accepts unsorted data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BaseDataDistributionCalculator`1.OnAppendXValues(Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn{`0},System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Called when X Values are appended. Should update the Data Distribution flags
            </summary>
            <param name="xValues">The x values.</param>
            <param name="countBeforeAppending"></param>
            <param name="newXValues"></param>
            <param name="acceptsUnsortedData">if set to <c>true</c> the series accepts unsorted data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BaseDataDistributionCalculator`1.OnInsertXValues(Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn{`0},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Called when X Values are inserted. Should update the Data Distribution flags
            </summary>
            <param name="xValues">The x values.</param>
            <param name="indexWhereInserted"></param>
            <param name="insertedCount"></param>
            <param name="newXValues"></param>
            <param name="acceptsUnsortedData">if set to <c>true</c> the series accepts unsorted data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BaseDataDistributionCalculator`1.OnInsertXValue(Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn{`0},System.Int32,`0,System.Boolean)">
            <summary>
            Called when X Values are inserted. Should update the Data Distribution flags
            </summary>
            <param name="xValues">The x values.</param>
            <param name="indexWhereInserted"></param>
            <param name="newXValue">The new x value.</param>
            <param name="acceptsUnsortedData">if set to <c>true</c> the series accepts unsorted data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BaseDataDistributionCalculator`1.Clear">
            <summary>
            Clears the DataDistributionCalculator flags
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.UserDefinedDistributionCalculator`1">
            <summary>
            Allows user provided flags for IsSortedAscending and IsEvenlySpaced, flags which are used to determine the correct algorithm for sorting, searching and data-compression in Ultrachart. 
            Overridding these flags allows for faster operation where the data distribution is known in advance
            </summary>
            <typeparam name="TX">The type of the x-data.</typeparam>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.UserDefinedDistributionCalculator`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.UserDefinedDistributionCalculator`1"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.UserDefinedDistributionCalculator`1.IsSortedAscending">
            <summary>
            Gets or sets if the data is sorted
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.UserDefinedDistributionCalculator`1.IsEvenlySpaced">
            <summary>
            Gets or sets if the data is evenly spaced, within a visual epsilon (typically 1.0/8000.0 of the default spacing)
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.UserDefinedDistributionCalculator`1.OnAppendXValue(Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn{`0},`0,System.Boolean)">
            <summary>
            Called when X Values are appended. Should update the Data Distribution flags
            </summary>
            <param name="xValues">The x values.</param>
            <param name="newXValue">The new x value.</param>
            <param name="acceptsUnsortedData">if set to <c>true</c> the series accepts unsorted data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.UserDefinedDistributionCalculator`1.OnAppendXValues(Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn{`0},System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Called when X Values are appended. Should update the Data Distribution flags
            </summary>
            <param name="xValues">The x values.</param>
            <param name="countBeforeAppending"></param>
            <param name="newXValues"></param>
            <param name="acceptsUnsortedData">if set to <c>true</c> the series accepts unsorted data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.UserDefinedDistributionCalculator`1.OnInsertXValue(Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn{`0},System.Int32,`0,System.Boolean)">
            <summary>
            Called when X Values are inserted. Should update the Data Distribution flags
            </summary>
            <param name="xValues">The x values.</param>
            <param name="indexWhereInserted"></param>
            <param name="newXValue">The new x value.</param>
            <param name="acceptsUnsortedData">if set to <c>true</c> the series accepts unsorted data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.UserDefinedDistributionCalculator`1.OnInsertXValues(Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn{`0},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Called when X Values are inserted. Should update the Data Distribution flags
            </summary>
            <param name="xValues">The x values.</param>
            <param name="indexWhereInserted"></param>
            <param name="insertedCount"></param>
            <param name="newXValues"></param>
            <param name="acceptsUnsortedData">if set to <c>true</c> the series accepts unsorted data.</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.Array2DPointSeries`2">
            <summary>
            Resamples 2D data in X dimension before passing it into renderer
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.Array2DPointSeries`2.Count">
            <summary>
            count of items in X dimension
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.Array2DPointSeries`2.GetYRange">
            <summary>
            height of heatmap (size in in Y dimension)
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.Array2DSegment`2">
            <summary>
            Represents part of 2D data for a specific X coordinate
            Provides list of vertical pixels selected from 2D data for a specific X index
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2">
            <summary>
            A generic DataSeries which provides data in Min, Lower Quartile, Median, Upper Quartile, Max format for consumption 
            by the <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2"/>. 
            </summary>
            <typeparam name="TX">The type of the X-data</typeparam>
            <typeparam name="TY">Tye type of the Y-data</typeparam>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <remarks>DataSeries are assigned to the RenderableSeries via the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.DataSeries"/> property. Any time a DataSeries is appended to, the
            parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> will be redrawn</remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2.HasValues">
            <summary>
            Gets a value indicating whether this instance has values.
            </summary>
            <value>
            <c>true</c> if this instance has values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2.DataSeriesType">
            <summary>
            Gets the <see cref="P:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2.DataSeriesType"/> for this DataSeries
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2.ClearColumns">
            <summary>
            When overridden in a derived class, clears all columns in the Data Series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2.RemoveAt(System.Int32)">
            <summary>
            Removes the X,Y values at the specified index
            </summary>
            <param name="index">The index to remove at</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of points starting from the specified index
            </summary>
            <param name="startIndex">Starting index of the range of elements to remove</param>
            <param name="count">The number of elements to remove</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2.Clone">
            <summary>
            Creates a deep copy of a DataSeries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2.ToPointSeries(Ecng.Xaml.Charting.Numerics.ResamplingMode,Ecng.Xaml.Charting.IndexRange,System.Int32,System.Boolean,System.Nullable{System.Boolean},Ecng.Xaml.Charting.IRange,Ecng.Xaml.Charting.Numerics.PointResamplers.IPointResamplerFactory)">
            <summary>
            Converts the default <see cref="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.YValues"/> to an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which is used to render XY series
            </summary>
            <param name="resamplingMode">The desired <see cref="T:Ecng.Xaml.Charting.Numerics.ResamplingMode"/></param>
            <param name="pointRange">The integer Indices range in the parent data-set</param>
            <param name="viewportWidth">The current width of the viewport</param>
            <param name="isCategoryAxis">If true, uses the indices to form the resampled X-values, else uses the X-Values themselves</param>
            <param name="dataIsDisplayedAs2D">If true, then data is presented as a scatter series without relationship between the points, e.g. not a line series </param>
            <param name="visibleXRange">The XAxis VisibleRange at the time of resampling</param>
            <param name="factory">The <see cref="T:Ecng.Xaml.Charting.Numerics.PointResamplers.IPointResamplerFactory"/> Instance</param>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which is used to render XY series
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2.ToHitTestInfo(System.Int32)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/> instance containing data about the data-point at the specified index
            </summary>
            <param name="index">The index to the DataSeries</param>
            <returns>The HitTestInfo</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2.Append(`0,`1[])">
            <summary>
            Appends an X, Y point to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of y differ</exception>
            <param name="x">The X Value</param>
            <param name="yValues">The Y Values (depends on series type)</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}[])">
            <summary>
            Appends a list of X, Y points to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of x and each y differ</exception>
            <param name="x">The list of X points</param>
            <param name="yValues">Lists of Y points (depends on series type)</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2.Append(`0,`1,`1,`1,`1,`1)">
            <summary>
            Appends an Box-plot point to the series, including X-value, Minimum, Lower Quartile, Median, Upper Quartile, Maximum value
            </summary>
            <param name="x">The X value</param>
            <param name="median">The median.</param>
            <param name="minimum">The minimum.</param>
            <param name="lowerQuartile">The lower quartile.</param>
            <param name="upperQuartile">The upper quartile.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Appends a collection of Box-plot points to the series, including X-values, Minimum, Lower Quartile, Median, Upper Quartile, Maximum values
            </summary>
            <param name="x">The X value</param>
            <param name="median">The median.</param>
            <param name="minimum">The minimum.</param>
            <param name="lowerQuartile">The lower quartile.</param>
            <param name="upperQuartile">The upper quartile.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2.GetYMaxAt(System.Int32,`1)">
            <summary>
            When overriden in a derived class, gets the Max(existingYMax, currentMax), where currentMax is the maximum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMax">The existing maximum</param>
            <returns>The new YMax, which is the Min(existingYMax, currentMax)</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2.GetYMinAt(System.Int32,`1)">
            <summary>
            When overriden in a derived class, gets the Min(existingYMin, currentMin), where currentMin is the minimum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMin">The existing minimum</param>
            <returns>The new YMin, which is the Min(existingYMin, currentMin)</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPointSeries">
            <summary>
            An internal concept - the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> provides a sequence of <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/> derived 
            types, which represent resampled data immediately before rendering. 
            
            The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPointSeries"/> specifically is used when resampling and rendering Box Plot points
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BoxPointSeries.#ctor(Ecng.Xaml.Charting.Model.DataSeries.IPointSeries,Ecng.Xaml.Charting.Model.DataSeries.IPointSeries,Ecng.Xaml.Charting.Model.DataSeries.IPointSeries,Ecng.Xaml.Charting.Model.DataSeries.IPointSeries,Ecng.Xaml.Charting.Model.DataSeries.IPointSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPointSeries" /> class.
            </summary>
            <param name="yPoints">The resampled y points.</param>
            <param name="minPoints">The resampled min points.</param>
            <param name="lowerPoints">The resampled lower quartile points.</param>
            <param name="upperPoints">The resampled upper quartile points.</param>
            <param name="maxPoints">The max points.</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.BoxPointSeries.Count">
            <summary>
            Gets the number of <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint" /> points that this series contains
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.BoxPointSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint" />.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BoxPointSeries.GetYRange">
            <summary>
            Gets the min, max range in the Y-Direction
            </summary>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.DoubleRange" /> defining the min, max in the Y-direction
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.BoxSeriesPoint">
            <summary>
            A BoxSeriesPoint is an internally used structure which contains transformed points to render Y-values on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>. 
            Used in conjuction with the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries"/> and <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.BoxSeriesPoint.Max">
            <summary>
            Gets the maximum of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.BoxSeriesPoint.Min">
            <summary>
            Gets the minimum of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.BoxSeriesPoint.Y">
            <summary>
            Gets the default Y-value of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.BoxSeriesPoint.LowerQuartile">
            <summary>
            Gets the Lower Quartile value of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.BoxSeriesPoint.UpperQuartile">
            <summary>
            Gets the Upper Quartile value of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BoxSeriesPoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxSeriesPoint" /> struct.
            </summary>
            <param name="y">The y value</param>
            <param name="min">The min.</param>
            <param name="lower">The lower quartile.</param>
            <param name="upper">The upper quartile.</param>
            <param name="max">The max.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.BoxSeriesPoint.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />.Greater than zero This instance follows <paramref name="obj" /> in the sort order.
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.IDataDistributionCalculator`1">
            <summary>
            Defines the interface to a DataDistributionCalculator
            </summary>
            <typeparam name="TX"></typeparam>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataDistributionCalculator`1.DataIsSortedAscending">
            <summary>
            Gets whether this DataSeries contains Sorted data in the X-direction. 
            Note: Sorted data will result in far faster indexing operations. If at all possible, try to keep your data sorted in the X-direction
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataDistributionCalculator`1.DataIsEvenlySpaced">
            <summary>
            Gets whether the data is evenly paced
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataDistributionCalculator`1.OnAppendXValue(Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn{`0},`0,System.Boolean)">
            <summary>
            Called when X Values are appended. Should update the Data Distribution flags
            </summary>
            <param name="xValues">The x values.</param>
            <param name="newXValue">The new x value.</param>
            <param name="acceptsUnsortedData">if set to <c>true</c> the series accepts unsorted data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataDistributionCalculator`1.OnAppendXValues(Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn{`0},System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Called when X Values are appended. Should update the Data Distribution flags
            </summary>
            <param name="xValues">The x values.</param>
            <param name="newXValue">The new x value.</param>
            <param name="acceptsUnsortedData">if set to <c>true</c> the series accepts unsorted data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataDistributionCalculator`1.OnInsertXValue(Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn{`0},System.Int32,`0,System.Boolean)">
            <summary>
            Called when X Values are inserted. Should update the Data Distribution flags
            </summary>
            <param name="xValues">The x values.</param>
            <param name="newXValue">The new x value.</param>
            <param name="acceptsUnsortedData">if set to <c>true</c> the series accepts unsorted data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataDistributionCalculator`1.OnInsertXValues(Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn{`0},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Called when X Values are inserted. Should update the Data Distribution flags
            </summary>
            <param name="xValues">The x values.</param>
            <param name="newXValue">The new x value.</param>
            <param name="acceptsUnsortedData">if set to <c>true</c> the series accepts unsorted data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataDistributionCalculator`1.UpdateDataDistributionFlagsWhenRemovedXValues">
            <summary>
            Updates the data distribution flags when x values removed.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataDistributionCalculator`1.Clear">
            <summary>
            Clears the DataDistributionCalculator flags
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.DoubleToColorMappingSettings">
            <summary>
            Contains settings to translate double value into color for heatmap
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DoubleToColorMappingSettings.CachedMap">
            <summary>
            contains pre-calculated color values
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.IHeatmap2DArrayDataSeries">
            <summary>
            Represents 2D color data for Array2DSegment 
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries">
            <summary>
            Defines the interface to a High-Low-Close DataSeries, which contains columns of X-Values and Y-Values, High-Values and Low-Values
            </summary>    
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries.HighValues">
            <summary>
            Gets the High Values of this DataSeries as a List of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries.LowValues">
            <summary>
            Gets the Low Values of this DataSeries as a List of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries`2">
            <summary>
            Defines the interface to a typed High-Low-Close DataSeries, which contains columns of X-Values and Y-Values, High-Values and Low-Values
            </summary>    
            <typeparam name="TX">The type of the X-data</typeparam>
            <typeparam name="TY">The type of the Y-data</typeparam>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries`2.HighValues">
            <summary>
            Gets the High Values of this DataSeries, if the data is OHLC
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries`2.LowValues">
            <summary>
            Gets the Low Values of this DataSeries, if the data is OHLC
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2">
            <summary>
            The HlcDataSeries provides a generic data-source in High-Low-Close format for Hlc charts as well as Error bar charts. See also <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries"/>
            which requires this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/> type as a Data-source. Any 2D renderable Series type such as <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries"/> will render the X-Close value 
            as X-Y.
            </summary>
            <typeparam name="TX"></typeparam>
            <typeparam name="TY"></typeparam>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries"/>
            <remarks>DataSeries are assigned to the RenderableSeries via the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.DataSeries"/> property. Any time a DataSeries is appended to, the
            parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> will be redrawn</remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.YRange">
            <summary>
            Gets the computed YRange, which is an <see cref="T:Ecng.Xaml.Charting.IRange"/> wrapping YMin and YMax properties
            </summary>
            <remarks>Note: The performance implications of calling this is the DataSeries will perform a full recalculation on each get. It is recommended to get and cache if this property is needed more than once</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.HasValues">
            <summary>
            Gets a value indicating whether this instance has values.
            </summary>
            <value>
            <c>true</c> if this instance has values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.DataSeriesType">
            <summary>
            Gets the <see cref="P:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.DataSeriesType"/> for this DataSeries
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.ToHitTestInfo(System.Int32)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/> struct containing data about the data-point at the specified index
            </summary>
            <param name="index">The index to the DataSeries</param>
            <returns>The HitTestInfo</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.ClearColumns">
            <summary>
            When overridden in a derived class, clears all columns in the Data Series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.RemoveAt(System.Int32)">
            <summary>
            Removes the X,Y values at the specified index
            </summary>
            <param name="index">The index to remove at</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of points starting from the specified index
            </summary>
            <param name="startIndex">Starting index of the range of elements to remove</param>
            <param name="count">The number of elements to remove</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.Clone">
            <summary>
            Creates a deep copy of a DataSeries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.ToPointSeries(Ecng.Xaml.Charting.Numerics.ResamplingMode,Ecng.Xaml.Charting.IndexRange,System.Int32,System.Boolean,System.Nullable{System.Boolean},Ecng.Xaml.Charting.IRange,Ecng.Xaml.Charting.Numerics.PointResamplers.IPointResamplerFactory)">
            <summary>
            Converts the default <see cref="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.YValues"/> to an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which is used to render XY series
            </summary>
            <param name="resamplingMode">The desired <see cref="T:Ecng.Xaml.Charting.Numerics.ResamplingMode"/></param>
            <param name="pointRange">The integer Indices range in the parent data-set</param>
            <param name="viewportWidth">The current width of the viewport</param>
            <param name="isCategoryAxis">If true, uses the indices to form the resampled X-values, else uses the X-Values themselves</param>
            <param name="dataIsDisplayedAs2D">If true, then data is presented as a scatter series without relationship between the points, e.g. not a line series </param>
            <param name="visibleXRange">The XAxis VisibleRange at the time of resampling</param>
            <param name="factory">The <see cref="T:Ecng.Xaml.Charting.Numerics.PointResamplers.IPointResamplerFactory"/> Instance</param>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which is used to render XY series
            </returns>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.Ecng#Xaml#Charting#Model#DataSeries#IHlcDataSeries#HighValues">
            <summary>
            Gets the High Values of this DataSeries as a List of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.HighValues">
            <summary>
            Gets the High Values of this DataSeries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.Ecng#Xaml#Charting#Model#DataSeries#IHlcDataSeries#LowValues">
            <summary>
            Gets the Low Values of this DataSeries as a List of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.LowValues">
            <summary>
            Gets the Low Values of this DataSeries
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.Append(`0,`1[])">
            <summary>
            Appends an X, Y point to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of y differ</exception>
            <param name="x">The X Value</param>
            <param name="yValues">The Y Values (depends on series type)</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}[])">
            <summary>
            Appends a list of X, Y points to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of x and each y differ</exception>
            <param name="x">The list of X points</param>
            <param name="yValues">Lists of Y points (depends on series type)</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.Append(`0,`1,`1,`1)">
            <summary>
            Appends an Open, High, Low, Close point to the series
            </summary>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
            <param name="high">The High value</param>
            <param name="low">The Low value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Appends a list of Open, High, Low, Close points to the series
            </summary>
            <param name="x">The list of X values</param>
            <param name="y">The list of Y values</param>
            <param name="high">The list of High values</param>
            <param name="low">The list of Low values</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.Update(`0,`1,`1,`1)">
            <summary>
            Updates an Open, High, Low, Close point specified by the X-Value passed in. 
            </summary>
            <param name="x">The X Value to key on when updating</param>
            <param name="y">The Y value</param>
            <param name="high">The High value</param>
            <param name="low">The Low value</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the x value is not in the DataSeries</exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.Insert(System.Int32,`0,`1,`1,`1)">
            <summary>
            Inserts an Open, High, Low, Close point at the specified index
            </summary>
            <param name="index">The index to insert at</param>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
            <param name="high">The High value</param>
            <param name="low">The low value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Inserts a list of Open, High, Low, Close points at the specified index
            </summary>
            <param name="startIndex">The index to insert at</param>
            <param name="x">The list of X values</param>
            <param name="y">The list of y values</param>
            <param name="high">The list of High values</param>
            <param name="low">The list of Low values</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.GetYMaxAt(System.Int32,`1)">
            <summary>
            When overriden in a derived class, gets the Max(existingYMax, currentMax), where currentMax is the maximum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMax">The existing maximum</param>
            <returns>The new YMax, which is the Min(existingYMax, currentMax)</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2.GetYMinAt(System.Int32,`1)">
            <summary>
            When overriden in a derived class, gets the Min(existingYMin, currentMin), where currentMin is the minimum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMin">The existing minimum</param>
            <returns>The new YMin, which is the Min(existingYMin, currentMin)</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.HlcPointSeries">
            <summary>
            An internal concept - the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> provides a sequence of <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/> derived 
            types, which represent resampled data immediately before rendering. 
            
            The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcPointSeries"/> specifically is used when resampling and rendering points for Error Bars and HLC charts
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcPointSeries.#ctor(Ecng.Xaml.Charting.Model.DataSeries.IPointSeries,Ecng.Xaml.Charting.Model.DataSeries.IPointSeries,Ecng.Xaml.Charting.Model.DataSeries.IPointSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcPointSeries" /> class.
            </summary>
            <param name="yPoints">The y points.</param>
            <param name="yErrorHighPoints">The y error high points.</param>
            <param name="yErrorLowPoints">The y error low points.</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.HlcPointSeries.Count">
            <summary>
            Gets the number of <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint" /> points that this series contains
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.HlcPointSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint" />.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcPointSeries.GetYRange">
            <summary>
            Gets the min, max range in the Y-Direction
            </summary>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.DoubleRange" /> defining the min, max in the Y-direction
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.HlcSeriesPoint">
            <summary>
            An HlcSeriesPoint is an internally used structure which contains transformed points to render Y-values on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>. 
            Used in conjuction with the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries"/> and <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.HlcSeriesPoint.Max">
            <summary>
            Gets the maximum of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.HlcSeriesPoint.Min">
            <summary>
            Gets the minimum of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.HlcSeriesPoint.Y">
            <summary>
            Gets the default Y-value of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.HlcSeriesPoint.YErrorHigh">
            <summary>
            Gets the Y-High value of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.HlcSeriesPoint.YErrorLow">
            <summary>
            Gets the Y-Low value of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcSeriesPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcSeriesPoint" /> struct.
            </summary>
            <param name="y">The y.</param>
            <param name="yErrorHigh">The y error high.</param>
            <param name="yErrorLow">The y error low.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.HlcSeriesPoint.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />.Greater than zero This instance follows <paramref name="obj" /> in the sort order.
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries">
            <summary>
            Provides the interface to a <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> to hold X,Y,Z values. Used as a data-source for the <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries"/>, 
            if this DataSeries is assigned to any other X-Y type, then the X-Y values will be rendered (Z ignored). 
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries"/>
            <remarks>DataSeries are assigned to the RenderableSeries via the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.DataSeries"/> property. Any time a DataSeries is appended to, the
            parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> will be redrawn</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries.ZValues">
            <summary>
            Gets the Z Values as a list of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3">
            <summary>
            Provides a generic interface to a <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> to hold X,Y,Z values. Used as a data-source for the <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries"/>, 
            if this DataSeries is assigned to any other X-Y type, then the X-Y values will be rendered (Z ignored). 
            </summary>
            <typeparam name="TX">The type of the X-data</typeparam>
            <typeparam name="TY">The type of the Y-data</typeparam>
            <typeparam name="TZ">The type of the Z-data</typeparam>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries"/>
            <remarks>DataSeries are assigned to the RenderableSeries via the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.DataSeries"/> property. Any time a DataSeries is appended to, the
            parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> will be redrawn</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3.ZValues">
            <summary>
            Gets the Z values
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3.Append(`0,`1,`2)">
            <summary>
            Appends a single X, Y, Z point to the series, automatically triggering a redraw
            </summary>
            <param name="x">The X-value</param>
            <param name="y">The Y-value</param>
            <param name="z">The Z-value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Appends a collection of X, Y and Z points to the series, automatically triggering a redraw
            </summary>
            <param name="x">The X-values</param>
            <param name="y">The Y-values</param>
            <param name="z">The Z-values</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3.Update(`0,`1,`2)">
            <summary>
            Updates (overwrites) the Y, Z values at the specified X-value. Automatically triggers a redraw
            </summary>
            <param name="x">The X-value</param>
            <param name="y">The Y-value</param>
            <param name="z">The Z-value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3.Insert(System.Int32,`0,`1,`2)">
            <summary>
            Inserts an X, Y, Z point at the specified index. Automatically triggers a redraw
            </summary>
            <param name="index">The index to insert at</param>
            <param name="x">The X-value</param>
            <param name="y">The y-value</param>
            <param name="z">The z-value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Inserts a collection of X, Y and Z points at the specified index, automatically triggering a redraw
            </summary>
            <param name="startIndex">The index to insert at</param>
            <param name="x">The X-values</param>
            <param name="y">The Y-values</param>
            <param name="z">The Z-values</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.Point2DSeries">
            <summary>
            Defines a strongly typed PointSeries of Point2D items, a subset of X,Y data used to render points to the screen
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.Point2DSeries.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="!:PointSeries"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.Point2DSeries.GetYRange">
            <summary>
            Gets the min, max range in the Y-Direction
            </summary>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.DoubleRange"/> defining the min, max in the Y-direction
            </returns>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.Point2DSeries.Count">
            <summary>
            Gets the count of the PointSeries
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.Point2DSeries.Freeze">
            <summary>
            Freezes this instance, enables caching of inner arrays
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.UncheckedList`1">
            <summary>
            A list wrapper that gives access to the underlying array. 
            TODO: Not fully implemented
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.UnsortedXyDataSeries`2">
            <summary>
            A DataSeries to store Xy data-points, unsorted containing X and Y values. 
            If your data is sorted in the X-direction, for extra performance use the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2"/>
            May be used as a DataSource for <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries"/> as well as standard XY renderable series types
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.UnsortedXyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <remarks>DataSeries are assigned to the RenderableSeries via the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.DataSeries"/> property. Any time a DataSeries is appended to, the
            parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> will be redrawn</remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3">
            <summary>
            Provides a generic <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> to hold X,Y,Z values. Used as a data-source for the <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries"/>, 
            if this DataSeries is assigned to any other X-Y type, then the X-Y values will be rendered (Z ignored). 
            </summary>
            <typeparam name="TX">The type of the X-data</typeparam>
            <typeparam name="TY">The type of the Y-data</typeparam>
            <typeparam name="TZ">The type of the Z-data</typeparam>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries"/>
            <remarks>DataSeries are assigned to the RenderableSeries via the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.DataSeries"/> property. Any time a DataSeries is appended to, the
            parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> will be redrawn</remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.DataSeriesType">
            <summary>
            Gets the <see cref="P:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.DataSeriesType"/> for this DataSeries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.Ecng#Xaml#Charting#Model#DataSeries#IXyzDataSeries#ZValues">
            <summary>
            Gets the Z Values as a list of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.ZValues">
            <summary>
            Gets the Z values
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.HasValues">
            <summary>
            Gets whether the Data Series has values (is not empty)
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.RemoveAt(System.Int32)">
            <summary>
            Removes the X,Y values at the specified index
            </summary>
            <param name="index">The index to remove at</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of points starting from the specified index
            </summary>
            <param name="startIndex">Starting index of the range of elements to remove</param>
            <param name="count">The number of elements to remove</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.Clone">
            <summary>
            Creates a deep copy of a DataSeries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.GetYMinAt(System.Int32,`1)">
            <summary>
            When overriden in a derived class, gets the Min(existingYMin, currentMin), where currentMin is the minimum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMin">The existing minimum</param>
            <returns>The new YMin, which is the Min(existingYMin, currentMin)</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.GetYMaxAt(System.Int32,`1)">
            <summary>
            When overriden in a derived class, gets the Max(existingYMax, currentMax), where currentMax is the maximum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMax">The existing maximum</param>
            <returns>The new YMax, which is the Min(existingYMax, currentMax)</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.ToPointSeries(Ecng.Xaml.Charting.Numerics.ResamplingMode,Ecng.Xaml.Charting.IndexRange,System.Int32,System.Boolean,System.Nullable{System.Boolean},Ecng.Xaml.Charting.IRange,Ecng.Xaml.Charting.Numerics.PointResamplers.IPointResamplerFactory)">
            <summary>
            Converts the default <see cref="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.YValues"/> to an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which is used to render XY series
            </summary>
            <param name="resamplingMode">The desired <see cref="T:Ecng.Xaml.Charting.Numerics.ResamplingMode"/></param>
            <param name="pointRange">The integer Indices range in the parent data-set</param>
            <param name="viewportWidth">The current width of the viewport</param>
            <param name="isCategoryAxis">If true, uses the indices to form the resampled X-values, else uses the X-Values themselves</param>
            <param name="dataIsDisplayedAs2D">If true, then data is presented as a scatter series without relationship between the points, e.g. not a line series </param>
            <param name="visibleXRange">The XAxis VisibleRange at the time of resampling</param>
            <param name="factory">The <see cref="T:Ecng.Xaml.Charting.Numerics.PointResamplers.IPointResamplerFactory"/> Instance</param>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which is used to render XY series
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.ToHitTestInfo(System.Int32)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/> struct containing data about the data-point at the specified index
            </summary>
            <param name="index">The index to the DataSeries</param>
            <returns>The HitTestInfo</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.ClearColumns">
            <summary>
            When overridden in a derived class, clears all columns in the Data Series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.Append(`0,`1[])">
            <summary>
            Appends an X, Y point to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of y differ</exception>
            <param name="x">The X Value</param>
            <param name="yValues">The Y Values (depends on series type)</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}[])">
            <summary>
            Appends a list of X, Y points to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of x and each y differ</exception>
            <param name="x">The list of X points</param>
            <param name="yValues">Lists of Y points (depends on series type)</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.Append(`0,`1,`2)">
            <summary>
            Appends a single X, Y0, Y1 point to the series, automatically triggering a redraw
            </summary>
            <param name="x">The X-value</param>
            <param name="y">The Y-value</param>
            <param name="z">The Z-value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Appends a collection of X, Y0 and Y1 points to the series, automatically triggering a redraw
            </summary>
            <param name="x">The X-values</param>
            <param name="y">The Y-values</param>
            <param name="z">The Z-values</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.Update(`0,`1,`2)">
            <summary>
            Updates (overwrites) the Y0, Y1 values at the specified X-value. Automatically triggers a redraw
            </summary>
            <param name="x">The X-value</param>
            <param name="y">The Y-value</param>
            <param name="z">The Z-value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.Insert(System.Int32,`0,`1,`2)">
            <summary>
            Inserts an X, Y0, Y1 point at the specified index. Automatically triggers a redraw
            </summary>
            <param name="index">The index to insert at</param>
            <param name="x">The X-value</param>
            <param name="y">The Y-value</param>
            <param name="z">The Z-value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Inserts a collection of X, Y0 and Y1 points at the specified index, automatically triggering a redraw
            </summary>
            <param name="startIndex">The index to insert at</param>
            <param name="x">The X-values</param>
            <param name="y">The Y-values</param>
            <param name="z">The Z-values</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.GenericPointSeriesBase`1">
            <summary>
            A generic abstract base class to store <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint"/> instances, used as the resampling output of higher-order DataSeries, e.g. <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyPointSeries"/>,  <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzPointSeries"/>
            </summary>
            <typeparam name="TY">The type of the Y-data</typeparam>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.GenericPointSeriesBase`1.YPoints">
            <summary>
            Gets the y points.
            </summary>
            <value>
            The y points.
            </value>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.GenericPointSeriesBase`1.XValues">
            <summary>
            Gets the Raw X-Values for the PointSeries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.GenericPointSeriesBase`1.YValues">
            <summary>
            Gets the Raw Y-Values for the PointSeries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.GenericPointSeriesBase`1.Count">
            <summary>
            Gets the number of <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint"/> points that this series contains
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.GenericPointSeriesBase`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint" />.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.GenericPointSeriesBase`1.GetYRange">
            <summary>
            Gets the min, max range in the Y-Direction
            </summary>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.DoubleRange" /> defining the min, max in the Y-direction
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.Heatmap2DArrayDataSeries`3">
            <summary>
            Represents static 2D array as IDataSeries to be displayed by FastHeatmapRenderableSeries
            Converts data into color
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.Heatmap2DArrayDataSeries`3.#ctor(`2[0:,0:],System.Func{System.Int32,`0},System.Func{System.Int32,`1})">
            <summary>
            Creates an instance of Heatmap2dArrayDataSeries from 2D array
            </summary>
            <param name="array2D">2D array with data. First dimension is considered as Y, second one is X</param>
            <param name="xMapping">Delegate which returns X value for X index in 2D array</param>
            <param name="yMapping">Delegate which returns Y value for Y index in 2D array</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.Heatmap2DArrayDataSeries`3.XType">
            <summary>
            Gets the Type of X-data points in this DataSeries. Used to check compatibility with Axis types
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.Heatmap2DArrayDataSeries`3.YType">
            <summary>
            Gets the Type of Y-data points in this DataSeries. Used to check compatibility with Axis types
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.Heatmap2DArrayDataSeries`3.LatestYValue">
            <summary>
            Gets the latest Y-Value of the DataSeries
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.Heatmap2DArrayDataSeries`3.GetIndex``1(System.Func{System.Int32,``0},System.Double,System.Int32)">
            <summary>
            Reverse mapping
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.I2DArraySegment">
            <summary>
            Represents part of 2D data for a specific X coordinate
            Provides list of vertical pixels selected from 2D data for a specific X index
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.I2DArraySegment.XValueAtLeft">
            <summary>
            X value at left of cell
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.I2DArraySegment.XValueAtRight">
            <summary>
            X value at right of cell
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.I2DArraySegment.YValueAtBottom">
            <summary>
            Y value at bottom of heatmap
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.I2DArraySegment.YValueAtTop">
            <summary>
            Y value at top of heatmap
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.I2DArraySegment.GetVerticalPixelsArgb(Ecng.Xaml.Charting.Model.DataSeries.DoubleToColorMappingSettings)">
            <returns>list of colors in ARGB format</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.I2DArraySegment.GetVerticalPixelValues">
            <returns>list of 2d data values</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.PointSeriesEnumerator">
            <summary>
            A custom <see cref="T:System.Collections.Generic.IEnumerator`1"/> implementation to provide enumeration for <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> input
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.PointSeriesEnumerator.IsReset">
            <devdoc>
            Added so that EnumerableExtensions.SplitByColor doesn't need to check for Current == null, which can cause an unnecessary boxing of Current.
            </devdoc>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.PointSeriesEnumerator.Current">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint"/> in the collection at the current position of the enumerator.
            </summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.PointSeriesEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.PointSeriesEnumerator.#ctor(Ecng.Xaml.Charting.Model.DataSeries.IPointSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.PointSeriesEnumerator" /> class.
            </summary>
            <param name="pointSeries">The point series.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.PointSeriesEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.PointSeriesEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.PointSeriesEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.RangeMode">
            <summary>
            Defines enumeration constants for a programmatic redraw of the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.RangeMode.None">
            <summary>
            Perform no ranging, just redraw
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.RangeMode.ZoomToFit">
            <summary>
            Perform full X and Y ranging on redraw
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.RangeMode.ZoomToFitY">
            <summary>
            Perform just Y ranging on redraw
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.XyzPointSeries">
            <summary>
            An internal concept - the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> provides a sequence of <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/> derived 
            types, which represent resampled data immediately before rendering. 
            
            The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzPointSeries"/> specifically is used when resampling and rendering points for an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3"/>
            any other series-type which requires one X-value, Y-value and Z-value
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzPointSeries.#ctor(Ecng.Xaml.Charting.Model.DataSeries.IPointSeries,Ecng.Xaml.Charting.Model.DataSeries.IPointSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzPointSeries" /> class.
            </summary>
            <param name="yPoints">The y points.</param>
            <param name="zPoints">The z points.</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyzPointSeries.Count">
            <summary>
            Gets the number of <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint" /> points that this series contains
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyzPointSeries.YPoints">
            <summary>
            Gets the Y points.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyzPointSeries.ZPoints">
            <summary>
            Gets the y1 points.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyzPointSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint" />.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzPointSeries.GetYRange">
            <summary>
            Gets the min, max range in the Y-Direction
            </summary>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.DoubleRange" /> defining the min, max in the Y-direction
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.XyzSeriesPoint">
            <summary>
            A structure to contain Xyz series point values for the Y-Axis and Z-axis
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzSeriesPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyySeriesPoint" /> struct.
            </summary>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyzSeriesPoint.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyzSeriesPoint.Y">
            <summary>
            Gets the default Y-value of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. In the case of an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyySeriesPoint"/> this would be the Y0 value. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyzSeriesPoint.Z">
            <summary>
            Gets the Z value of the Xyy point
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyzSeriesPoint.Max">
            <summary>
            Gets the maximum of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. In the case of an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint"/> this would be the High value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyzSeriesPoint.Min">
            <summary>
            Gets the minimum of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. In the case of an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint"/> this would be the Low value
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries">
            <summary>
            Defines the interface to an Xyy DataSeries, a series containing X, Y0 and Y1 data-points
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries.Y1Values">
            <summary>
            Gets the Y1 Values as a list of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2">
            <summary>
            Defines the templated interface to an Xyy DataSeries, a series containing X, Y0 and Y1 data-points
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2.Y1Values">
            <summary>
            Gets the Y1 values
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2.Append(`0,`1,`1)">
            <summary>
            Appends a single X, Y0, Y1 point to the series, automatically triggering a redraw
            </summary>
            <param name="x">The X-value</param>
            <param name="y0">The Y0-value</param>
            <param name="y1">The Y1-value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Appends a collection of X, Y0 and Y1 points to the series, automatically triggering a redraw
            </summary>
            <param name="x">The X-values</param>
            <param name="y0">The Y0-values</param>
            <param name="y1">The Y1-values</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2.Update(`0,`1,`1)">
            <summary>
            Updates (overwrites) the Y0, Y1 values at the specified X-value. Automatically triggers a redraw
            </summary>
            <param name="x">The X-value</param>
            <param name="y0">The Y0-value</param>
            <param name="y1">The Y1-value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2.Insert(System.Int32,`0,`1,`1)">
            <summary>
            Inserts an X, Y0, Y1 point at the specified index. Automatically triggers a redraw
            </summary>
            <param name="index">The index to insert at</param>
            <param name="x">The X-value</param>
            <param name="y0">The Y0-value</param>
            <param name="y1">The Y1-value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Inserts a collection of X, Y0 and Y1 points at the specified index, automatically triggering a redraw
            </summary>
            <param name="startIndex">The index to insert at</param>
            <param name="x">The X-values</param>
            <param name="y0">The Y0-values</param>
            <param name="y1">The Y1-values</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2">
            <summary>
            A generic abstract base class which defines a generic DataSeries which contains 1..N columns, 
            such as X,Y in the case of plain X,Y data, or X, Open, High, Low, Close in the case of OHLC data.
            </summary>
            <typeparam name="TX">The type of the X-Data.</typeparam>
            <typeparam name="TY">The type of the Y-Data.</typeparam>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <seealso cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.DataSeries"/>
            <remarks>DataSeries are assigned to the RenderableSeries via the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> property. Any time a DataSeries is appended to, the
            parent <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2"/> will be redrawn</remarks>
        </member>
        <member name="E:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.DataSeriesChanged">
            <summary>
            Event raised whenever points are added to, removed or one or more DataSeries properties changes
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2._xColumn">
            <summary>
            The XColumn for this DataSeries
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2._yColumn">
            <summary>
            The primary YColumn for this DataSeries
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2._yMin">
            <summary>
            The computed Y-Minimum for this DataSeries
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2._yMinPositive">
            <summary>
            The computed minimum positive Y value for this DataSeries
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2._yMax">
            <summary>
            The computed Y-Maximum for this DataSeries
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2._xMin">
            <summary>
            The computed X-Minimum for this DataSeries
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2._xMinPositive">
            <summary>
            The computed minimum positive X value for this DataSeries
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2._xMax">
            <summary>
            The computed X-Maximum for this DataSeries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.SyncRoot">
            <summary>
            Synchronization object (per instance) 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.DataDistributionCalculator">
            <summary>
            Gets or Sets the DataDistrutionCalculator instance for this DataSeries. Used when resampling data to determine the correct algorithm 
            </summary>
            <remarks>By default, Ultrachart provides a DataDistributionCalculator which calculates if data is sorted appending, or evenly spaced as you append data. 
            However, this process takes approximately 30% of the time to append data (or more if appending in blocks). If you know in advance what the distribution of your data will be, 
            you can set the DataDistributionCalculator = new UserDefinedDistributionCalculator and set the flags yourself </remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.ParentSurface">
            <summary>
            Gets or sets the parent <see cref="T:Ecng.Xaml.Charting.Visuals.IUltrachartSurface" /> which this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries" /> instance is attached to
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.XType">
            <summary>
            Gets the Type of X-data points in this DataSeries. Used to check compatibility with Axis types
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.YType">
            <summary>
            Gets the Type of Y-data points in this DataSeries. Used to check compatibility with Axis types
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.XRange">
            <summary>
            Gets the computed XRange, which is an <see cref="T:Ecng.Xaml.Charting.IRange"/> wrapping XMin and XMax properties
            </summary>
            <remarks>Note: The performance implications of calling this is the DataSeries will perform a full recalculation on each get. It is recommended to get and cache if this property is needed more than once</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.YRange">
            <summary>
            Gets the computed YRange, which is an <see cref="T:Ecng.Xaml.Charting.IRange"/> wrapping YMin and YMax properties
            </summary>
            <remarks>Note: The performance implications of calling this is the DataSeries will perform a full recalculation on each get. It is recommended to get and cache if this property is needed more than once</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.YMin">
            <summary>
            Gets the computed Minimum value in Y for this series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.LatestYValue">
            <summary>
            Gets the latest Y-Value of the DataSeries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.YMinPositive">
            <summary>
            Gets the computed minimum positive value in Y for this series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.YMax">
            <summary>
            Gets the computed Maximum value in Y for this series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.XMin">
            <summary>
            Gets the computed Minimum value in X for this series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.XMinPositive">
            <summary>
            Gets the computed minimum positive value in X for this series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.XMax">
            <summary>
            Gets the computed Maximum value in X for this series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.Count">
            <summary>
            Gets the number of points in this data series
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.AcceptsUnsortedData">
            <summary>
            New to v3.3: when AcceptsUnsortedData is false, the DataSeries with throw an InvalidOperationException if unsorted data is appended. Unintentional unsorted data can result in much slower performance. 
            To disable this check, set AcceptsUnsortedData = true. 
            </summary>        
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.SeriesName">
            <summary>
            Gets or sets the name of this series
            </summary>
            <value>The name of the series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.IsAttached">
            <summary>
            Gets a value indicating whether this instance is attached.
            </summary>
            <value>
            	<c>true</c> if this instance is attached; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.DataSeriesType">
            <summary>
            Gets the <see cref="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.DataSeriesType"/> for this DataSeries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.Item(Ecng.Xaml.Charting.Model.DataSeries.DataSeriesColumn,System.Int32)">
            <summary>
            Gets the item at the index from the specified <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesColumn"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.HasValues">
            <summary>
            Gets whether the Data Series has values (is not empty)
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.XValues">
            <summary>
            Gets the X Values of this series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.YValues">
            <summary>
            Gets the Y Values of this series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.Ecng#Xaml#Charting#Model#DataSeries#IDataSeries#XValues">
            <summary>
            Gets the X Values of this dataseries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.Ecng#Xaml#Charting#Model#DataSeries#IDataSeries#YValues">
            <summary>
            Gets the Y Values of this dataseries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.IsFifo">
            <summary>
            Gets whether the dataseries behaves as a FIFO
            If True, when the FifoCapacity is reached, old points will be
            discarded in favour of new points
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.IsSorted">
            <summary>
            Gets whether this DataSeries contains Sorted data in the X-direction. 
            Note: Sorted data will result in far faster indexing operations. If at all possible, try to keep your data sorted in the X-direction
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.FifoCapacity">
            <summary>
            Gets or sets the size of the FIFO buffer.
            If null, then the dataseries is unlimited.
            If a value is set, when the point count reaches this value, older points will be discarded
            </summary>
            <value>The fifo capacity.</value>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.Append(`0,`1[])">
            <summary>
            Appends an X, Y point to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of y differ</exception>
            <param name="x">The X Value</param>
            <param name="yValues">The Y Values (depends on series type)</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}[])">
            <summary>
            Appends a list of X, Y points to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of x and each y differ</exception>
            <param name="x">The list of X points</param>
            <param name="yValues">Lists of Y points (depends on series type)</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.Remove(`0)">
            <summary>
            Removes the associated Y-Values for the specified X-Value
            </summary>
            <param name="x">The X DataValue to remove. Removes all associated Y-Values</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.RemoveAt(System.Int32)">
            <summary>
            Removes the X,Y values at the specified index
            </summary>
            <param name="index">The index to remove at</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of points starting from the specified index
            </summary>
            <param name="startIndex">Starting index of the range of elements to remove</param>
            <param name="count">The number of elements to remove</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.Clear">
            <summary>
            Clears the series, resetting internal lists to zero size
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.Clone">
            <summary>
            Creates a deep copy of a DataSeries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.GetIndicesRange(Ecng.Xaml.Charting.IRange)">
            <summary>
            Gets the integer indices of the XValues array that are currently in the VisibleRange passed in.
            </summary>
            <param name="range">The VisibleRange to get the indices range</param>
            <returns>
            The indices to the X-Data that are currently in range
            </returns>
            <example>If the input X-data is 0...99 in steps of 1, the VisibleRange is 10, 30 then the Indices Range will be 10, 30</example>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.ToPointSeries(Ecng.Xaml.Charting.Numerics.ResamplingMode,Ecng.Xaml.Charting.IndexRange,System.Int32,System.Boolean,System.Nullable{System.Boolean},Ecng.Xaml.Charting.IRange,Ecng.Xaml.Charting.Numerics.PointResamplers.IPointResamplerFactory)">
            <summary>
            Converts the default <see cref="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.YValues" /> to an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries" /> which is used to render XY series
            </summary>
            <param name="resamplingMode">The desired <see cref="T:Ecng.Xaml.Charting.Numerics.ResamplingMode" /></param>
            <param name="pointRange">The integer Indices range in the parent data-set</param>
            <param name="viewportWidth">The current width of the viewport</param>
            <param name="isCategoryAxis">If true, uses the indices to form the resampled X-values, else uses the X-Values themselves</param>
            <param name="dataIsDisplayedAs2D">If true, then data is considered as a scatter series without relationship between the points, e.g. not a line series </param>
            <param name="visibleXRange"></param>
            <param name="factory">The PointResamplerFactory which returns <see cref="T:Ecng.Xaml.Charting.Numerics.IPointResampler" /> instances</param>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries" /> which is used to render XY series
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.ToPointSeries(System.Collections.IList,Ecng.Xaml.Charting.Numerics.ResamplingMode,Ecng.Xaml.Charting.IndexRange,System.Int32,System.Boolean)">
            <summary>
            OBSOLETE. Use ToPointSeries instead, and cast to correct type of point series
            </summary>
            <param name="column"></param>
            <param name="resamplingMode"></param>
            <param name="pointRange"></param>
            <param name="viewportWidth"></param>
            <param name="isCategoryAxis"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.GetWindowedYRange(Ecng.Xaml.Charting.IRange)">
            <summary>
            Gets the YRange of the data (min, max of the series) in the input visible range point range, where the input range is the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.VisibleRange" />
            </summary>
            <param name="xRange">The X-Axis Range currently in view</param>
            <returns>
            The YRange of the data in this window
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.GetWindowedYRange(Ecng.Xaml.Charting.IRange,System.Boolean)">
            <summary>
            Gets the YRange of the data (min, max of the series) in the input visible range point range, where the input range is the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.VisibleRange"/>
            </summary>
            <param name="xRange">The X-Axis Range currently in view</param>
            <param name="getPositiveRange">Indicates whether to return positive YRange only</param>
            <returns>The YRange of the data in this window</returns>
            <exception cref="T:System.ArgumentNullException">xRange</exception>
            <exception cref="T:System.InvalidOperationException">Invalid Range Type. Please ensure you are using DateTimeAxis where the X-Data is DateTime, and NumericAxis where the X-Data is Double, Float, Int, Long</exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.GetWindowedYRange(Ecng.Xaml.Charting.IndexRange)">
            <summary>
            Gets the YRange of the data (min, max of the series) in the input IndexRange, where indices are point-indices on the DataSeries columns
            </summary>
            <param name="xIndexRange">The X-Axis Indices currently in view</param>
            <returns>
            The YRange of the data in this window
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.GetWindowedYRange(Ecng.Xaml.Charting.IndexRange,System.Boolean)">
            <summary>
            Gets the YRange of the data (min, max of the series) in the input IndexRange, where indices are point-indices on the DataSeries columns
            </summary>
            <param name="xIndexRange">The X-Axis Indices currently in view</param>
            <param name="getPositiveRange">Indicates whether to return positive YRange only</param>
            <returns>
            The YRange of the data in this window
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.FindIndex(System.IComparable,Ecng.Xaml.Charting.Common.Extensions.SearchMode)">
            <summary>
            Finds the index to the DataSeries at the specified X-Value
            </summary>
            <param name="x">The X-value to search for</param>
            <param name="searchMode">The <see cref="T:Ecng.Xaml.Charting.Common.Extensions.SearchMode" /> options to use. Default is exact, where -1 is returned if the index is not found</param>
            <returns>
            The index of the found value
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.ToHitTestInfo(System.Int32)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/> struct containing data about the data-point at the specified index
            </summary>
            <param name="index">The index to the DataSeries</param>
            <returns>The HitTestInfo</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.InvalidateParentSurface(Ecng.Xaml.Charting.Model.DataSeries.RangeMode)">
            <summary>
            May be called to trigger a redraw on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />. This method is extremely useful
            when <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries" /> are in a ViewModel and bound via MVVM to <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries" />.
            Please see the <paramref name="rangeMode" /> parameter for invalidation options
            </summary>
            <param name="rangeMode">Provides <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.RangeMode" /> invalidation options for the parent surface</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.GetPositiveMin``1(``0,``0)">
            <summary>
            Gets the minimum positive value of (positiveMin, min)
            </summary>
            <param name="positiveMin"></param>
            <param name="min"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.ClearColumns">
            <summary>
            When overridden in a derived class, clears all columns in the Data Series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.GetYMinAt(System.Int32,`1)">
            <summary>
            When overriden in a derived class, gets the Min(existingYMin, currentMin), where currentMin is the minimum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMin">The existing minimum</param>
            <returns>
            The new YMin, which is the Min(existingYMin, currentMin)
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.GetYMaxAt(System.Int32,`1)">
            <summary>
            When overriden in a derived class, gets the Max(existingYMax, currentMax), where currentMax is the maximum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMax">The existing maximum</param>
            <returns>
            The new YMax, which is the Min(existingYMax, currentMax)
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.GetXMinAt(System.Int32,`0)">
            <summary>
            When overriden in a derived class, gets the Min(existingXMin, currentMin), where currentMin is the minimum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingXMin">The existing minimum</param>
            <returns>The new XMin, which is the Min(existingXMin, currentMin)</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.ThrowWhenAppendInvalid(System.Int32)">
            <summary>
            Asserts correct number of parameters supplied to Append(TX, params TY) and throws if necessary
            </summary>
            <param name="paramsCount">The expected params count</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>
            The disposable Update Suspender
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.ResumeUpdates(Ecng.Xaml.Charting.Visuals.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by IUpdateSuspender
            </summary>
            <param name="suspender"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.FindClosestPoint(System.IComparable,System.IComparable,System.Double,System.Double)">
            <summary>
            Finds the closest point to a point with given X and Y value. Search region is a vertical area with center in X and [maxXDistance] X units to left and right
            </summary>
            <param name="xValue">The X-value of point [X data units, not pixels]</param>
            <param name="yValue">The Y-value of point [Y data units, not pixels]</param>
            <param name="xyScaleRatio">xUnitsPerPixel/yUnitsPerPixel</param>
            <param name="hitTestRadius">Specifies search region in chart coordinates(ticks for DateTime or TimeSpan)</param>
            <returns>
            The index of the found value, -1 if not found (when count is zero)
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2.FindClosestLine(System.IComparable,System.IComparable,System.Double,System.Double,Ecng.Xaml.Charting.Visuals.RenderableSeries.LineDrawMode)">
            <summary>
            Finds the closest line to a point with given X and Y value. Search region is a vertical area with center in X and [maxXDistance] X units to left and right
            </summary>
            <param name="x">The X-value of point [X data units, not pixels]</param>
            <param name="y">The Y-value of point [Y data units, not pixels]</param>
            <param name="xyScaleRatio">xUnitsPerPixel/yUnitsPerPixel</param>
            <param name="xRadius">specifies search region in X units (ticks for DateTime or TimeSpan)</param>
            <param name="drawNanAs">specifies how to handle NAN elements</param>
            <returns>
            The index of first point in line, -1 if not found (when count is zero)
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesUpdate">
            <summary>
            Constants to define the type of update when the <see cref="E:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.DataSeriesChanged"/> event is raised
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesUpdate.DataChanged">
            <summary>
            The underlying data has changed
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesUpdate.DataSeriesCleared">
            <summary>
            The Data Series has been cleared
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesUpdate.DataSetCleared">
            <summary>
            The DataSeriesSset has been cleared
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesChangedEventArgs">
            <summary>
            Event args used by event <see cref="E:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.DataSeriesChanged"/> event
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesChangedEventArgs.DataSeriesUpdate">
            <summary>
            Gets the type of <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> Update
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesChangedEventArgs.#ctor(Ecng.Xaml.Charting.Model.DataSeries.DataSeriesUpdate)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesChangedEventArgs"/> class.
            </summary>
            <param name="dataSeriesUpdate">The data series update type.</param>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesColumn">
            <summary>
            Defines enumeration constants for accessing columns in a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesColumn.Close">
            <summary>
            The close column
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesColumn.Y">
            <summary>
            The Y-Axis column
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesType">
            <summary>
            Enumeration constants to define the Type of <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesType.Xy">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/> contains Xy data
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesType.Ohlc">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2"/> contains OHLC data
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesType.Xyy">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/> contains Xyy data
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesType.Xyz">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/> contains Xyz data
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesType.Hlc">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2"/> contains XyError data
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesType.Box">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2"/> contains Box (Minimum, Lower Quartile, Median, Upper Quartile, Maximum) data
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesType.StackedXy">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/> contains Box (Minimum, Lower Quartile, Median, Upper Quartile, Maximum) data
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesType.Heatmap">
            <summary>
            The <see cref="!:Heatmap2DArrayDataSeries"/> contains data from 2D array
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesType.OneHundredPercentStackedXy">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Model.DataSeries.DataSeriesType.TimeframeSegment">
            <summary>
            Timeframe segment
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.GenericPoint2D`1">
            <summary>
            Defines a generic base class for a Series Point, an internally used structure which contains transformed points to render Y-values on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>
            </summary>
            <typeparam name="TY">The Type of the Y-Values</typeparam>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.GenericPoint2D`1.#ctor(System.Double,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.GenericPoint2D`1" /> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.GenericPoint2D`1.X">
            <summary>
            Gets the X-Value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.GenericPoint2D`1.Y">
            <summary>
            Gets the Y-value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.GenericPoint2D`1.YValues">
            <summary>
            Gets the Y values.
            </summary>
            <value>
            The Y values.
            </value>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries">
            <summary>
            Defines the base interface to a DataSeries which provides a data-source for <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <remarks>DataSeries are assigned to the RenderableSeries via the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.DataSeries"/> property. Any time a DataSeries is appended to, the
            parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> will be redrawn</remarks>
        </member>
        <member name="E:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.DataSeriesChanged">
            <summary>
            Event raised whenever points are added to, removed or one or more DataSeries properties changes
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.XType">
            <summary>
            Gets the Type of X-data points in this DataSeries. Used to check compatibility with Axis types
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.YType">
            <summary>
            Gets the Type of Y-data points in this DataSeries. Used to check compatibility with Axis types
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.ParentSurface">
            <summary>
            Gets or sets the parent <see cref="T:Ecng.Xaml.Charting.Visuals.IUltrachartSurface"/> which this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> instance is attached to
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.IsAttached">
            <summary>
            Gets whether the current DataSeries is attached to a DataSet
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.XRange">
            <summary>
            Gets the total extents of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> in the X-Direction
            </summary>
            <remarks>Note: The performance implications of calling this is the DataSeries will perform a full recalculation on each get. It is recommended to get and cache if this property is needed more than once</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.YRange">
            <summary>
            Gets the total extents of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> in the Y-Direction
            </summary>
            <remarks>Note: The performance implications of calling this is the DataSeries will perform a full recalculation on each get. It is recommended to get and cache if this property is needed more than once</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.DataSeriesType">
            <summary>
            Gets the <see cref="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.DataSeriesType"/> for this DataSeries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.XValues">
            <summary>
            Gets the XValues of this dataseries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.YValues">
            <summary>
            Gets the YValues of this dataseries        
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.LatestYValue">
            <summary>
            Gets the latest Y-Value of the DataSeries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.SeriesName">
            <summary>
            Gets or sets the name of this series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.YMin">
            <summary>
            Gets the computed Minimum value in Y for this series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.YMinPositive">
            <summary>
            Gets the computed minimum positive value in Y for this series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.YMax">
            <summary>
            Gets the computed Maximum value in Y for this series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.XMin">
            <summary>
            Gets the computed Minimum value in X for this series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.XMinPositive">
            <summary>
            Gets the computed minimum positive value in X for this series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.XMax">
            <summary>
            Gets the computed Maximum value in X for this series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.IsFifo">
            <summary>
            Gets whether the dataseries behaves as a FIFO. 
            If True, when the FifoCapacity is reached, old points will be
            discarded in favour of new points, resulting in a scrolling chart
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.FifoCapacity">
            <summary>
            Gets or sets the size of the FIFO buffer. 
            If null, then the dataseries is unlimited. 
            If a value is set, when the point count reaches this value, older points will be discarded
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.HasValues">
            <summary>
            Gets whether the DataSeries has values (is not empty)
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.Count">
            <summary>
            Gets the number of points in this dataseries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.IsSorted">
            <summary>
            Gets whether this DataSeries contains Sorted data in the X-direction. 
            Note: Sorted data will result in far faster indexing operations. If at all possible, try to keep your data sorted in the X-direction
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.SyncRoot">
            <summary>
            Gets a synchronization object used to lock this data-series. Also locked on append, update, remove or clear
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.AcceptsUnsortedData">
            <summary>
            New to v3.3: when AcceptsUnsortedData is false, the DataSeries with throw an InvalidOperationException if unsorted data is appended. Unintentional unsorted data can result in much slower performance. 
            To disable this check, set AcceptsUnsortedData = true. 
            </summary>        
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.Clear">
            <summary>
            Clears the series, resetting internal lists to zero size
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.GetIndicesRange(Ecng.Xaml.Charting.IRange)">
            <summary>
            Gets the integer indices of the XValues array that are currently in the VisibleRange passed in,
            and an indefinite range otherwise
            </summary>
            <example>If the input X-data is 0...99 in steps of 1, the VisibleRange is 10, 30 then the Indices Range will be 10, 30</example>
            <param name="visibleRange">The VisibleRange to get the indices range</param>
            <returns>The indices to the X-Data that are currently in range</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.ToPointSeries(Ecng.Xaml.Charting.Numerics.ResamplingMode,Ecng.Xaml.Charting.IndexRange,System.Int32,System.Boolean,System.Nullable{System.Boolean},Ecng.Xaml.Charting.IRange,Ecng.Xaml.Charting.Numerics.PointResamplers.IPointResamplerFactory)">
            <summary>
            Converts the default <see cref="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.YValues"/> to an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which is used to render XY series
            </summary>
            <param name="resamplingMode">The desired <see cref="T:Ecng.Xaml.Charting.Numerics.ResamplingMode"/></param>
            <param name="pointRange">The integer Indices range in the parent data-set</param>
            <param name="viewportWidth">The current width of the viewport</param>
            <param name="isCategoryAxis">If true, uses the indices to form the resampled X-values, else uses the X-Values themselves</param>
            <param name="visibleXRange">The VisibleRange of the XAxis at the time resampling occurs</param>
            <param name="factory">The PointResamplerFactory which returns <see cref="T:Ecng.Xaml.Charting.Numerics.IPointResampler"/> instances</param>
            <param name="dataIsDisplayedAs2D">If true, then data is presented as a scatter series without relationship between the points, e.g. not a line series </param>
            <returns>A <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which is used to render XY series</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.ToPointSeries(System.Collections.IList,Ecng.Xaml.Charting.Numerics.ResamplingMode,Ecng.Xaml.Charting.IndexRange,System.Int32,System.Boolean)">
            <summary>
            OBSOLETE: ToPointSeries overload has been deprecated, use ToPointSeries instead, and cast to correct type of point series
            </summary>
            <param name="column"></param>
            <param name="resamplingMode"></param>
            <param name="pointRange"></param>
            <param name="viewportWidth"></param>
            <param name="isCategoryAxis"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.GetWindowedYRange(Ecng.Xaml.Charting.IRange)">
            <summary>
            Gets the YRange of the data (min, max of the series) in the input visible range point range, where the input range is the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.VisibleRange"/>
            </summary>
            <param name="xRange">The X-Axis Range currently in view</param>
            <returns>The YRange of the data in this window</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.GetWindowedYRange(Ecng.Xaml.Charting.IndexRange)">
            <summary>
            Gets the YRange of the data (min, max of the series) in the input IndexRange, where indices are point-indices on the DataSeries columns
            </summary>
            <param name="xIndexRange">The X-Axis Indices currently in view</param>
            <returns>The YRange of the data in this window</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.GetWindowedYRange(Ecng.Xaml.Charting.IndexRange,System.Boolean)">
            <summary>
            Gets the YRange of the data (min, max of the series) in the input IndexRange, where indices are point-indices on the DataSeries columns
            </summary>
            <param name="xIndexRange">The X-Axis Indices currently in view</param>
            <param name="getPositiveRange">If true, returns an <seealso cref="T:Ecng.Xaml.Charting.IRange"/> which only has positive values, e.g, when viewing a Logarithmic chart this value might be set</param>
            <returns>The YRange of the data in this window</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.GetWindowedYRange(Ecng.Xaml.Charting.IRange,System.Boolean)">
            <summary>
            Gets the YRange of the data (min, max of the series) in the input visible range point range, where the input range is the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.VisibleRange"/>
            </summary>
            <param name="xRange">The X-Axis Range currently in view</param>
            <param name="getPositiveRange">If true, returns an <seealso cref="T:Ecng.Xaml.Charting.IRange"/> which only has positive values, e.g, when viewing a Logarithmic chart this value might be set</param>
            <returns>The YRange of the data in this window</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.FindIndex(System.IComparable,Ecng.Xaml.Charting.Common.Extensions.SearchMode)">
            <summary>
            Finds the index to the DataSeries at the specified X-Value
            </summary>
            <param name="x">The X-value to search for</param>
            <param name="searchMode">The <see cref="T:Ecng.Xaml.Charting.Common.Extensions.SearchMode"/> options to use. Default is exact, where -1 is returned if the index is not found</param>
            <returns>The index of the found value</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.ToHitTestInfo(System.Int32)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/> struct containing data about the data-point at the specified index
            </summary>
            <param name="index">The index to the DataSeries</param>
            <returns>The HitTestInfo</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.InvalidateParentSurface(Ecng.Xaml.Charting.Model.DataSeries.RangeMode)">
            <summary>
            May be called to trigger a redraw on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>. This method is extremely useful 
            when <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> are in a ViewModel and bound via MVVM to <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/>. 
            
            Please see the <paramref name="rangeMode"/> parameter for invalidation options
            </summary>
            <param name="rangeMode">Provides <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.RangeMode"/> invalidation options for the parent surface</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.FindClosestPoint(System.IComparable,System.IComparable,System.Double,System.Double)">
            <summary>
            Finds the closest point to a point with given X and Y value. Search region is a vertical area with center in X and [maxXDistance] X units to left and right
            </summary>
            <param name="x">The X-value of point [X data units, not pixels]</param>
            <param name="y">The Y-value of point [Y data units, not pixels]</param>
            <param name="xyScaleRatio">xUnitsPerPixel/yUnitsPerPixel</param>
            <param name="maxXDistance">specifies search region in X units (ticks for DateTime or TimeSpan)</param>
            <returns>The index of the found value, -1 if not found (when count is zero)</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.FindClosestLine(System.IComparable,System.IComparable,System.Double,System.Double,Ecng.Xaml.Charting.Visuals.RenderableSeries.LineDrawMode)">
            <summary>
            Finds the closest line to a point with given X and Y value. Search region is a vertical area with center in X and [maxXDistance] X units to left and right
            </summary>
            <param name="x">The X-value of point [X data units, not pixels]</param>
            <param name="y">The Y-value of point [Y data units, not pixels]</param>
            <param name="xyScaleRatio">xUnitsPerPixel/yUnitsPerPixel</param>
            <param name="xRadius">specifies search region in X units (ticks for DateTime or TimeSpan)</param>
            <param name="drawNanAs">specifies how to handle NAN elements</param>
            <returns>The index of first point in line, -1 if not found (when count is zero)</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2">
            <summary>
            Defines the Generic interface to a DataSeries which provides a data-source to a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            </summary>
            <typeparam name="TX">The type of the X-Data.</typeparam>
            <typeparam name="TY">The type of the Y-Data.</typeparam>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <remarks>DataSeries are assigned to the RenderableSeries via the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.DataSeries"/> property. Any time a DataSeries is appended to, the
            parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> will be redrawn</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2.XValues">
            <summary>
            Gets the X Values of this series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2.YValues">
            <summary>
            Gets the Y Values of this series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2.Append(`0,`1[])">
            <summary>
            Appends an X, Y point to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of y differ</exception>
            <param name="x">The X Value</param>
            <param name="yValues">The Y Values (depends on series type)</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}[])">
            <summary>
            Appends a list of X, Y points to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of x and each y differ</exception>
            <param name="x">The list of X points</param>
            <param name="yValues">Lists of Y points (depends on series type)</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2.Remove(`0)">
            <summary>
            Removes a point with the specified X Value
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2.RemoveAt(System.Int32)">
            <summary>
            Removes a point at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of points starting from the specified index
            </summary>
            <param name="startIndex">Starting index of the range of elements to remove</param>
            <param name="count">The number of elements to remove</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2.Clone">
            <summary>
            Creates a deep copy of a DataSeries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2.GetYMinAt(System.Int32,`1)">
            <summary>
            Used internally by AutoRanging algorithm. 
            When overriden in a derived class, gets the Min(existingYMin, currentMin), where currentMin is the minimum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMin">The existing minimum</param>
            <returns>The new YMin, which is the Min(existingYMin, currentMin)</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2.GetYMaxAt(System.Int32,`1)">
            <summary>
            Used internally by AutoRanging algorithm. 
            When overriden in a derived class, gets the Max(existingYMax, currentMax), where currentMax is the maximum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMax">The existing maximum</param>
            <returns>The new YMax, which is the Min(existingYMax, currentMax)</returns>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IGenericPointSeries`1.YPoints">
            <summary>
            Gets the base X,Y PointSeries, e.g. this is what we will draw if a higher order <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IGenericPointSeries`1"/> were applied to a <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries"/>
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries">
            <summary>
            Defines the interface to an OHLC DataSeries, a series containing Open, High, Low, Close data-points
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries.OpenValues">
            <summary>
            Gets the Open Values of this DataSeries as a List of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries.HighValues">
            <summary>
            Gets the High Values of this DataSeries as a List of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries.LowValues">
            <summary>
            Gets the Low Values of this DataSeries as a List of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries.CloseValues">
            <summary>
            Gets the Close Values of this DataSeries as a List of <see cref="T:System.IComparable"/>
            </summary>
            <remarks>Close equates to Y Values in either OHLC or simple XY dataseries</remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2">
            <summary>
            Defines the typed interface to an OHLC DataSeries, a series containing Open, High, Low, Close data-points
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2.OpenValues">
            <summary>
            Gets the Open Values of this DataSeries, if the data is OHLC
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2.HighValues">
            <summary>
            Gets the High Values of this DataSeries, if the data is OHLC
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2.LowValues">
            <summary>
            Gets the Low Values of this DataSeries, if the data is OHLC
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2.CloseValues">
            <summary>
            Gets the Close Values of this DataSeries, if the data is OHLC
            </summary>
            <remarks>Close equates to Y Values in either OHLC or simple XY dataseries</remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2.Append(`0,`1,`1,`1,`1)">
            <summary>
            Appends an Open, High, Low, Close point to the series
            </summary>
            <param name="x">The X value</param>
            <param name="open">The Open value</param>
            <param name="high">The High value</param>
            <param name="low">The Low value</param>
            <param name="close">The Close value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Appends a list of Open, High, Low, Close points to the series
            </summary>
            <param name="x">The list of X values</param>
            <param name="open">The list of Open values</param>
            <param name="high">The list of High values</param>
            <param name="low">The list of Low values</param>
            <param name="close">The list of Close values</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2.Update(`0,`1,`1,`1,`1)">
            <summary>
            Updates an Open, High, Low, Close point specified by the X-Value passed in. 
            </summary>
            <param name="x">The X Value to key on when updating</param>
            <param name="open">The Open value</param>
            <param name="high">The High value</param>
            <param name="low">The Low value</param>
            <param name="close">The Close value</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the x value is not in the DataSeries</exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2.Insert(System.Int32,`0,`1,`1,`1,`1)">
            <summary>
            Inserts an Open, High, Low, Close point at the specified index
            </summary>
            <param name="index">The index to insert at</param>
            <param name="x">The X value</param>
            <param name="open">The Open value</param>
            <param name="high">The High value</param>
            <param name="low">The low value</param>
            <param name="close">The close value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Inserts a list of Open, High, Low, Close points at the specified index
            </summary>
            <param name="startIndex">The index to insert at</param>
            <param name="x">The list of X values</param>
            <param name="open">The list of Open values</param>
            <param name="high">The list of High values</param>
            <param name="low">The list of Low values</param>
            <param name="close">The list of Close values</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint">
            <summary>
            Defines the interface to a 2D point, which is used to convey data-point values in double format
            throughout the Ultrachart library
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IPoint.X">
            <summary>
            Gets the X-Value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IPoint.Y">
            <summary>
            Gets the Y-value
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries">
            <summary>
            Defines the interface to a collection of <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint"/>, a subset of X,Y data used to render points to the screen
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.Point2DSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.GenericPointSeriesBase`1"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint"/>    
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries.XValues">
            <summary>
            Gets the Raw X-Values for the PointSeries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries.YValues">
            <summary>
            Gets the Raw Y-Values for the PointSeries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries.Count">
            <summary>
            Gets the count of the PointSeries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint"/> at the specified index, which merges the X,Y and higher order values into a single point
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IGenericPointSeries`1"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries.GetYRange">
            <summary>
            Gets the min, max range in the Y-Direction
            </summary>
            <returns>A <see cref="T:Ecng.Xaml.Charting.DoubleRange"/> defining the min, max in the Y-direction</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn`1">
            <summary>
            Defines the interface to a generically typed series column in a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/>
            </summary>
            <typeparam name="T">The underlying type of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn`1"/></typeparam>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn`1.GetMinimum">
            <summary>
            Gets the minimum value of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn`1.GetMaximum">
            <summary>
            Gets the maximum value of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the column
            </summary>
            <param name="values">The values.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Insert a range of items at the specified index
            </summary>
            <param name="startIndex">The index to insert at.</param>
            <param name="values">The values.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove a range of items starting from the specified index
            </summary>
            <param name="startIndex">The index to start removing from</param>
            <param name="count">Numbers of point to remove</param>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn">
            <summary>
            Defines the interface to a series column in a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> derived type
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn.HasValues">
            <summary>
            Gets a value indicating whether this column has any values.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ISeriesColumn.Count">
            <summary>
            Gets the count of values in this column
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1">
            <summary>
            Defines the interface to a Series Point, an internally used structure which contains transformed points to render Y-values on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>
            </summary>
            <typeparam name="T">The Type of the Y-Values</typeparam>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1.Max">
            <summary>
            Gets the maximum of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. In the case of an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint"/> this would be the High value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1.Min">
            <summary>
            Gets the minimum of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. In the case of an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint"/> this would be the Low value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1.Y">
            <summary>
            Gets the default Y-value of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. In the case of an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint"/> this would be the Close value
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries">
            <summary>
            Defines the interface to an Xy DataSeries, which contains columns of X-Values and Y-Values
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2">
            <summary>
            Defines the interface to a typed Xy DataSeries, which contains columns of X-Values and Y-Values. 
            </summary>    
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2.Append(`0,`1)">
            <summary>
            Appends an X, Y point to the series
            </summary>
            <param name="x">The X Value</param>
            <param name="y">The Y Value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Appends a list of X, Y points to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of x and y differ</exception>
            <param name="x">The list of X points</param>
            <param name="y">The list of Y points</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2.Update(`0,`1)">
            <summary>
            Updates an X,Y point specified by the X-Value passed in. 
            </summary>
            <param name="x">The X Value to key on when updating</param>
            <param name="y">The new Y value</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the x value is not in the DataSeries</exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts an X,Y point at the specified index
            </summary>
            <param name="index">The index to insert at</param>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Inserts a list of X, Y points at the specified index
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of x and y differ</exception>
            <param name="startIndex">The index to insert at</param>
            <param name="x">The list of X points</param>
            <param name="y">The list of Y points</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2">
            <summary>
            A DataSeries to store OHLC data-points, containing X and Y-Open, Y-High, Y-Low, Y-Close values. 
            May be used as a DataSource for <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/> and <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries"/> as well as standard XY renderable series types
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.YRange">
            <summary>
            Gets the computed YRange, which is an <see cref="T:Ecng.Xaml.Charting.IRange"/> wrapping YMin and YMax properties
            </summary>
            <remarks>Note: The performance implications of calling this is the DataSeries will perform a full recalculation on each get. It is recommended to get and cache if this property is needed more than once</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.HasValues">
            <summary>
            Gets whether the Data Series has values (is not empty)
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.DataSeriesType">
            <summary>
            Gets the <see cref="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.DataSeriesType"/> for this DataSeries
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.ToHitTestInfo(System.Int32)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/> struct containing data about the data-point at the specified index
            </summary>
            <param name="index">The index to the DataSeries</param>
            <returns>The HitTestInfo</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.ClearColumns">
            <summary>
            When overridden in a derived class, clears all columns in the Data Series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.RemoveAt(System.Int32)">
            <summary>
            Removes the X,Y values at the specified index
            </summary>
            <param name="index">The index to remove at</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of points starting from the specified index
            </summary>
            <param name="startIndex">Starting index of the range of elements to remove</param>
            <param name="count">The number of elements to remove</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.Clone">
            <summary>
            Creates a deep copy of a DataSeries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.ToPointSeries(Ecng.Xaml.Charting.Numerics.ResamplingMode,Ecng.Xaml.Charting.IndexRange,System.Int32,System.Boolean,System.Nullable{System.Boolean},Ecng.Xaml.Charting.IRange,Ecng.Xaml.Charting.Numerics.PointResamplers.IPointResamplerFactory)">
            <summary>
            Converts the default <see cref="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.YValues"/> to an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which is used to render XY series
            </summary>
            <param name="resamplingMode">The desired <see cref="T:Ecng.Xaml.Charting.Numerics.ResamplingMode"/></param>
            <param name="pointRange">The integer Indices range in the parent data-set</param>
            <param name="viewportWidth">The current width of the viewport</param>
            <param name="isCategoryAxis">If true, uses the indices to form the resampled X-values, else uses the X-Values themselves</param>
            <param name="dataIsDisplayedAs2D">If true, then data is presented as a scatter series without relationship between the points, e.g. not a line series </param>
            <param name="visibleXRange">The XAxis VisibleRange at the time of resampling</param>
            <param name="factory">The <see cref="T:Ecng.Xaml.Charting.Numerics.PointResamplers.IPointResamplerFactory"/> Instance</param>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which is used to render XY series
            </returns>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.Ecng#Xaml#Charting#Model#DataSeries#IOhlcDataSeries#OpenValues">
            <summary>
            Gets the Open Values of this DataSeries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.Ecng#Xaml#Charting#Model#DataSeries#IOhlcDataSeries#HighValues">
            <summary>
            Gets the High Values of this DataSeries as a List of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.Ecng#Xaml#Charting#Model#DataSeries#IOhlcDataSeries#LowValues">
            <summary>
            Gets the Low Values of this DataSeries as a List of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.Ecng#Xaml#Charting#Model#DataSeries#IOhlcDataSeries#CloseValues">
            <summary>
            Gets the Close Values of this DataSeries as a List of <see cref="T:System.IComparable"/>
            </summary>
            <remarks>Close equates to Y Values in either OHLC or simple XY dataseries</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.OpenValues">
            <summary>
            Gets the Open Values of this DataSeries, if the data is OHLC
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.HighValues">
            <summary>
            Gets the High Values of this DataSeries, if the data is OHLC
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.LowValues">
            <summary>
            Gets the Low Values of this DataSeries, if the data is OHLC
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.CloseValues">
            <summary>
            Gets the Close Values of this DataSeries, if the data is OHLC
            </summary>
            <remarks>Close equates to Y Values in either OHLC or simple XY dataseries</remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.Append(`0,`1[])">
            <summary>
            Appends an X, Y point to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of y differ</exception>
            <param name="x">The X Value</param>
            <param name="yValues">The Y Values (depends on series type)</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}[])">
            <summary>
            Appends a list of X, Y points to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of x and each y differ</exception>
            <param name="x">The list of X points</param>
            <param name="yValues">Lists of Y points (depends on series type)</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.Append(`0,`1,`1,`1,`1)">
            <summary>
            Appends an Open, High, Low, Close point to the series
            </summary>
            <param name="x">The X value</param>
            <param name="open">The Open value</param>
            <param name="high">The High value</param>
            <param name="low">The Low value</param>
            <param name="close">The Close value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Appends a list of Open, High, Low, Close points to the series
            </summary>
            <param name="x">The list of X values</param>
            <param name="open">The list of Open values</param>
            <param name="high">The list of High values</param>
            <param name="low">The list of Low values</param>
            <param name="close">The list of Close values</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.Update(`0,`1,`1,`1,`1)">
            <summary>
            Updates an Open, High, Low, Close point specified by the X-Value passed in. 
            </summary>
            <param name="x">The X Value to key on when updating</param>
            <param name="open">The Open value</param>
            <param name="high">The High value</param>
            <param name="low">The Low value</param>
            <param name="close">The Close value</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the x value is not in the DataSeries</exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.Insert(System.Int32,`0,`1,`1,`1,`1)">
            <summary>
            Inserts an Open, High, Low, Close point at the specified index
            </summary>
            <param name="index">The index to insert at</param>
            <param name="x">The X value</param>
            <param name="open">The Open value</param>
            <param name="high">The High value</param>
            <param name="low">The low value</param>
            <param name="close">The close value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Inserts a list of Open, High, Low, Close points at the specified index
            </summary>
            <param name="startIndex">The index to insert at</param>
            <param name="x">The list of X values</param>
            <param name="open">The list of Open values</param>
            <param name="high">The list of High values</param>
            <param name="low">The list of Low values</param>
            <param name="close">The list of Close values</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.GetYMaxAt(System.Int32,`1)">
            <summary>
            When overriden in a derived class, gets the Max(existingYMax, currentMax), where currentMax is the maximum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMax">The existing maximum</param>
            <returns>The new YMax, which is the Min(existingYMax, currentMax)</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2.GetYMinAt(System.Int32,`1)">
            <summary>
            When overriden in a derived class, gets the Min(existingYMin, currentMin), where currentMin is the minimum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMin">The existing minimum</param>
            <returns>The new YMin, which is the Min(existingYMin, currentMin)</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcPointSeries">
            <summary>
            An internal concept - the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> provides a sequence of <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/> derived 
            types, which represent resampled data immediately before rendering. 
            
            The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcPointSeries"/> specifically is used when resampling and rendering OhlcDataSeries
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint"/>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint">
            <summary>
            A structure to contain OHLC series point values for the Y-Axis only
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint" /> struct.
            </summary>
            <param name="open">The open value.</param>
            <param name="high">The high value.</param>
            <param name="low">The low value.</param>
            <param name="close">The close value.</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint.Open">
            <summary>
            Gets the open value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint.High">
            <summary>
            Gets the high value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint.Low">
            <summary>
            Gets the low value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint.Close">
            <summary>
            Gets the close value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint.Max">
            <summary>
            Gets the maximum of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. In the case of an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint"/> this would be the High value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint.Min">
            <summary>
            Gets the minimum of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. In the case of an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint"/> this would be the Low value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint.Y">
            <summary>
            Gets the default Y-value of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. In the case of an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint"/> this would be the Close value
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.Point2D">
            <summary>
            A struct representing a 2D point
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.Point2D.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.Point2D" /> struct.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.Point2D.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.Point2D.X">
            <summary>
            Gets the X value
            </summary>        
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.Point2D.Y">
            <summary>
            Gets the Y value
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IUltraList`1.GetMaximum">
            <summary>
            Gets the maximum in the list
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IUltraList`1.GetMinimum">
            <summary>
            Gets the minimum in the list
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IUltraList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the list
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IUltraList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a range of items to the list
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IUltraList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items from the list
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.IUltraList`1.ItemsArray">
            <summary>
            Gets the internal ItemsArray that this list wraps for direct unchecked access
            NOTE: The count of the ItemsArray may differ from the count of the List. Use the List.Count when iterating
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.IUltraList`1.SetCount(System.Int32)">
            <summary>
            Forces the count of the list, in operations where we know the capacity in advance
            </summary>
            <param name="setLength"></param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.UltraList`1">
            <summary>
            Implementation of generic list, same as .NET Framework version however we expose the inner array 
            for direct manipulation of the array. Tests show this to be around 4x faster than accessing via the indexed
            property
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.UltraList`1.Add(`0)">
            <summary>Adds an object to the end of the <see cref="T:System.Collections.Generic.List`1" />.</summary>
            <param name="item">The object to be added to the end of the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2">
            <summary>
            A DataSeries to store Xy data-points, containing X and Y values which must be sorted in the X-direction. 
            May be used as a DataSource for <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries"/> as well as standard XY renderable series types
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <remarks>DataSeries are assigned to the RenderableSeries via the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.DataSeries"/> property. Any time a DataSeries is appended to, the
            parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> will be redrawn</remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2.DataSeriesType">
            <summary>
            Gets the <see cref="P:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2.DataSeriesType"/> for this DataSeries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2.HasValues">
            <summary>
            Gets whether the Data Series has values (is not empty)
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2.ToPointSeries(Ecng.Xaml.Charting.Numerics.ResamplingMode,Ecng.Xaml.Charting.IndexRange,System.Int32,System.Boolean,System.Nullable{System.Boolean},Ecng.Xaml.Charting.IRange,Ecng.Xaml.Charting.Numerics.PointResamplers.IPointResamplerFactory)">
            <summary>
            Converts the default <see cref="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.YValues"/> to an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which is used to render XY series
            </summary>
            <param name="resamplingMode">The desired <see cref="T:Ecng.Xaml.Charting.Numerics.ResamplingMode"/></param>
            <param name="pointRange">The integer Indices range in the parent data-set</param>
            <param name="viewportWidth">The current width of the viewport</param>
            <param name="isCategoryAxis">If true, uses the indices to form the resampled X-values, else uses the X-Values themselves</param>
            <param name="dataIsDisplayedAs2D">If true, then data is presented as a scatter series without relationship between the points, e.g. not a line series </param>
            <param name="visibleXRange">The XAxis VisibleRange at the time of resampling</param>
            <param name="factory">The <see cref="T:Ecng.Xaml.Charting.Numerics.PointResamplers.IPointResamplerFactory"/> Instance</param>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which is used to render XY series
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2.ClearColumns">
            <summary>
            When overridden in a derived class, clears all columns in the Data Series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2.RemoveAt(System.Int32)">
            <summary>
            Removes the X,Y values at the specified index
            </summary>
            <param name="index">The index to remove at</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of points starting from the specified index
            </summary>
            <param name="startIndex">Starting index of the range of elements to remove</param>
            <param name="count">The number of elements to remove</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2.Clone">
            <summary>
            Creates a deep copy of a DataSeries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2.Append(`0,`1[])">
            <summary>
            Appends an X, Y point to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of y differ</exception>
            <param name="x">The X Value</param>
            <param name="yValues">The Y Values (depends on series type)</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}[])">
            <summary>
            Appends a list of X, Y points to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of x and each y differ</exception>
            <param name="x">The list of X points</param>
            <param name="yValues">Lists of Y points (depends on series type)</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2.Append(`0,`1)">
            <summary>
            Appends an X, Y point to the series
            </summary>
            <param name="x">The X Value</param>
            <param name="y">The Y Value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Appends a list of X, Y points to the series
            </summary>
            <param name="x">The list of X points</param>
            <param name="y">The list of Y points</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2.Update(`0,`1)">
            <summary>
            Updates an X,Y point specified by the X-Value passed in. 
            </summary>
            <param name="x">The X Value to key on when updating</param>
            <param name="y">The new Y value</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the x value is not in the DataSeries</exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts an X,Y point at the specified index
            </summary>
            <param name="index">The index to insert at</param>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Inserts a list of X, Y points at the specified index
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of x and y differ</exception>
            <param name="startIndex">The index to insert at</param>
            <param name="x">The list of X points</param>
            <param name="y">The list of Y points</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2.GetYMinAt(System.Int32,`1)">
            <summary>
            Used internally by AutoRanging algorithm. 
            When overriden in a derived class, gets the Min(existingYMin, currentMin), where currentMin is the minimum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMin">The existing minimum</param>
            <returns>The new YMin, which is the Min(existingYMin, currentMin)</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2.GetYMaxAt(System.Int32,`1)">
            <summary>
            Used internally by AutoRanging algorithm. 
            When overriden in a derived class, gets the Max(existingYMax, currentMax), where currentMax is the maximum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMax">The existing maximum</param>
            <returns>The new YMax, which is the Min(existingYMax, currentMax)</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2">
            <summary>
            A DataSeries to store Xyy data-points, containing X and Y0, Y1 values
            May be used as a DataSource for <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries"/> as well as standard XY renderable series types
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <remarks>DataSeries are assigned to the RenderableSeries via the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.DataSeries"/> property. Any time a DataSeries is appended to, the
            parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> will be redrawn</remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.YRange">
            <summary>
            Gets the computed YRange, which is an <see cref="T:Ecng.Xaml.Charting.IRange"/> wrapping YMin and YMax properties
            </summary>
            <remarks>Note: The performance implications of calling this is the DataSeries will perform a full recalculation on each get. It is recommended to get and cache if this property is needed more than once</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.DataSeriesType">
            <summary>
            Gets the <see cref="P:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.DataSeriesType"/> for this DataSeries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.Ecng#Xaml#Charting#Model#DataSeries#IXyyDataSeries#Y1Values">
            <summary>
            Gets the Y1 Values as a list of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.Y1Values">
            <summary>
            Gets the Y1 values
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.HasValues">
            <summary>
            Gets whether the Data Series has values (is not empty)
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.RemoveAt(System.Int32)">
            <summary>
            Removes the X,Y values at the specified index
            </summary>
            <param name="index">The index to remove at</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of points starting from the specified index
            </summary>
            <param name="startIndex">Starting index of the range of elements to remove</param>
            <param name="count">The number of elements to remove</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.Clone">
            <summary>
            Creates a deep copy of a DataSeries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.GetYMinAt(System.Int32,`1)">
            <summary>
            When overriden in a derived class, gets the Min(existingYMin, currentMin), where currentMin is the minimum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMin">The existing minimum</param>
            <returns>The new YMin, which is the Min(existingYMin, currentMin)</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.GetYMaxAt(System.Int32,`1)">
            <summary>
            When overriden in a derived class, gets the Max(existingYMax, currentMax), where currentMax is the maximum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMax">The existing maximum</param>
            <returns>The new YMax, which is the Min(existingYMax, currentMax)</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.ToPointSeries(Ecng.Xaml.Charting.Numerics.ResamplingMode,Ecng.Xaml.Charting.IndexRange,System.Int32,System.Boolean,System.Nullable{System.Boolean},Ecng.Xaml.Charting.IRange,Ecng.Xaml.Charting.Numerics.PointResamplers.IPointResamplerFactory)">
            <summary>
            Converts the default <see cref="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.YValues"/> to an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which is used to render XY series
            </summary>
            <param name="resamplingMode">The desired <see cref="T:Ecng.Xaml.Charting.Numerics.ResamplingMode"/></param>
            <param name="pointRange">The integer Indices range in the parent data-set</param>
            <param name="viewportWidth">The current width of the viewport</param>
            <param name="isCategoryAxis">If true, uses the indices to form the resampled X-values, else uses the X-Values themselves</param>
            <param name="dataIsDisplayedAs2D">If true, then data is presented as a scatter series without relationship between the points, e.g. not a line series </param>
            <param name="visibleXRange">The XAxis VisibleRange at the time of resampling</param>
            <param name="factory">The <see cref="T:Ecng.Xaml.Charting.Numerics.PointResamplers.IPointResamplerFactory"/> Instance</param>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which is used to render XY series
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.ToHitTestInfo(System.Int32)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/> struct containing data about the data-point at the specified index
            </summary>
            <param name="index">The index to the DataSeries</param>
            <returns>The HitTestInfo</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.ClearColumns">
            <summary>
            When overridden in a derived class, clears all columns in the Data Series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.Append(`0,`1[])">
            <summary>
            Appends an X, Y point to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of y differ</exception>
            <param name="x">The X Value</param>
            <param name="yValues">The Y Values (depends on series type)</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}[])">
            <summary>
            Appends a list of X, Y points to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of x and each y differ</exception>
            <param name="x">The list of X points</param>
            <param name="yValues">Lists of Y points (depends on series type)</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.Append(`0,`1,`1)">
            <summary>
            Appends a single X, Y0, Y1 point to the series, automatically triggering a redraw
            </summary>
            <param name="x">The X-value</param>
            <param name="y0">The Y0-value</param>
            <param name="y1">The Y1-value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Appends a collection of X, Y0 and Y1 points to the series, automatically triggering a redraw
            </summary>
            <param name="x">The X-values</param>
            <param name="y0">The Y0-values</param>
            <param name="y1">The Y1-values</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.Update(`0,`1,`1)">
            <summary>
            Updates (overwrites) the Y0, Y1 values at the specified X-value. Automatically triggers a redraw
            </summary>
            <param name="x">The X-value</param>
            <param name="y0">The Y0-value</param>
            <param name="y1">The Y1-value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.Insert(System.Int32,`0,`1,`1)">
            <summary>
            Inserts an X, Y0, Y1 point at the specified index. Automatically triggers a redraw
            </summary>
            <param name="index">The index to insert at</param>
            <param name="x">The X-value</param>
            <param name="y0">The Y0-value</param>
            <param name="y1">The Y1-value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Inserts a collection of X, Y0 and Y1 points at the specified index, automatically triggering a redraw
            </summary>
            <param name="startIndex">The index to insert at</param>
            <param name="x">The X-values</param>
            <param name="y0">The Y0-values</param>
            <param name="y1">The Y1-values</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.XyyPointSeries">
            <summary>
            An internal concept - the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> provides a sequence of <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/> derived 
            types, which represent resampled data immediately before rendering. 
            
            The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyPointSeries"/> specifically is used when resampling and rendering points for <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries"/>, or 
            any other series-type which requires one X-value and two Y-values
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyyPointSeries.#ctor(Ecng.Xaml.Charting.Model.DataSeries.IPointSeries,Ecng.Xaml.Charting.Model.DataSeries.IPointSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyPointSeries" /> class.
            </summary>
            <param name="yPoints">The y points.</param>
            <param name="y1Points">The y1 points.</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyyPointSeries.Count">
            <summary>
            Gets the number of <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint" /> points that this series contains
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyyPointSeries.YPoints">
            <summary>
            Gets the Y points.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyyPointSeries.Y1Points">
            <summary>
            Gets the y1 points.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyyPointSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPoint" />.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyyPointSeries.GetYRange">
            <summary>
            Gets the min, max range in the Y-Direction
            </summary>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.DoubleRange" /> defining the min, max in the Y-direction
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Model.DataSeries.XyySeriesPoint">
            <summary>
            A structure to contain Xyy series point values for the Y-Axis only
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyySeriesPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyySeriesPoint" /> struct.
            </summary>
            <param name="y0">The y0 value.</param>
            <param name="y1">The y1 value.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Model.DataSeries.XyySeriesPoint.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyySeriesPoint.Y0">
            <summary>
            Gets the Y0 value of the Xyy point
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyySeriesPoint.Y1">
            <summary>
            Gets the Y1 value of the Xyy point
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyySeriesPoint.Max">
            <summary>
            Gets the maximum of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. In the case of an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint"/> this would be the High value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyySeriesPoint.Min">
            <summary>
            Gets the minimum of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. In the case of an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcSeriesPoint"/> this would be the Low value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Model.DataSeries.XyySeriesPoint.Y">
            <summary>
            Gets the default Y-value of this <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.ISeriesPoint`1"/>. In the case of an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyySeriesPoint"/> this would be the Y0 value. 
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.TimeSpanRange">
            <summary>
            Defines a Range of Type TimeSpan
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.TimeSpanRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.TimeSpanRange"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.TimeSpanRange.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.TimeSpanRange"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.TimeSpanRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.TimeSpanRange.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.TimeSpanRange.Diff">
            <summary>
            Gets the difference (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.TimeSpanRange.IsZero">
            <summary>
            Gets whether the range is Zero, where Max equals Min
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.TimeSpanRange.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Ecng.Xaml.Charting.DoubleRange"/>, which are used internally for calculations
            </summary>
            <returns></returns>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Ecng.Xaml.Charting.TimeSpanRange"/> instances, returns a new <see cref="T:Ecng.Xaml.Charting.DoubleRange"/> with the Min and Max Ticks</example>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.TimeSpanRange.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange`1"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.TimeSpanRange.SetMinMax(System.Double,System.Double,Ecng.Xaml.Charting.IRange{System.TimeSpan})">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange`1"/> with a maximum range limit, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.TimeSpanRange.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.TimeSpanRange.ClipTo(Ecng.Xaml.Charting.IRange{System.TimeSpan})">
            <summary>
            Clips the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ILogarithmicCoordinateCalculator">
            <summary>
            Defines the interface to a <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis"/> specific ICoordinateCalculator, to obtain LogarithmicBase
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ILogarithmicCoordinateCalculator.LogarithmicBase">
            <summary>
            Gets or sets the value which determines the base used for the logarithm.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICategoryCoordinateCalculator">
            <summary>
            Defines the interface to a <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/> specific ICoordinateCalculator, to convert from pixel coordinate to index to data value and back
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICategoryCoordinateCalculator.TransformIndexToData(System.Int32)">
            <summary>
            Takes an integer index (or point number) to the underlying data and transforms to the data value on the axis. 
            
            e.g. if the axis is a CategoryDateTimeAxis, accepts index, returns DateTime. 
            
            If the index lies outside of the data-range, a projection is performed
            </summary>
            <param name="index">The index to the underlying data series</param>
            <returns>The data value</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICategoryCoordinateCalculator.TransformDataToIndex(System.DateTime)">
            <summary>
            Takes a DateTime data-value and transforms to integer index on the axis
            
            e.g. if the axis is a CategoryDateTimeAxis, accepts DateTime, returns index. 
            
            If the DateTime lies outside of the data-range, a projection is performed
            </summary>
            <param name="dataValue">The data value</param>
            <returns>The index to the underlying data series</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICategoryCoordinateCalculator.TransformDataToIndex(System.DateTime,Ecng.Xaml.Charting.Common.Extensions.SearchMode)">
            <summary>
            Takes a DateTime data-value and transforms to integer index on the axis
            
            e.g. if the axis is a CategoryDateTimeAxis, accepts DateTime, returns index. 
            
            If the DateTime lies outside of the data-range, a projection is performed
            </summary>
            <param name="dataValue">The data value</param>
            <param name="searchMode">Indicates a way in wich to look for the <paramref name="dataValue"/></param>
            <returns>The index to the underlying data series or -1 if <see cref="F:Ecng.Xaml.Charting.Common.Extensions.SearchMode.Exact"/> and the <paramref name="dataValue"/> doesn't exist.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.CategoryCoordinateCalculator.TransformDataToIndexInternal(System.IComparable,Ecng.Xaml.Charting.Common.Extensions.SearchMode)">
            <summary>
            Finds index of the data-value in the point-series using corresponding <see cref="T:Ecng.Xaml.Charting.Common.Extensions.SearchMode"/>
            </summary>
            <param name="dataValue"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1">
            <summary>
            Using pre-computed constants, types which implement ICoordinateCalculator can convert from pixel coordinate to data value and back
            </summary>
            <typeparam name="T">The type of the underlying data to convert</typeparam>
        </member>
        <member name="P:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1.IsCategoryAxisCalculator">
            <summary>
            Gets a value indicating whether this is a category axis coordinate calculator
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1.IsLogarithmicAxisCalculator">
            <summary>
            Gets a value indicating whether this is a logarithmic axis coordinate calculator
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1.IsHorizontalAxisCalculator">
            <summary>
            Gets a value indicating whether this is a horizontal axis coordinate calculator
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1.IsXAxisCalculator">
            <summary>
            Gets a value indicating whether this is coordinate calculator belongs by X axis
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1.HasFlippedCoordinates">
            <summary>
            Gets a value indicating whether coordinates are flipped
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1.GetCoordinate(System.DateTime)">
            <summary>
            Transforms the DateTime data value into a pixel coordinate
            </summary>
            <param name="dataValue">The DateTime data value</param>
            <returns>The pixel coordinate</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1.GetCoordinate(`0)">
            <summary>
            Transforms a data value into a pixel coordinate
            </summary>
            <param name="dataValue">The data value</param>
            <returns>The pixel coordinate</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1.GetDataValue(System.Double)">
            <summary>
            Transforms a pixel coordinate into a data value
            </summary>
            <param name="pixelCoordinate">The pixel coordinate</param>
            <returns>The data value</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1.TranslateBy(System.Double,Ecng.Xaml.Charting.DoubleRange)">
            <summary>
            Translates the min and max of the input range by the specified data value. Specific implementations of <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> such as
            <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.DoubleCoordinateCalculator"/>, <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.LogarithmicDoubleCoordinateCalculator"/> and <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.CategoryCoordinateCalculator"/> will treat this differently
            </summary>
            <param name="pixels">The number of pixels to translate by. InputRange min and max will be translated by this positive or negative amount</param>
            <param name="inputRange">The input <see cref="T:Ecng.Xaml.Charting.DoubleRange"/> to translate</param>
            <returns>A new instance of <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.CategoryCoordinateCalculator"/> with the translation applied</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1.TranslateBy(System.Double,System.Double,Ecng.Xaml.Charting.IRange)">
            <summary>
            Translates the min and max of the input range, multiplies them by the specified <paramref name="minFraction"/>, <paramref name="maxFraction"/>. Specific implementations of <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> such as
            <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.DoubleCoordinateCalculator"/>, <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.LogarithmicDoubleCoordinateCalculator"/> and <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.CategoryCoordinateCalculator"/> will treat this differently
            </summary>
            <param name="inputRange">The input <see cref="T:Ecng.Xaml.Charting.IRange"/> to translate</param>
            <param name="minFraction">The multiplier of range start</param>
            <param name="maxFraction">The multiplier of range end</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculatorFactory">
            <summary>
            Used internally by Ultrachart. Defines the interface to the coordinate calculator factor, which creates an appropriate coordinate calculator for the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisParams"/> passed in
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculatorFactory.New(Ecng.Xaml.Charting.Visuals.Axes.AxisParams)">
            <summary>
            Creates a new <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/>
            </summary>
            <param name="arg">The <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisParams"/> instance containing axis data</param>
            <returns>The Coordinate calculator instance</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.CoordinateCalculatorFactory.New(Ecng.Xaml.Charting.Visuals.Axes.AxisParams)">
            <summary>
            Creates a new <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1" />
            </summary>
            <param name="arg">The <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisParams" /> instance containing axis data</param>
            <returns>
            The Coordinate calculator instance
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.Numerics.CoordinateProviders.CategoryTickCoordinatesProvider">
            <summary>
            Provides methods to convert arrays of major and minor ticks (data values) into pixel coordinates for the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.CoordinateProviders.CategoryTickCoordinatesProvider.GetTickCoordinates(System.Double[],System.Double[])">
            <summary>
            Converts arrays of major and minor ticks (data values) into <see cref="T:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates" /> structure containing pixel coordinates.
            </summary>
            <param name="minorTicks">The minor ticks, cast to double.</param>
            <param name="majorTicks">The major ticks, cast to double.</param>
            <returns>
            The <see cref="T:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates" /> structure containing pixel coordinates.
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Numerics.CoordinateProviders.ITickCoordinatesProvider">
            <summary>
            Provides the interface to a Tick Coordinate Provider, which converts arrays of major and minor ticks (data values) into pixel coordinates.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.CoordinateProviders.ITickCoordinatesProvider.Init(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Called when the <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateProviders.ITickCoordinatesProvider"/> is initialized as it is attached to the parent axis, with the parent axis instance
            </summary>
            <param name="parentAxis">The parent <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> instance</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.CoordinateProviders.ITickCoordinatesProvider.GetTickCoordinates(System.Double[],System.Double[])">
            <summary>
            Converts arrays of major and minor ticks (data values) into <see cref="T:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates"/> structure containing pixel coordinates
            </summary>
            <param name="minorTicks">The minor ticks, cast to double</param>
            <param name="majorTicks">The major ticks, cast to double</param>
            <returns>The <see cref="T:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates"/> structure containing pixel coordinates</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.DefaultTickCoordinatesProvider">
            <summary>
            Provides methods to convert arrays of major and minor ticks (data values) into pixel coordinates.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.DefaultTickCoordinatesProvider.GetTickCoordinates(System.Double[],System.Double[])">
            <summary>
            Converts arrays of major and minor ticks (data values) into <see cref="T:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates"/> structure containing pixel coordinates.
            </summary>
            <param name="minorTicks">The minor ticks, cast to double.</param>
            <param name="majorTicks">The major ticks, cast to double.</param>
            <returns>The <see cref="T:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates"/> structure containing pixel coordinates.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.DefaultTickCoordinatesProvider.IsInBounds(System.Double)">
            <summary>
            Checks whether GridLinesPanel contains passed coordinate
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.StaticTickCoordinatesProvider">
            <summary>
            Provides methods to convert arrays of major and minor ticks (data values) into pixel coordinates.
            Used when the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> is in static mode(<see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.IsStaticAxis"/>==<value>true</value>).
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.StaticTickCoordinatesProvider.GetTickCoordinates(System.Double[],System.Double[])">
            <summary>
            Converts arrays of major and minor ticks (data values) into <see cref="T:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates" /> structure containing pixel coordinates.
            </summary>
            <param name="minorTicks">The minor ticks, cast to double.</param>
            <param name="majorTicks">The major ticks, cast to double.</param>
            <returns>
            The <see cref="T:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates" /> structure containing pixel coordinates.
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates">
            <summary>
            A structure contaning tick coordinates. Used internally when drawing tick marks and grid lines.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates.#ctor(System.Double[],System.Double[],System.Single[],System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates"/> struct.
            </summary>
            <param name="minorTicks">The minor ticks represented in chart coordinates.</param>
            <param name="majorTicks">The major ticks represented in chart coordinates.</param>
            <param name="minorCoords">The minor ticks represented in pixel coordinates.</param>
            <param name="majorCoords">The major ticks represented in pixel coordinates.</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates.IsEmpty">
            <summary>
            Returns a value indicating whether there are any tick coordinates.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates.MinorTicks">
            <summary>
            Returns minor ticks in chart coordinates.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates.MajorTicks">
            <summary>
            Returns major ticks in chart coordinates.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates.MinorTickCoordinates">
            <summary>
            Returns major ticks in pixels.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates.MajorTickCoordinates">
            <summary>
            Returns major ticks in pixels.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.NiceLongScale.NiceNum(System.Int64,System.Boolean)">
            <summary>
            Returns a "nice" number approximately equal to the range bounds. 
            Rounds the number if round = true. 
            Takes the ceiling if round = false
            </summary>
            <param name="range"></param>
            <param name="round"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.PolarDeltaCalculator.GetDeltaFromRange(System.Double,System.Double,System.Int32,System.UInt32)">
            <summary>
            Given an absolute Axis Min and Max, returns a TickRange instance containing sensible MinorDelta and MajorDelta values
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.ArrayOperations.Maximum``1(System.Collections.Generic.IEnumerable{``0})">
            <returns>T.MinValue if there are no elements in input. This is required for joining ranges of dataseries</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.ArrayOperations.Minimum``1(System.Collections.Generic.IEnumerable{``0})">
            <returns>T.MaxValue if there are no elements in input. This is required for joining ranges of dataseries</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.ArrayOperations.MinMax``1(System.Collections.Generic.IEnumerable{``0},``0@,``0@)">
            <summary>
            Fast generic computation of the Min and Max of an enumerable 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The input enumerable.</param>
            <param name="min">T.MaxValue if there are no elements in input. This is required for joining ranges of dataseries</param>
            <param name="max">T.MinValue if there are no elements in input. This is required for joining ranges of dataseries</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.ArrayOperations.Minimum``1(``0[],System.Int32,System.Int32)">
            <returns>T.MaxValue if there are no elements in input. This is required for joining ranges of dataseries</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.ArrayOperations.Minimum``1(``0[],System.Int32,System.Int32,System.Func{``0,``0,``0})">
            <returns>T.MaxValue if there are no elements in input. This is required for joining ranges of dataseries</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.ArrayOperations.Maximum``1(``0[],System.Int32,System.Int32)">
            <returns>T.MinValue if there are no elements in input. This is required for joining ranges of dataseries</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.ArrayOperations.MinMax``1(``0[],System.Int32,System.Int32,``0@,``0@)">
            <summary>
            Fast generic computation of the Min and Max of an array 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The input array.</param>
            <param name="startIndex">The start index.</param>
            <param name="count">The count.</param>
            <param name="min">T.MaxValue if there are no elements in input. This is required for joining ranges of dataseries</param>
            <param name="max">T.MinValue if there are no elements in input. This is required for joining ranges of dataseries</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.ArrayOperations.IsSortedAscending``1(``0[],System.Int32,System.Int32)">
            <summary>
            Fast generic computation of whether an array is sorted
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.ArrayOperations.IsSortedAscending``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Fast generic computation of whether a list is sorted
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.ArrayOperations.IsEvenlySpaced``1(``0[],System.Int32,System.Int32,System.Double,System.Double@)">
            <summary>
            Fast generic computation of whether an array is evenly spaced
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.ArrayOperations.IsEvenlySpaced``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Double,System.Double@)">
            <summary>
            Fast generic computation of whether an array is evenly spaced
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Numerics.GenericMath.ArrayOperations.IGenericArrayHelper`1">
            <summary>Interface to fast autogenerated generic Min Max helpers</summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Numerics.GenericMath.IMath`1">
            <summary>
            Defines the interface to a generic math helper
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Ecng.Xaml.Charting.Numerics.GenericMath.IMath`1.MinValue">
            <summary>
            Gets the MinValue for T. for DateTime it returns DateTime.MinValue (it has .Ticks = 0)
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Numerics.GenericMath.IMath`1.MaxValue">
            <summary>
            Gets the MaxValue for T.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Numerics.GenericMath.IMath`1.ZeroValue">
            <summary>
            Gets the ZeroValue for T. for DateTime it returns DateTime.MinValue (it has .Ticks = 0)
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.IMath`1.Max(`0,`0)">
            <summary>
            Returns the Max of A and B
            </summary>        
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.IMath`1.Min(`0,`0)">
            <summary>
            Returns the Min of A and B
            </summary>        
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.IMath`1.MinGreaterThan(`0,`0,`0)">
            <summary>
            Returns the Min of A and B greater than a Floor
            </summary>        
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.IMath`1.IsNaN(`0)">
            <summary>
            Returns if T is NaN. Only valid for Float, Double types. For all other types, always returns false
            </summary>        
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.IMath`1.Subtract(`0,`0)">
            <summary>
            Subtracts a - b. For DateTime it returns a new DateTime with .Ticks = a.Ticks - b.Ticks
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.IMath`1.Abs(`0)">
            <summary>
            Get the Absolute value of (a)
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.IMath`1.ToDouble(`0)">
            <summary>
            Converts to the equivalent value as a double
            </summary>        
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.IMath`1.Mult(`0,`0)">
            <summary>
            Multiplies lhs * rhs
            </summary>        
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.IMath`1.Mult(`0,System.Double)">
            <summary>
            Multiplies lhs * rhs
            </summary>        
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.IMath`1.Add(`0,`0)">
            <summary>
            Adds lhs + rhs. for DateTime it returns a new DateTime with .Ticks = lhs.Ticks + rhs.Ticks
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.IMath`1.Inc(`0@)">
            <summary>
                Returns T++
            for DateTime it increments .Ticks
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.GenericMath.IMath`1.Dec(`0@)">
            <summary>
                Returns T--
            for DateTime it decrements .Ticks
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Numerics.IDeltaCalculator">
            <summary>
            Provides an interface for Tick calculators
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.IDeltaCalculator.GetDeltaFromRange(System.IComparable,System.IComparable,System.Int32,System.UInt32)">
            <summary>
            Given an absolute Axis Min and Max, returns a TickRange instance containing sensible MinorDelta and MajorDelta values
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Numerics.IDateDeltaCalculator">
            <summary>
            Defines the interface for DateTime or TimeSpan Tick calculators
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.IDateDeltaCalculator.GetDeltaFromRange(System.IComparable,System.IComparable,System.Int32,System.UInt32)">
            <summary>
            Given an absolute Axis Min and Max, returns a TickRange instance containing sensible MinorDelta and MajorDelta values
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.NumericDeltaCalculatorBase.GetDeltaFromRange(System.Double,System.Double,System.Int32,System.UInt32)">
            <summary>
            Given an absolute Axis Min and Max, returns a TickRange instance containing sensible MinorDelta and MajorDelta values
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Numerics.IPointResampler_Old.Resolution">
            <summary>
            Gets the current resolution. This must be greater than equal to 2 and the higher the number, the larger the reduced datasets
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Numerics.IPointResampler_Old.ResamplingMode">
            <summary>
            Gets the current Resampling Mode.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.IPointResampler_Old.RequiresReduction(Ecng.Xaml.Charting.IndexRange,System.Int32)">
            <summary>
            Returns true if a dataset with the specified index range requires point reduction on the given viewport size
            </summary>
            <param name="pointIndices"></param>
            <param name="viewportWidth"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.IPointResampler_Old.WithMode(Ecng.Xaml.Charting.Numerics.ResamplingMode)">
            <summary>
            Sets a new ResamplingMode on the IPointsResampler
            </summary>
            <param name="newMode"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.IPointResampler_Old.ReducePoints(System.Collections.IList,System.Int32)">
            <summary>
            Reduces the input points using the current ResamplingMode and Resolution
            </summary>
            <param name="inputPoints"></param>
            <param name="viewportWidth"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.IPointResampler_Old.ReducePoints(System.Collections.IList,Ecng.Xaml.Charting.IndexRange,System.Int32)">
            <summary>
            Reduces the input points using the current ResamplingMode and Resolution
            </summary>
            <param name="inputPoints"></param>
            <param name="pointIndices"></param>
            <param name="viewportWidth"></param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Numerics.ResamplingMode">
            <summary>
            Defines the ResamplingMode used by a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Ecng.Xaml.Charting.Numerics.ResamplingMode.None">
            <summary>
            Do not use resampling when redrawing a series
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Numerics.ResamplingMode.MinMax">
            <summary>
            Assumes Evenly-spaced data (TimeSeries). Resample by taking the min-max of oversampled data. This results in the most visually accurate resampling, with the most performant rendering
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Numerics.ResamplingMode.Mid">
            <summary>
            Assumes Evenly-spaced data (TimeSeries). Resample by taking the median point of oversampled data
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Numerics.ResamplingMode.Max">
            <summary>
            Assumes Evenly-spaced data (TimeSeries). Resample by taking the maximum point of oversampled data
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Numerics.ResamplingMode.Min">
            <summary>
            Assumes Evenly-spaced data (TimeSeries). Resample by taking the minimum point of oversampled data
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Numerics.ResamplingMode.Nyquist">
            <summary>
            Assumes Evenly-spaced data (TimeSeries). Resample by taking the minimum data-set to accurately represent the original points without incurring aliasing or other artifacts
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Numerics.ResamplingMode.Cluster2D">
            <summary>
            Groups close points in 2D space
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Numerics.ResamplingMode.MinMaxWithUnevenSpacing">
            <summary>
            Does not assume Evenly-spaced data (TimeSeries). Resample by taking the min-max of oversampled data. This results in the most visually accurate resampling, with the most performant rendering
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Numerics.ResamplingMode.Auto">
            <summary>
            Auto-detect the most suitable resampling algorithm (Fastest, plus most accurate) for the type of data appended
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.NiceDoubleScale.NiceNum(System.Double,System.Boolean)">
            <summary>
            Returns a "nice" number approximately equal to the range bounds. 
            Rounds the number if round = true. 
            Takes the ceiling if round = false
            </summary>
            <param name="range"></param>
            <param name="round"></param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Numerics.IPointResampler">
            <summary>
            Provides the interface to a Pointresampler - an algorithm which is able to reduce the number of data-points in a series for rendering fast, while maintaining visual accuracy of the series 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.IPointResampler.Execute(Ecng.Xaml.Charting.Numerics.ResamplingMode,Ecng.Xaml.Charting.IndexRange,System.Int32,System.Boolean,System.Boolean,System.Collections.IList,System.Collections.IList,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Ecng.Xaml.Charting.IRange)">
            <summary>
            Transforms the input X and Y series into an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/>, a resampled, reduced dataset for rendering on screen
            </summary>
            <param name="resamplingMode">The <see cref="T:Ecng.Xaml.Charting.Numerics.ResamplingMode"/> to use</param>
            <param name="pointRange">The indices of the X and Y input data to use (clips by indices)</param>
            <param name="viewportWidth">The current width of the Viewport</param>
            <param name="isFifo">If the data is FIFO (Circular buffered) data</param>
            <param name="isCategoryAxis">If the XAxis is a category axis</param>
            <param name="xColumn">The input X-Value Series</param>
            <param name="yColumn">The input Y-Value Series</param>
            <param name="dataIsSorted">If the data is sorted in the X-Direction</param>
            <param name="dataIsEvenlySpaced">If the data is Evenly Spaced in X</param>
            <param name="dataIsDisplayedAs2d">If the data is presented as a scatter, e.g. not line</param>
            <param name="visibleXRange">The VisibleRange of the XAxis at the time of resampling</param>
            <returns>The transformed dataset for rendering</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.PointResamplerBase.ReducePointUnevenImpl(Ecng.Xaml.Charting.Model.DataSeries.UncheckedList{System.Double},Ecng.Xaml.Charting.Model.DataSeries.UncheckedList{System.Double},Ecng.Xaml.Charting.Model.DataSeries.Point2DSeries,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            This needs to be implemented for each supported pair of TX,TY.
            Maybe use T4 templates?
            For optimal performance, this method should be implemented in C++/ASM and not just the 
            GetMinMaxValuesForPixel method (this avoid per-pixel unmanaged call transitions). 
            However, that would also require that reducedPoints is passed as pre-allocated buffer 
            and not as a Point2DSeries. NaN handling makes it a bit difficult to 
            pre-allocate though (since NaNs can cause multiple lines per pixel).  
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.PointResamplerBase.ReducePointUnevenImpl``2(Ecng.Xaml.Charting.Model.DataSeries.UncheckedList{``0},Ecng.Xaml.Charting.Model.DataSeries.UncheckedList{``1},Ecng.Xaml.Charting.Model.DataSeries.Point2DSeries,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Generic implementation where an unchecked list has been retrieved for x- and y-values.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Numerics.PointResamplers.IPointResamplerFactory">
            <summary>
            A Factory class to get PointResamplers, which are used to reduce datasets to minimal sets for efficient on-screen rendering
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.PointResamplers.IPointResamplerFactory.GetPointResampler``2">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.Numerics.IPointResampler"/> instance to handle this combination of Tx and Ty generic type parameters
            </summary>
            <typeparam name="TX"></typeparam>
            <typeparam name="TY"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Numerics.PointResamplers.PointResamplerFactory">
            <summary>
            Instantiates <see cref="T:Ecng.Xaml.Charting.Numerics.IPointResampler"/> instances
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.PointResamplers.PointResamplerFactory.GetPointResampler``2">
            <summary>
            Instantiates a <see cref="T:Ecng.Xaml.Charting.Numerics.IPointResampler"/> instance for the combination of <typeparamref name="TX"/> and <typeparamref name="TY"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.PointResampler_Old.#ctor(System.Int32,Ecng.Xaml.Charting.Numerics.ResamplingMode)">
            <summary>
            Creates a new PointResampler instance
            </summary>
            <param name="resolution">The resolution constant, must be 2 or more. The higher resolution means larger datasets after resampling (which results in cleaner but slower rendering)</param>
            <param name="resamplingMode"></param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Numerics.ProviderBase">
            <summary>
            A base class for TickCoordinate Providers and LabelProviders. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Numerics.ProviderBase.ParentAxis">
            <summary>
            Gets the axis current provider instance was initialized with
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.ProviderBase.Init(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Called when the provider instance is initialized as it is attached to the parent axis, with the parent axis instance
            </summary>
            <param name="parentAxis">The parent <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> instance</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Numerics.TimeSpanDeltaCalculatorBase.GetDeltaFromRange(System.IComparable,System.IComparable,System.Int32,System.UInt32)">
            <summary>
            Given an absolute Axis Min and Max, returns a TickRange instance containing sensible MinorDelta and MajorDelta values
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.IChartSeriesViewModel">
            <summary>
            Defines the interface to a <see cref="T:Ecng.Xaml.Charting.ChartSeriesViewModel"/>, a viewmodel to a single data-render series pair, which is used in the new <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> Mvvm API. 
            For usage, see the SeriesSource property and the Mvvm examples in the examples suite. You may bind SeriesSource to a collection of <see cref="T:Ecng.Xaml.Charting.IChartSeriesViewModel"/> 
            and Ultrachart will automatically associate the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> and <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2"/> instances
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <remarks>DataSeries are assigned to the RenderableSeries via the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.DataSeries"/> property. Any time a DataSeries is appended to, the
            parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> will be redrawn</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.IChartSeriesViewModel.DataSeries">
            <summary>
            Gets or sets the DataSeries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.IChartSeriesViewModel.RenderSeries">
            <summary>
            Gets or sets the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> paired with the data
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartSeriesViewModel">
            <summary>
            A viewmodel to a single data-render series pair, used in the new <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> Mvvm API. 
            For usage, see the SeriesSource property and the Mvvm examples in the examples suite. You may bind SeriesSource to a collection of <see cref="T:Ecng.Xaml.Charting.IChartSeriesViewModel"/> 
            and Ultrachart will automatically associated the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> and <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> instances
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyyDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IOhlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.OhlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IHlcDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.HlcDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyzDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <remarks>DataSeries are assigned to the RenderableSeries via the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.DataSeries"/> property. Any time a DataSeries is appended to, the
            parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> will be redrawn</remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartSeriesViewModel.#ctor(Ecng.Xaml.Charting.Model.DataSeries.IDataSeries,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartSeriesViewModel" /> class.
            </summary>
            <param name="dataSeries">The data series.</param>
            <param name="renderSeries">The render series paired with the data.</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartSeriesViewModel.DataSeries">
            <summary>
            Gets or sets the DataSeries
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartSeriesViewModel.RenderSeries">
            <summary>
            Gets or sets the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> paired with the data
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ActionCommand`1">
            <summary>
            Provides an ICommand derived class allowing delegates to be invokved directly on the view model 
            </summary>
            <typeparam name="T">The Type of the command parameter</typeparam>
        </member>
        <member name="M:Ecng.Xaml.Charting.ActionCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ActionCommand`1"/> class.
            </summary>
            <param name="execute">The execute delegate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ActionCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ActionCommand`1"/> class.
            </summary>
            <param name="execute">The execute delegate.</param>
            <param name="canExecute">The can execute predicate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ActionCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="E:Ecng.Xaml.Charting.ActionCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ActionCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChanged event
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ActionCommand`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.ActionCommand">
            <summary>
            Provides an ICommand derived class allowing delegates to be invokved directly on the view model 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ActionCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ActionCommand"/> class.
            </summary>
            <param name="execute">The execute delegate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ActionCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ActionCommand"/> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute delegate.</param>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.BooleanToVisibilityConverter">
            <summary>
            Converts to Visibility.Collapsed if input value is null by default. Can be used with "Inverse" flag
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.CollapseIfNullOrEmptyStringConverter">
            <summary>
            Converts to Visibility.Collapsed if input string is null or empty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.CollapseIfNullOrEmptyStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.CollapseIfNullOrEmptyStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.ColorToBrushConverter">
            <summary>
            Converts from a Color to SolidColorBrush
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ColorToBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ColorToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.InverseOrientationConverter">
            <summary>
            Converts from Axis <see cref="T:System.Windows.Controls.Orientation"/> to its inverse, e.g. Horizontal becomes Vertical and vice versa
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.InverseOrientationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.InverseOrientationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.NullToVisibilityConverter">
            <summary>
            Converts to Visibility.Collapsed if input value is null by default. Can be used with "Inverse" flag
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.NullToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.NullToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.OrientationToAxisLabelRotationConverter">
            <summary>
            Converts from Axis <see cref="T:System.Windows.Controls.Orientation"/> to label rotation angle
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.OrientationToAxisLabelRotationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.OrientationToAxisLabelRotationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.StringToAnnotationCoordinateConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.StringToAnnotationCoordinateConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the intended conversion type of the converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.IEventAggregator">
            <summary>
            Defines the interface to a lightweight Event Aggregator used within Ultrachart for inter-component communication
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.LoggedMessageBase">
            <summary>
            Base class for automatically logged Event Aggregator messages
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.LoggedMessageBase.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the MessageBase class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.InvalidateUltrachartMessage">
            <summary>
            When published, causes the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to queue up an asynchronous redraw 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.InvalidateUltrachartMessage.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the MessageBase class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.ZoomExtentsMessage">
            <summary>
            When published, causes the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to zoom to extents and redraw
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ZoomExtentsMessage.ZoomYOnly">
            <summary>
            If set to <c>true</c> zooms in the Y-direction only.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ZoomExtentsMessage.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the MessageBase class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ZoomExtentsMessage.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ZoomExtentsMessage" /> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="zoomYOnly">if set to <c>true</c> zooms in the Y-direction only.</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.UltrachartResizedMessage">
            <summary>
            Published by <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> after the chart surface resizes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartResizedMessage.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the MessageBase class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.UltrachartRenderedMessage">
            <summary>
            Published by <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> immediately before the end of a render pass
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartRenderedMessage.#ctor(System.Object,Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.UltrachartRenderedMessage" /> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="renderContext">The render context.</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.UltrachartRenderedMessage.BitmapContext">
            <summary>
            OBSOLETE
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.UltrachartRenderedMessage.RenderContext">
            <summary>
            Gets the RenderContext
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.AxisCollection">
            <summary>
            Contains a collection of Axes and allows getting of axis by Id
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.AxisCollection"/> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisCollection.#ctor(System.Collections.Generic.IEnumerable{Ecng.Xaml.Charting.Visuals.Axes.IAxis})">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.AxisCollection"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.AxisCollection.HasPrimaryAxis">
            <summary>
            Returns true if any of the Axes in the collection have <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsPrimaryAxis"/> set to true
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.AxisCollection.PrimaryAxis">
            <summary>
            Gets the primary axis in the collection. This is the first that has <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsPrimaryAxis"/> set to true, or null if none exists. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.AxisCollection.Default">
            <summary>
            Gets the default axis, which is equal to the axis with the <see cref="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DefaultAxisId"/>, else null
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisCollection.GetAxisById(System.String,System.Boolean)">
            <summary>
            Gets the axis specified by Id, else null
            </summary>
            <param name="axisId">The axis identifier.</param>
            <param name="assertAxisExists">if set to <c>true</c> assert and throw if the axis does not exist.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisCollection.GetSchema">
            <summary>
            Returns an XmlSchema that describes the XML representation of the object that is produced by the WriteXml method and consumed by the ReadXml method
            </summary>
            <remarks>
            This method is reserved by <see cref="T:System.Xml.Serialization.IXmlSerializable"/> and should not be used
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisCollection.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates <see cref="T:Ecng.Xaml.Charting.AxisCollection"/> from its XML representation.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisCollection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts <see cref="T:Ecng.Xaml.Charting.AxisCollection"/> into its XML representation.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Ecng.Xaml.Charting.BindableObject">
            <summary>
            Provides a base-type for classes that need to raise <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> events
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.BindableObject._propertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.BindableObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event
            </summary>
            <param name="propertyName">Name of the property.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.BindableObject.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">Old value of the property.</param>
            <param name="newValue">New value of the property.</param>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.ChartDataObject">
            <summary>
            Provides a ViewModel containing info about chart series, which can be bound to to create Rollover or legends
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartDataObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartDataObject"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ChartDataObject.#ctor(System.Collections.Generic.IEnumerable{Ecng.Xaml.Charting.SeriesInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ChartDataObject"/> class.
            </summary>
            <param name="seriesInfos">The series infos.</param>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartDataObject.ShowVisibilityCheckboxes">
            <summary>
            Workaround - used by UltrachartLegend items to bind to UltrachartLegend.ShowVisibilityCheckboxes. This property is set as a proxy 
            by the UltrachartLegend control itself and data-bound in the themes
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ChartDataObject.SeriesInfo">
            <summary>
            Gets or sets a collection of <see cref="P:Ecng.Xaml.Charting.ChartDataObject.SeriesInfo"/> instances
            </summary>
            <value>The series info.</value>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.XySeriesInfo">
            <summary>
            Provides a ViewModel containing info about an Xy series, such as name, x, y values, color
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.XySeriesInfo.#ctor(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.XySeriesInfo" /> class.
            </summary>
            <param name="rSeries">The renderable series.</param>
            <param name="hitTestInfo"> </param>
        </member>
        <member name="T:Ecng.Xaml.Charting.BoxPlotSeriesInfo">
            <summary>
            Provides a ViewModel containing info about an BoxPlot series, such as name, open high low close values, color
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.BoxPlotSeriesInfo.#ctor(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.BoxPlotSeriesInfo" /> class.
            </summary>
            <param name="rSeries">The RenderableSeries instance that this <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> is bound to.</param>
            <param name="hitTestInfo"> </param>
        </member>
        <member name="P:Ecng.Xaml.Charting.BoxPlotSeriesInfo.MinimumValue">
            <summary>
            Gets or sets the Minimum value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.BoxPlotSeriesInfo.FormattedMinimumValue">
            <summary>
            Gets a formatted MinimumValue.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.BoxPlotSeriesInfo.MaximumValue">
            <summary>
            Gets or sets the Maximum value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.BoxPlotSeriesInfo.FormattedMaximumValue">
            <summary>
            Gets a formatted MaximumValue.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.BoxPlotSeriesInfo.MedianValue">
            <summary>
            Gets or sets the Median value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.BoxPlotSeriesInfo.FormattedMedianValue">
            <summary>
            Gets a formatted MedianValue.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.BoxPlotSeriesInfo.LowerQuartileValue">
            <summary>
            Gets or sets the LowerQuartile value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.BoxPlotSeriesInfo.FormattedLowerQuartileValue">
            <summary>
            Gets a formatted LowerQuartileValue.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.BoxPlotSeriesInfo.UpperQuartileValue">
            <summary>
            Gets or sets the UpperQuartile value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.BoxPlotSeriesInfo.FormattedUpperQuartileValue">
            <summary>
            Gets a formatted UpperQuartileValue.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.HlcSeriesInfo">
            <summary>
            Provides a ViewModel containing info about an HLC series, such as name, high low values, color
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.HlcSeriesInfo.#ctor(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.OhlcSeriesInfo" /> class.
            </summary>
            <param name="rSeries">The RenderableSeries instance that this <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> is bound to.</param>
            <param name="hitTestInfo"> </param>
        </member>
        <member name="P:Ecng.Xaml.Charting.HlcSeriesInfo.HighValue">
            <summary>
            Gets or sets the High value.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.HlcSeriesInfo.FormattedHighValue">
            <summary>
            Gets a formatted HighValue.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.HlcSeriesInfo.LowValue">
            <summary>
            Gets or sets the Low value.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.HlcSeriesInfo.FormattedLowValue">
            <summary>
            Gets a formatted LowValue.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.HlcSeriesInfo.CloseValue">
            <summary>
            Gets or sets the Close value.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.HlcSeriesInfo.FormattedCloseValue">
            <summary>
            Gets a formatted CloseValue.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.OhlcSeriesInfo">
            <summary>
            Provides a ViewModel containing info about an OHLC series, such as name, open high low close values, color
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.OhlcSeriesInfo.#ctor(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.OhlcSeriesInfo" /> class.
            </summary>
            <param name="rSeries">The RenderableSeries instance that this <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> is bound to.</param>
            <param name="hitTestInfo"> </param>
        </member>
        <member name="P:Ecng.Xaml.Charting.OhlcSeriesInfo.OpenValue">
            <summary>
            Gets or sets the Open value.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.OhlcSeriesInfo.FormattedOpenValue">
            <summary>
            Gets a formatted OpenValue.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.BandSeriesInfo">
            <summary>
            Provides a ViewModel containing info about an Xyy series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.BandSeriesInfo.#ctor(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.BandSeriesInfo" /> class.
            </summary>
            <param name="rSeries">The <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/>.</param>
            <param name="hitTestInfo"> </param>
        </member>
        <member name="P:Ecng.Xaml.Charting.BandSeriesInfo.IsFirstSeries">
            <summary>
            Gets or sets value indicates whether this is Up or Down line of the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.BandSeriesInfo.Y1Value">
            <summary>
            Gets or sets the Y1 value, which is used in the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries"/>.
            </summary>
            <value>The value.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.BandSeriesInfo.FormattedY1Value">
            <summary>
            Gets a formatted Y1Value.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.BandSeriesInfo.Xy1Coordinate">
            <summary>
            Gets or sets the xy coordinate in pixels of the data-point being inspected (for <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries"/> series)
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.XyzSeriesInfo">
            <summary>
            Provides a ViewModel containing info about an Xyz series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.XyzSeriesInfo.#ctor(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.BandSeriesInfo" /> class.
            </summary>
            <param name="rSeries">The <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/>.</param>
            <param name="hitTestInfo"> </param>
        </member>
        <member name="P:Ecng.Xaml.Charting.XyzSeriesInfo.ZValue">
            <summary>
            Gets or sets the Z value, which is returned as hit-test result of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/>.
            </summary>
            <value>The value</value>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.HeatmapSeriesInfo">
            <summary>
            Provides a ViewModel containing info about a Heatmap series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.HeatmapSeriesInfo.#ctor(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.HeatmapSeriesInfo" /> class.
            </summary>
            <param name="rSeries">The <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/>.</param>
            <param name="hitTestInfo"> </param>
        </member>
        <member name="T:Ecng.Xaml.Charting.XyStackedSeriesInfo">
            <summary>
            Provides a ViewModel containing info about stacked Xy series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.XyStackedSeriesInfo.#ctor(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.BandSeriesInfo" /> class.
            </summary>
            <param name="rSeries">The <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/>.</param>
            <param name="hitTestInfo"> </param>
        </member>
        <member name="P:Ecng.Xaml.Charting.XyStackedSeriesInfo.AccumulatedValue">
            <summary>
            Gets or sets the accumulated value of all stacked series, which is returned as hit-test result of the stacked <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyDataSeries`2"/>.
            </summary>
            <value>The value</value>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.OneHundredPercentStackedSeriesInfo">
            <summary>
            Provides a ViewModel containing info about one hundred percent stacked Xy series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.OneHundredPercentStackedSeriesInfo.#ctor(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.OneHundredPercentStackedSeriesInfo" /> class.
            </summary>
            <param name="rSeries">The <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/>.</param>
            <param name="hitTestInfo"> </param>
        </member>
        <member name="P:Ecng.Xaml.Charting.OneHundredPercentStackedSeriesInfo.Percentage">
            <summary>
            Gets or sets the DataSeriesIndex a the hit-test site
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.SeriesInfo">
            <summary>
            <para>
            Provides a ViewModel containing info about a series, such as name, value, color. <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> types are
            produced by the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier"/>, <see cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier"/> and <see cref="T:Ecng.Xaml.Charting.ChartModifiers.LegendModifier"/>. They are
            consumed by the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartLegend"/> and may be consumed by a custom <see cref="T:System.Windows.Controls.ItemsControl"/> binding to collection
            of <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/>. 
            </para>
            <para>
            See the examples suite, specifically RolloverModifier, SciTrader and Legends examples for more information
            </para>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.SeriesInfo.#ctor(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.SeriesInfo.#ctor(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> class.
            </summary>
            <param name="rSeries">The <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> that this SeriesInfo represents.</param>
            <param name="hitTestInfo"></param>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfo.IsVisible">
            <summary>
            Gets or sets whether the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> that this <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> represents is visible or not. 
            NOTE: Setting this value will show or hide the associated <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> and may be data-bound to
            </summary>
            <value>
            <c>true</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfo.DataSeriesType">
            <summary>
            Gets or sets the type of the data series.
            </summary>
            <value>
            The type of the data series.
            </value>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfo.SeriesColor">
            <summary>
            Gets or sets the color of the series.
            </summary>
            <value>The color of the series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfo.SeriesName">
            <summary>
            Gets or sets the name of the series.
            </summary>
            <value>The name of the series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfo.Value">
            <summary>
            Gets or sets the Y-value.
            </summary>
            <value>The value.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfo.YValue">
            <summary>
            Gets or sets the Y-value.
            </summary>
            <value>The value.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfo.FormattedYValue">
            <summary>
            Gets a formatted YValue.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfo.XValue">
            <summary>
            Gets or sets the X-value.
            </summary>
            <value>The value.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfo.FormattedXValue">
            <summary>
            Gets a formatted XValue.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfo.XyCoordinate">
            <summary>
            Gets or sets the xy coordinate in pixels of the data-point being inspected
            </summary>        
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfo.IsHit">
            <summary>
            Get or sets whether the HitTest operation was a hit or not
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfo.DataSeriesIndex">
            <summary>
            Gets or sets the DataSeriesIndex a the hit-test site
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.SeriesInfo.RenderableSeries">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> instance which this <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> wraps
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.SeriesInfo.GetYCursorFormattedValue(System.IComparable)">
            <summary>
            Returns a value formatted using Y axis format for cursors
            </summary>
            <param name="value">The value to format</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.SeriesInfo.GetXCursorFormattedValue(System.IComparable)">
            <summary>
            Returns a value formatted using X axis format for cursors
            </summary>
            <param name="value">The value to format</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.SeriesInfo.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.FloatRange">
            <summary>
            Defines a range of type <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.FloatRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.FloatRange"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.FloatRange.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.FloatRange"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.FloatRange.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.FloatRange.Diff">
            <summary>
            Gets the difference (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.FloatRange.IsZero">
            <summary>
            Gets whether the range is Zero, where Max equals Min
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.FloatRange.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Ecng.Xaml.Charting.DoubleRange"/>, which are used internally for calculations
            </summary>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Ecng.Xaml.Charting.DateRange"/> instances, returns a new <see cref="T:Ecng.Xaml.Charting.DoubleRange"/> with the Min and Max Ticks</example>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.FloatRange.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.FloatRange.SetMinMax(System.Double,System.Double,Ecng.Xaml.Charting.IRange{System.Single})">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange"/> with a max range to clip values to, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range, which is used to clip values.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.FloatRange.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.FloatRange.ClipTo(Ecng.Xaml.Charting.IRange{System.Single})">
            <summary>
            Clips the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.IndexRange">
            <summary>
            Defines a range used to specify array indices to another series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.IndexRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.IndexRange"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.IndexRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.IndexRange"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.IndexRange.IsDefined">
            <summary>
            Gets whether this Range is defined
            </summary>
            <example>Min and Max are not equal to double.NaN and are greater or equal to zero</example>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.IndexRange.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.IndexRange.Diff">
            <summary>
            Gets the Diff (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.IndexRange.IsZero">
            <summary>
            Gets whether the range is Zero, where Max equals Min
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.IndexRange.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Ecng.Xaml.Charting.DoubleRange"/>, which are used internally for calculations
            </summary>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Ecng.Xaml.Charting.DateRange"/> instances, returns a new <see cref="T:Ecng.Xaml.Charting.DoubleRange"/> with the Min and Max Ticks</example>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.IndexRange.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange`1"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.IndexRange.SetMinMax(System.Double,System.Double,Ecng.Xaml.Charting.IRange{System.Int32})">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange`1"/> with a max range to clip values to, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range, which is used to clip values.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.IndexRange.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.IndexRange.ClipTo(Ecng.Xaml.Charting.IRange{System.Int32})">
            <summary>
            Clips the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Int32AxisDelta">
            <summary>
            Defines an Int32 Delta, which provides Major and Minor deltas as used in <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Int32AxisDelta.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Int32AxisDelta"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Int32AxisDelta.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Int32AxisDelta"/> class.
            </summary>
            <param name="minorDelta">The minor delta.</param>
            <param name="majorDelta">The major delta.</param>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Int32AxisDelta.MajorDelta">
            <summary>
            Gets or sets the major delta.
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Int32AxisDelta.MinorDelta">
            <summary>
            Gets or sets the minor delta.
            </summary>
            <value>The minor delta.</value>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Int32AxisDelta.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Int32AxisDelta.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Int32AxisDelta.Equals(Ecng.Xaml.Charting.Int32AxisDelta)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Int32AxisDelta.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Int32AxisDelta.op_Equality(Ecng.Xaml.Charting.Int32AxisDelta,Ecng.Xaml.Charting.Int32AxisDelta)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Int32AxisDelta.op_Inequality(Ecng.Xaml.Charting.Int32AxisDelta,Ecng.Xaml.Charting.Int32AxisDelta)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Int32AxisDelta.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.Int64Range">
            <summary>
            Defines a Range of type Int64
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Int64Range.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.IntegerRange"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Int64Range.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.IntegerRange"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Int64Range.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Int64Range.Diff">
            <summary>
            Gets the Diff (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Int64Range.IsZero">
            <summary>
            Gets whether the range is Zero, where Max equals Min
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Int64Range.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Ecng.Xaml.Charting.DoubleRange"/>, which are used internally for calculations
            </summary>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Ecng.Xaml.Charting.DateRange"/> instances, returns a new <see cref="T:Ecng.Xaml.Charting.DoubleRange"/> with the Min and Max Ticks</example>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Int64Range.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange`1"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Int64Range.SetMinMax(System.Double,System.Double,Ecng.Xaml.Charting.IRange{System.Int64})">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange`1"/> with a max range to clip values to, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range, which is used to clip values.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Int64Range.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Int64Range.ClipTo(Ecng.Xaml.Charting.IRange{System.Int64})">
            <summary>
            Clips the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.IntegerRange">
            <summary>
            Defines a Range of type Integer
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.IntegerRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.IntegerRange"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.IntegerRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.IntegerRange"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.IntegerRange.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.IntegerRange.Diff">
            <summary>
            Gets the Diff (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.IntegerRange.IsZero">
            <summary>
            Gets whether the range is Zero, where Max equals Min
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.IntegerRange.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Ecng.Xaml.Charting.DoubleRange"/>, which are used internally for calculations
            </summary>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Ecng.Xaml.Charting.DateRange"/> instances, returns a new <see cref="T:Ecng.Xaml.Charting.DoubleRange"/> with the Min and Max Ticks</example>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.IntegerRange.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange`1"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.IntegerRange.SetMinMax(System.Double,System.Double,Ecng.Xaml.Charting.IRange{System.Int32})">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange`1"/> with a max range to clip values to, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range, which is used to clip values.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.IntegerRange.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.IntegerRange.ClipTo(Ecng.Xaml.Charting.IRange{System.Int32})">
            <summary>
            Clips the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.DecimalRange">
            <summary>
            Defines a range of type <see cref="T:System.Decimal"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.DecimalRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.DecimalRange"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DecimalRange.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.DecimalRange"/> class.
            </summary>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.DecimalRange.Diff">
            <summary>
            Gets the difference (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.DecimalRange.IsZero">
            <summary>
            Gets a value indicating whether this instance is zero.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DecimalRange.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DecimalRange.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Ecng.Xaml.Charting.DoubleRange"/>, which are used internally for calculations
            </summary>
            <returns></returns>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Ecng.Xaml.Charting.DateRange"/> instances, returns a new <see cref="T:Ecng.Xaml.Charting.DoubleRange"/> with the Min and Max Ticks</example>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DecimalRange.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DecimalRange.SetMinMax(System.Double,System.Double,Ecng.Xaml.Charting.IRange{System.Decimal})">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange"/> with a max range to clip values to, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range, which is used to clip values.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DecimalRange.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DecimalRange.ClipTo(Ecng.Xaml.Charting.IRange{System.Decimal})">
            <summary>
            Clips the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Range`1">
            <summary>
            Abstract base implementation of <see cref="T:Ecng.Xaml.Charting.IRange"/>, used throughout Ultrachart for visible, data and index range calculations
            </summary>
            <typeparam name="T">The typeparameter of the range, e.g. <see cref="T:System.Double"/></typeparam>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Range`1"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Range`1"/> class.
            </summary>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Range`1.IsDefined">
            <summary>
            Gets whether this Range is defined
            </summary>
            <example>Min and Max are not equal to double.NaN, or DateTime.MinValue or DateTime.MaxValue</example>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Range`1.Ecng#Xaml#Charting#IRange#Min">
            <summary>
            Gets or sets the Min value of this range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Range`1.Ecng#Xaml#Charting#IRange#Max">
            <summary>
            Gets or sets the Max value of this range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Range`1.Ecng#Xaml#Charting#IRange#Diff">
            <summary>
            Gets the difference (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Range`1.IsZero">
            <summary>
            Gets whether the range is Zero, where Max equals Min
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Range`1.Min">
            <summary>
            Gets or sets the Min value of this range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Range`1.Max">
            <summary>
            Gets or sets the Max value of this range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Range`1.Diff">
            <summary>
            Gets the Diff (Max - Min) of this range
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.ClipTo(Ecng.Xaml.Charting.IRange{`0})">
            <summary>
            Clips the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Ecng.Xaml.Charting.DoubleRange"/>, which are used internally for calculations
            </summary>
            <returns></returns>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Ecng.Xaml.Charting.DateRange"/> instances, returns a new <see cref="T:Ecng.Xaml.Charting.DoubleRange"/> with the Min and Max Ticks</example>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange`1"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.SetMinMax(System.Double,System.Double,Ecng.Xaml.Charting.IRange{`0})">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange`1"/> with a maximum range limit, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.SetMinMaxInternal(`0,`0)">
            <summary>
            Internal implementation: Sets the Min, Max values of the <see cref="T:Ecng.Xaml.Charting.Range`1"/>
            </summary>
            <param name="min">The new Min value</param>
            <param name="max">The new Max value</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.ClipTo(Ecng.Xaml.Charting.IRange)">
            <summary>
            Clips the current <see cref="T:Ecng.Xaml.Charting.IRange"/> to a maxmimum range with <see cref="F:Ecng.Xaml.Charting.RangeClipMode.MinMax"/> mode
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.ClipTo(Ecng.Xaml.Charting.IRange,Ecng.Xaml.Charting.RangeClipMode)">
            <summary>
            Clips the current <see cref="T:Ecng.Xaml.Charting.IRange"/> to a maximum according to clip mode
            </summary>
            <param name="maximumRange">The maximum range</param>
            <param name="clipMode">clip mode which defines how to clip range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.Union(Ecng.Xaml.Charting.IRange)">
            <summary>
            Performs the Union of two <see cref="T:Ecng.Xaml.Charting.IRange"/> instances, returning a new <see cref="T:Ecng.Xaml.Charting.IRange"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.IsValueWithinRange(System.IComparable)">
            <summary>
            Returns True if the value is within the Min and Max of the Range
            </summary>
            <param name="value">The value to test</param>
            <returns>
            True if the value is within the Min and Max of the Range
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.Union(Ecng.Xaml.Charting.IRange{`0})">
            <summary>
            Performs a Union logical operation between two ranges. The returned <see cref="T:Ecng.Xaml.Charting.IRange`1"/> has Min = Math.Min(range1.min, range2.min) 
            and Max = Math.Max(range1.Max, range2.Max)
            </summary>
            <param name="range">The input range to union with this range</param>
            <returns>The range result</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.Ecng#Xaml#Charting#IRange#SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.Ecng#Xaml#Charting#IRange#SetMinMaxWithLimit(System.Double,System.Double,Ecng.Xaml.Charting.IRange)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange"/> with a max range to clip values to, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range, which is used to clip values.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.Ecng#Xaml#Charting#IRange#GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Ecng.Xaml.Charting.IRange"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The max fraction.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.ToString">
            <summary>
            Returns the <see cref="T:System.String"/> that represents current <see cref="T:Ecng.Xaml.Charting.IRange"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.Equals(System.Object)">
            <summary>
            Compares Min and Max values to determine whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Range`1.Equals(Ecng.Xaml.Charting.IRange{`0})">
            <summary>
            Compares Min and Max values to determine whether the specified <see cref="T:Ecng.Xaml.Charting.IRange`1"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Ecng.Xaml.Charting.IRange`1"/> to compare with the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Ecng.Xaml.Charting.IRange`1"/> is equal to this instance; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.RangeFactory">
            <summary>
            Helper class to instantiate IRange derived types, where strong typing is required underneath but the runtime type of IRange is not known
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.RangeFactory.NewWithMinMax(Ecng.Xaml.Charting.IRange,System.IComparable,System.IComparable)">
            <summary>
            Creates a new <see cref="T:Ecng.Xaml.Charting.IRange"/> derived instance of the same type as originalRange with the specified Min and Max
            </summary>
            <param name="originalRange">The original range to use as a reference</param>
            <param name="min">The min value of the new range</param>
            <param name="max">The max value of the new range</param>
            <returns>A new <see cref="T:Ecng.Xaml.Charting.IRange"/> derived instance of the same type as originalRange</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.RangeFactory.NewWithMinMax(Ecng.Xaml.Charting.IRange,System.Double,System.Double,Ecng.Xaml.Charting.IRange)">
            <summary>
            Creates a new <see cref="T:Ecng.Xaml.Charting.IRange"/> derived instance of the same type as originalRange with the specified Min and Max, with a Range Limit to clip min, max to.
            </summary>
            <param name="originalRange">The original range to use as a reference</param>
            <param name="min">The min value of the new range</param>
            <param name="max">The max value of the new range</param>
            <param name="rangeLimit">The range limit to clip Min and Max to.</param>
            <returns>A new <see cref="T:Ecng.Xaml.Charting.IRange"/> derived instance of the same type as originalRange</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.RangeFactory.NewRange(System.IComparable,System.IComparable)">
            <summary>
            Creates a new <see cref="T:Ecng.Xaml.Charting.IRange"/> instance of the same type as the min, max range with the specified Min and Max
            </summary>
            <param name="min">The min value of the new range</param>
            <param name="max">The max value of the new range</param>
            <returns>A new <see cref="T:Ecng.Xaml.Charting.IRange"/> derived instance of the same type as the input values</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.RangeFactory.NewRange(System.Type,System.IComparable,System.IComparable)">
            <summary>
            Creates a new <see cref="T:Ecng.Xaml.Charting.IRange" /> instance of desired type, setting the min and max value
            </summary>
            <param name="rangeType">Type of the range to create, e.g. <see cref="T:Ecng.Xaml.Charting.IndexRange"/> or <see cref="T:Ecng.Xaml.Charting.DoubleRange"/>.</param>
            <param name="min">The min value of the new range</param>
            <param name="max">The max value of the new range</param>
            <returns>
            A new <see cref="T:Ecng.Xaml.Charting.IRange" /> derived instance of the same type as the input values
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.DateRange">
            <summary>
            Defines a Range of Type DateTime
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DateRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.DateRange"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DateRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.DateRange"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DateRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DateRange.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.DateRange.Diff">
            <summary>
            Gets the difference (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.DateRange.IsZero">
            <summary>
            Gets whether the range is Zero, where Max equals Min
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DateRange.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Ecng.Xaml.Charting.DoubleRange"/>, which are used internally for calculations
            </summary>
            <returns></returns>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Ecng.Xaml.Charting.DateRange"/> instances, returns a new <see cref="T:Ecng.Xaml.Charting.DoubleRange"/> with the Min and Max Ticks</example>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DateRange.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange`1"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DateRange.SetMinMax(System.Double,System.Double,Ecng.Xaml.Charting.IRange{System.DateTime})">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange`1"/> with a maximum range limit, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DateRange.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DateRange.ClipTo(Ecng.Xaml.Charting.IRange{System.DateTime})">
            <summary>
            Clips the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.DoubleAxisDelta">
            <summary>
            Defines a Double Delta, which provides Major and Minor deltas as used in <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleAxisDelta.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.DoubleAxisDelta"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleAxisDelta.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.DoubleAxisDelta"/> class.
            </summary>
            <param name="minorDelta">The minor delta.</param>
            <param name="majorDelta">The major delta.</param>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.DoubleAxisDelta.MajorDelta">
            <summary>
            Gets or sets the major delta.
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.DoubleAxisDelta.MinorDelta">
            <summary>
            Gets or sets the minor delta.
            </summary>
            <value>The minor delta.</value>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleAxisDelta.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleAxisDelta.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleAxisDelta.Equals(Ecng.Xaml.Charting.DoubleAxisDelta)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleAxisDelta.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleAxisDelta.op_Equality(Ecng.Xaml.Charting.DoubleAxisDelta,Ecng.Xaml.Charting.DoubleAxisDelta)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleAxisDelta.op_Inequality(Ecng.Xaml.Charting.DoubleAxisDelta,Ecng.Xaml.Charting.DoubleAxisDelta)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleAxisDelta.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.DoubleRange">
            <summary>
            Defines a range of type <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.DoubleRange"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleRange.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.DoubleRange"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.DoubleRange.UndefinedRange">
            <summary>
            Returns a new Undefined range
            </summary>        
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleRange.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.DoubleRange.Diff">
            <summary>
            Gets the difference (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.DoubleRange.IsZero">
            <summary>
            Gets whether the range is Zero, where Max equals Min
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleRange.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Ecng.Xaml.Charting.DoubleRange"/>, which are used internally for calculations
            </summary>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Ecng.Xaml.Charting.DateRange"/> instances, returns a new <see cref="T:Ecng.Xaml.Charting.DoubleRange"/> with the Min and Max Ticks</example>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleRange.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleRange.SetMinMax(System.Double,System.Double,Ecng.Xaml.Charting.IRange{System.Double})">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange"/> with a max range to clip values to, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range, which is used to clip values.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleRange.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.DoubleRange.ClipTo(Ecng.Xaml.Charting.IRange{System.Double})">
            <summary>
            Clips the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.IAxisDelta">
            <summary>
            Defines the interface to a Delta type, which defines Major and Minor deltas as used in <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.IAxisDelta.MajorDelta">
            <summary>
            Gets or sets the Major Delta
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.IAxisDelta.MinorDelta">
            <summary>
            Gets or sets the Minor Delta
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.IAxisDelta`1">
            <summary>
            Defines the Typed interface to a Delta type, which defines Major and Minor deltas as used in <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>
            </summary>
            <typeparam name="T">The typeparameter of this Delta, e.g. <see cref="T:System.Double"/></typeparam>
        </member>
        <member name="P:Ecng.Xaml.Charting.IAxisDelta`1.MajorDelta">
            <summary>
            Gets or sets the Major Delta
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.IAxisDelta`1.MinorDelta">
            <summary>
            Gets or sets the Minor Delta
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.IRange">
            <summary>
            Defines the base interface to a Range (Min, Max), used throughout Ultrachart for visible, data and index range calculations
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.IRange.Min">
            <summary>
            Gets or sets the Min value of this range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.IRange.Max">
            <summary>
            Gets or sets the Max value of this range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.IRange.IsDefined">
            <summary>
            Gets whether this Range is defined
            </summary>
            <example>Min and Max are not equal to double.NaN, or DateTime.MinValue or DateTime.MaxValue</example>
        </member>
        <member name="P:Ecng.Xaml.Charting.IRange.Diff">
            <summary>
            Gets the difference (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.IRange.IsZero">
            <summary>
            Gets whether the range is Zero, where Max equals Min
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.IRange.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Ecng.Xaml.Charting.DoubleRange"/>, which are used internally for calculations
            </summary>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Ecng.Xaml.Charting.DateRange"/> instances, returns a new <see cref="T:Ecng.Xaml.Charting.DoubleRange"/> with the Min and Max Ticks</example>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.IRange.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Ecng.Xaml.Charting.IRange"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.IRange.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.IRange.SetMinMaxWithLimit(System.Double,System.Double,Ecng.Xaml.Charting.IRange)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange"/> with a max range to clip values to, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range, which is used to clip values.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.IRange.ClipTo(Ecng.Xaml.Charting.IRange)">
            <summary>
            Clips the current <see cref="T:Ecng.Xaml.Charting.IRange"/> to a maxmimum range with <see cref="F:Ecng.Xaml.Charting.RangeClipMode.MinMax"/> mode
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.IRange.ClipTo(Ecng.Xaml.Charting.IRange,Ecng.Xaml.Charting.RangeClipMode)">
            <summary>
            Clips the current <see cref="T:Ecng.Xaml.Charting.IRange"/> to a maximum according to clip mode
            </summary>
            <param name="maximumRange">The maximum range</param>
            <param name="clipMode">clip mode which defines how to clip range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.IRange.Union(Ecng.Xaml.Charting.IRange)">
            <summary>
            Performs the Union of two <see cref="T:Ecng.Xaml.Charting.IRange"/> instances, returning a new <see cref="T:Ecng.Xaml.Charting.IRange"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.IRange.IsValueWithinRange(System.IComparable)">
            <summary>
            Returns True if the value is within the Min and Max of the Range
            </summary>
            <param name="value">The value to test</param>
            <returns>True if the value is within the Min and Max of the Range</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.IRange`1">
            <summary>
            Defines the generic interface to a Range (Min, Max), used throughout Ultrachart for visible, data and index range calculations
            </summary>
            <typeparam name="T">The Type Parameter, expected types are Double, DateTime etc... </typeparam>
            <remarks></remarks>    
        </member>
        <member name="P:Ecng.Xaml.Charting.IRange`1.Min">
            <summary>
            Gets or sets the Min value of this range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.IRange`1.Max">
            <summary>
            Gets or sets the Max value of this range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.IRange`1.Diff">
            <summary>
            Gets the Diff (Max - Min) of this range
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.IRange`1.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Ecng.Xaml.Charting.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and maxFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.IRange`1.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Ecng.Xaml.Charting.IRange`1"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.IRange`1.Union(Ecng.Xaml.Charting.IRange{`0})">
            <summary>
            Performs the Union of two <see cref="T:Ecng.Xaml.Charting.IRange"/> instances, returning a new <see cref="T:Ecng.Xaml.Charting.IRange"/>
            </summary>
            <example>
            <code>
            var firstRange = new DoubleRange(1, 2);
            var secondRange = new DoubleRange(1.5, 2.5)
            var unionRange = firstRange.Union(secondRange); 
            // unionRange result should be new DoubleRange(1, 2.5)
            </code>
            </example>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.RangeClipMode">
            <summary>
            Provide values which define how to perform clipping of <see cref="T:Ecng.Xaml.Charting.IRange"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.RangeClipMode.MinMax">
            <summary>
            Allow clipping at Min and Max
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.RangeClipMode.Max">
            <summary>
            Allow clipping only at Max
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.RangeClipMode.Min">
            <summary>
            Allow clipping only at Min
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.TimeSpanDelta">
            <summary>
            Defines a TimeSpan Delta, which provides Major and Minor deltas as used in <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.TimeSpanDelta.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.TimeSpanDelta"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.TimeSpanDelta.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.TimeSpanDelta"/> class.
            </summary>
            <param name="minorDelta">The minor delta.</param>
            <param name="majorDelta">The major delta.</param>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.TimeSpanDelta.MajorDelta">
            <summary>
            Gets or sets the major delta.
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.TimeSpanDelta.MinorDelta">
            <summary>
            Gets or sets the minor delta.
            </summary>
            <value>The minor delta.</value>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.TimeSpanDelta.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.TimeSpanDelta.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.TimeSpanDelta.Equals(Ecng.Xaml.Charting.TimeSpanDelta)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.TimeSpanDelta.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.TimeSpanDelta.op_Equality(Ecng.Xaml.Charting.TimeSpanDelta,Ecng.Xaml.Charting.TimeSpanDelta)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.TimeSpanDelta.op_Inequality(Ecng.Xaml.Charting.TimeSpanDelta,Ecng.Xaml.Charting.TimeSpanDelta)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.TimeSpanDelta.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeTickProvider">
            <summary>
            Provides tick coordinates for the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DateTimeTickProvider.RoundUp(System.IComparable,System.TimeSpan)">
            <summary>
            When overriden in a derived class, Rounds up the <see cref="T:System.IComparable" /> to the nearest TimeSpan specified by <paramref name="delta" />
            </summary>
            <param name="current">The current value.</param>
            <param name="delta">The delta.</param>
            <returns>
            The rounded value
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DateTimeTickProvider.IsAdditionValid(System.IComparable,System.TimeSpan)">
            <summary>
            Determines whether addition is valid between the current <see cref="T:System.IComparable" /> and the TimeSpan specified by <paramref name="delta" />
            </summary>
            <param name="current">The current.</param>
            <param name="delta">The delta.</param>
            <returns>
            If True, addition is valid
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DateTimeTickProvider.AddDelta(System.IComparable,System.TimeSpan)">
            <summary>
            When overriden in a derived class, Adds the <see cref="T:System.IComparable" /> to the nearest TimeSpan specified by <paramref name="delta" />
            </summary>
            <param name="current">The current value.</param>
            <param name="delta">The delta.</param>
            <returns>
            The addition result
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DateTimeTickProvider.IsDivisibleBy(System.IComparable,System.TimeSpan)">
            <summary>
            When overriden in a derived class, Determines whether the <see cref="T:System.IComparable" /> is divisible by the TimeSpan specified by <paramref name="delta" />
            </summary>
            <param name="current">The current value.</param>
            <param name="delta">The delta.</param>
            <returns>If True, IsDivisibleBy</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanTickProvider">
            <summary>
            Provides tick coordinates for the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanTickProvider.GetTicks(System.IComparable)">
            <summary>
            Returns <see cref="P:System.DateTime.Ticks" /> or <see cref="P:System.TimeSpan.Ticks" /> depending on derived type
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanTickProvider.RoundUp(System.IComparable,System.TimeSpan)">
            <summary>
            When overriden in a derived class, Rounds up the <see cref="T:System.IComparable" /> to the nearest TimeSpan specified by <paramref name="delta" />
            </summary>
            <param name="current">The current value.</param>
            <param name="delta">The delta.</param>
            <returns>
            The rounded value
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanTickProvider.IsAdditionValid(System.IComparable,System.TimeSpan)">
            <summary>
            Determines whether addition is valid between the current <see cref="T:System.IComparable" /> and the TimeSpan specified by <paramref name="delta" />
            </summary>
            <param name="current">The current.</param>
            <param name="delta">The delta.</param>
            <returns>
            If True, addition is valid
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanTickProvider.AddDelta(System.IComparable,System.TimeSpan)">
            <summary>
            When overriden in a derived class, Adds the <see cref="T:System.IComparable" /> to the nearest TimeSpan specified by <paramref name="delta" />
            </summary>
            <param name="current">The current value.</param>
            <param name="delta">The delta.</param>
            <returns>
            The addition result
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanTickProvider.IsDivisibleBy(System.IComparable,System.TimeSpan)">
            <summary>
            When overriden in a derived class, Determines whether the <see cref="T:System.IComparable" /> is divisible by the TimeSpan specified by <paramref name="delta" />
            </summary>
            <param name="current">The current value.</param>
            <param name="delta">The delta.</param>
            <returns>
            If True, IsDivisibleBy
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanTickProviderBase">
            <summary>
            A Common base class for TimeSpan and DateTimeTickProviders, which provide tick coordinates for the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/> and <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanTickProviderBase.GetMajorTicks(Ecng.Xaml.Charting.Visuals.Axes.IAxisParams)">
            <summary>
            Returns Generic-typed representation of major ticks array
            </summary>
            <param name="axis">The AxisParams for the axis</param>
            <returns>The array of ticks to display (data values converted to T)</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanTickProviderBase.GetMinorTicks(Ecng.Xaml.Charting.Visuals.Axes.IAxisParams)">
            <summary>
            Returns Generic-typed representation of minor ticks array
            </summary>
            <param name="axis">The AxisParams for the axis</param>
            <returns>The array of ticks to display (data values converted to T)</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanTickProviderBase.ConvertTicks(System.IComparable[])">
            <summary>
            Converts ticks in generic format to Double, e.g. cast to double for numeric types, or cast DateTime.Ticks to double for DateTime types
            </summary>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanTickProviderBase.GetTicks(System.IComparable)">
            <summary>
            Returns <see cref="P:System.DateTime.Ticks"/> or <see cref="P:System.TimeSpan.Ticks"/> depending on derived type
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanTickProviderBase.GetMajorTicks(Ecng.Xaml.Charting.IRange,Ecng.Xaml.Charting.IAxisDelta{System.TimeSpan})">
            <summary>
            Given a date tick range with Min, Max, MajorDelta and MinorDelta, return an array of absolute values for major ticks
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanTickProviderBase.RoundUp(System.IComparable,System.TimeSpan)">
            <summary>
            When overriden in a derived class, Rounds up the <see cref="T:System.IComparable" /> to the nearest TimeSpan specified by <paramref name="delta" />
            </summary>
            <param name="current">The current value.</param>
            <param name="delta">The delta.</param>
            <returns>The rounded value</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanTickProviderBase.IsAdditionValid(System.IComparable,System.TimeSpan)">
            <summary>
            Determines whether addition is valid between the current <see cref="T:System.IComparable"/> and the TimeSpan specified by <paramref name="delta" />
            </summary>
            <param name="current">The current.</param>
            <param name="delta">The delta.</param>
            <returns>If True, addition is valid</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanTickProviderBase.AddDelta(System.IComparable,System.TimeSpan)">
            <summary>
            When overriden in a derived class, Adds the <see cref="T:System.IComparable" /> to the nearest TimeSpan specified by <paramref name="delta" />
            </summary>
            <param name="current">The current value.</param>
            <param name="delta">The delta.</param>
            <returns>The addition result</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanTickProviderBase.IsDivisibleBy(System.IComparable,System.TimeSpan)">
            <summary>
            When overriden in a derived class, Determines whether the <see cref="T:System.IComparable" /> is divisible by the TimeSpan specified by <paramref name="delta" />
            </summary>
            <param name="current">The current value.</param>
            <param name="delta">The delta.</param>
            <returns>If True, IsDivisibleBy</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanTickProviderBase.GetMinorTicks(Ecng.Xaml.Charting.IRange,Ecng.Xaml.Charting.IAxisDelta{System.TimeSpan})">
            <summary>
            Given a date tick range with Min, Max, MajorDelta and MinorDelta, return an array of absolute values for major ticks
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.ITickProvider">
            <summary>
            Provides base interface for tick providers
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.ITickProvider.Init(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Called when the tick provider is initialized as it is attached to the parent axis, with the parent axis instance
            </summary>
            <param name="axis">The parent <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> instance</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.ITickProvider.GetMajorTicks(Ecng.Xaml.Charting.Visuals.Axes.IAxisParams)">
            <summary>
            Returns double representation of major ticks array for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>
            </summary>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.ITickProvider.GetMinorTicks(Ecng.Xaml.Charting.Visuals.Axes.IAxisParams)">
            <summary>
            Returns double representation of minor ticks array for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>
            </summary>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.ITickProvider`1">
            <summary>
            Provides interface for tick providers
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.ITickProvider`1.GetMajorTicks(Ecng.Xaml.Charting.Visuals.Axes.IAxisParams)">
            <summary>
            Returns array of major ticks from tick provider for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>
            </summary>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.ITickProvider`1.GetMinorTicks(Ecng.Xaml.Charting.Visuals.Axes.IAxisParams)">
            <summary>
            Returns array of minor ticks from tick provider for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>
            </summary>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams">
            <summary>
            Defines the interface used to pass the set of parameters to <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ITickProvider"/>.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.VisibleRange">
            <summary>
            Gets or sets the VisibleRange of the Axis. In the case of XAxis, this will cause an align to X-Axis operation to take place
            </summary>
            <remarks>Setting the VisibleRange will cause the axis to redraw</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.GrowBy">
            <summary>
            Gets or sets the GrowBy Factor. e.g. GrowBy(0.1, 0.2) will increase the axis extents by 10% (min) and 20% (max) outside of the data range
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.MinorDelta">
            <summary>
            Gets or sets the Minor Delta
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.MajorDelta">
            <summary>
            Gets or sets the Major Delta
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.GetMaximumRange">
            <summary>
            Gets the maximum range of the axis, based on the data-range of all series
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.ILogarithmicAxis">
            <summary>
            Defines the interface to a logarithmic axis, the value axis which uses a logarithmic scale. 
            The <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.ILogarithmicAxis.LogarithmicBase"/> property determines which base is used for the logarithm.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.ILogarithmicAxis.LogarithmicBase">
            <summary>
            Gets or sets the value which determines the base used for the logarithm.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.ILogarithmicAxis.ScientificNotation">
            <summary>
            Gets or sets used number format.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.AxisTitle">
            <summary>
            A Templateable Control to display axis titles 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisTitle.OrientationProperty">
            <summary>
            Using a DependencyProperty as the backing store for Orientation.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisTitle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisTitle"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisTitle.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel">
            <summary>
            Provides a class for tick axis labels rendering.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel.HorizontalAnchorPointProperty">
            <summary>
            Defines the HorizontalAnchorPoint DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel.VerticalAnchorPointProperty">
            <summary>
            Defines the VerticalAnchorPoint DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel.PositionProperty">
            <summary>
            Defines the Position DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel.DefaultForegroundProperty">
            <summary>
            Defines the DefaultForeground DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel.DefaultVerticalAnchorPointProperty">
            <summary>
            Defines the DefaultVerticalAnchorPoint DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel.DefaultHorizontalAnchorPointProperty">
            <summary>
            Defines the DefaultHorizontalAnchorPoint DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel.LayoutTransformProperty">
            <summary>
            Defines the LayoutTransform DependencyProperty
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel.HorizontalAnchorPoint">
            <summary>
            Gets or sets the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel.HorizontalAnchorPoint" />.
            The value of Left means the X1,Y1 coordinate of the annotation is on the Left horizontally.
            The value of Center means the X1,Y1 coordinate of the annotation is at the center horizontally.
            The value of Right means the X1,Y1 coordinate of the annotation is at the right horizontally.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel.VerticalAnchorPoint">
            <summary>
            Gets or sets the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel.VerticalAnchorPoint" />.
            The value of Top means the X1,Y1 coordinate of the annotation is on the Top vertically.
            The value of Center means the X1,Y1 coordinate of the annotation is at the center vertically.
            The value of Bottom means the X1,Y1 coordinate of the annotation is at the Bottom vertically.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel.OnPropertyChanged(System.String)">
            <summary>
            Implementation of <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelViewModel">
            <summary>
            Defines the base interface to a Tick Label Viewmodel - a viewmodel which each Axis Tick Label will bind to
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelViewModel.HasExponent">
            <summary>
            Gets or sets if the Tick Label has an exponent. NOTE Only valid for Numeric Axis. Ignored by DateTime or TimeSpan axes
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelViewModel.Separator">
            <summary>
            Gets or sets the Separator, for example the E symbol in Engineering notifation, or x10^ for Scientific Notation. NOTE Only valid for Numeric Axis. Ignored by DateTime or TimeSpan axes
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelViewModel.Exponent">
            <summary>
            Gets or sets the exponent. This is the power of 10 exponent in string format. NOTE Only valid for Numeric Axis. Ignored by DateTime or TimeSpan axes
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelViewModel.Text">
            <summary>
            Gets or sets the Text for the tick label
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.LabelProviderBase">
            <summary>
            Base class to define a LabelProvider. The LabelProvider may be set or data-bound to the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.LabelProvider"/> property, allowing
            programmatic overriding of axis labels. 
            
            Create a class which implements <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/> and return string values from the <see cref="M:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider.FormatLabel(System.IComparable)"/> and <see cref="M:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider.FormatCursorLabel(System.IComparable)"/> methods
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.LabelProviderBase.OnBeginAxisDraw">
            <summary>
            Called at the start of an axis render pass, before any labels are formatted for the current draw operation
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.LabelProviderBase.CreateDataContext(System.IComparable)">
            <summary>
            Creates a <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelViewModel"/> instance, based on the data-value passed in.
            Invokes <see cref="M:Ecng.Xaml.Charting.Visuals.Axes.LabelProviderBase.FormatLabel(System.IComparable)"/> to format the specified data-value passed in.
            </summary>
            <param name="dataValue">The data-value to format</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.LabelProviderBase.UpdateDataContext(Ecng.Xaml.Charting.Visuals.Axes.ITickLabelViewModel,System.IComparable)">
            <summary>
            Updates existing <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelViewModel"/>, based on the data-value passed in.
            Invokes <see cref="M:Ecng.Xaml.Charting.Visuals.Axes.LabelProviderBase.FormatLabel(System.IComparable)"/> to format the specified data-value passed in.
            </summary>
            <param name="labelDataContext">The instance to update</param>
            <param name="dataValue">The data-value to format</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.LabelProviderBase.FormatLabel(System.IComparable)">
            <summary>
            Formats a label for the axis from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted label string
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.LabelProviderBase.FormatCursorLabel(System.IComparable)">
            <summary>
            Formats a label for the cursor, from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted cursor label string
            </returns>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericTickProvider.LogarithmicBase">
            <summary>
            Gets or sets the value which determines the base used for the logarithm.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericTickProvider.CalculateMajorTicks(Ecng.Xaml.Charting.IRange{System.Double},Ecng.Xaml.Charting.IAxisDelta{System.Double})">
            <summary>
            Calculates the Major Ticks for the axis given a VisibleRange and Delta
            </summary>
            <param name="tickRange">The VisibleRange</param>
            <param name="tickDelta">The Deltas, e.g. MinorDelta and MajorDelta</param>
            <returns>
            The Major ticks (data values) as double
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericTickProvider.CalculateMinorTicks(Ecng.Xaml.Charting.IRange{System.Double},Ecng.Xaml.Charting.IAxisDelta{System.Double})">
            <summary>
            Calculates the Minor Ticks for the axis given a VisibleRange and Delta
            </summary>
            <param name="tickRange">The VisibleRange</param>
            <param name="tickDelta">The Deltas, e.g. MinorDelta and MajorDelta</param>
            <returns>
            The Major ticks (data values) as double
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericTickProvider.CalculateMinorTicks(Ecng.Xaml.Charting.IRange{System.Double},Ecng.Xaml.Charting.IAxisDelta{System.Double},System.Double[])">
            <summary>
            Calculates the Minor Ticks for the axis given a VisibleRange and Delta
            </summary>
            <param name="tickRange">The VisibleRange</param>
            <param name="tickDelta">The Deltas, e.g. MinorDelta and MajorDelta</param>
            <param name="majorTicks"></param>
            <returns>
            The Major ticks (data values) as double
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.NumericTickProvider">
            <summary>
            Provides tick Coordinates for the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericTickProvider.GetMinorTicks(Ecng.Xaml.Charting.Visuals.Axes.IAxisParams)">
            <summary>
            Calls <see cref="M:Ecng.Xaml.Charting.Visuals.Axes.NumericTickProvider.GetMinorTicks(Ecng.Xaml.Charting.IRange{System.Double},Ecng.Xaml.Charting.IAxisDelta{System.Double})"/> to calcuate Minor Ticks, then returns a double representation of minor ticks array
            </summary>
            <param name="axis">The AxisParams for the axis</param>
            <returns>The array of ticks to display (data values converted to double)</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericTickProvider.GetMajorTicks(Ecng.Xaml.Charting.Visuals.Axes.IAxisParams)">
            <summary>
            Calls <see cref="M:Ecng.Xaml.Charting.Visuals.Axes.NumericTickProvider.GetMajorTicks(Ecng.Xaml.Charting.IRange{System.Double},Ecng.Xaml.Charting.IAxisDelta{System.Double})"/> to calcuate Minor Ticks, then returns a double representation of minor ticks array
            </summary>
            <param name="axis">The AxisParams for the axis</param>
            <returns>The array of ticks to display (data values converted to double)</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericTickProvider.GetMajorTicks(Ecng.Xaml.Charting.IRange{System.Double},Ecng.Xaml.Charting.IAxisDelta{System.Double})">
            <summary>
            Given a double tick range with Min, Max, MajorDelta and MinorDelta, return an array of absolute values for major ticks
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericTickProvider.IsParamsValid(Ecng.Xaml.Charting.IRange{System.Double},Ecng.Xaml.Charting.IAxisDelta{System.Double})">
            <summary>
            Determines whether the VisibleRange and Delta parameters are valid, e.g. are Real Numbers, and VisibleRange.Min &lt; Max
            </summary>
            <param name="tickRange">The VisibleRange</param>
            <param name="tickDelta">The Delta, e.g. MinorDelta, MajorDelta</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericTickProvider.GetMinorTicks(Ecng.Xaml.Charting.IRange{System.Double},Ecng.Xaml.Charting.IAxisDelta{System.Double})">
            <summary>
            Given a tickRange with Min, Max, MajorDelta and MinorDelta, return an array of absolute values for minor ticks
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericTickProvider.GetMinorTicks(Ecng.Xaml.Charting.IRange{System.Double},Ecng.Xaml.Charting.IAxisDelta{System.Double},System.Double[])">
            <summary>
            Given a tickRange with Min, Max, MajorDelta and MinorDelta, return an array of absolute values for minor ticks
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericTickProvider.CalculateMajorTicks(Ecng.Xaml.Charting.IRange{System.Double},Ecng.Xaml.Charting.IAxisDelta{System.Double})">
            <summary>
            Calculates the Major Ticks for the axis given a VisibleRange and Delta
            </summary>
            <param name="tickRange">The VisibleRange</param>
            <param name="tickDelta">The Deltas, e.g. MinorDelta and MajorDelta</param>
            <returns>The Major ticks (data values) as double</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericTickProvider.CalculateMinorTicks(Ecng.Xaml.Charting.IRange{System.Double},Ecng.Xaml.Charting.IAxisDelta{System.Double},System.Double[])">
            <summary>
            Calculates the Minor Ticks for the axis given a VisibleRange and Delta
            </summary>
            <param name="tickRange">The VisibleRange</param>
            <param name="tickDelta">The Deltas, e.g. MinorDelta and MajorDelta</param>
            <param name="majorTicks">The previously calculated Major Ticks</param>
            <returns>The Minor Ticks (data values) as double</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericTickProvider.CalculateMinorTicks(Ecng.Xaml.Charting.IRange{System.Double},Ecng.Xaml.Charting.IAxisDelta{System.Double})">
            <summary>
            Calculates the Minor Ticks for the axis given a VisibleRange and Delta
            </summary>
            <param name="tickRange">The VisibleRange</param>
            <param name="tickDelta">The Deltas, e.g. MinorDelta and MajorDelta</param>
            <returns>The Major ticks (data values) as double</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.TickProvider`1">
            <summary>
            Abstract base implementation of <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ITickProvider"/>
            </summary>
            <typeparam name="T">The type of ticks for tick provider, e.g. <see cref="T:System.Double"/></typeparam>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.TickProvider`1.ParentAxis">
            <summary>
            Called when the tick provider is initialized as it is attached to the parent axis, with the parent axis instance
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TickProvider`1.Init(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Called when the tick provider is initialized as it is attached to the parent axis, with the parent axis instance
            </summary>
            <param name="axis">The parent <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis" /> instance</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TickProvider`1.Ecng#Xaml#Charting#Visuals#Axes#ITickProvider#GetMajorTicks(Ecng.Xaml.Charting.Visuals.Axes.IAxisParams)">
            <summary>
            Returns double representation of major ticks array
            </summary>
            <param name="axis">The AxisParams for the axis</param>
            <returns>The array of ticks to display (data values converted to double)</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TickProvider`1.Ecng#Xaml#Charting#Visuals#Axes#ITickProvider#GetMinorTicks(Ecng.Xaml.Charting.Visuals.Axes.IAxisParams)">
            <summary>
            Returns double representation of minor ticks array
            </summary>
            <param name="axis">The AxisParams for the axis</param>
            <returns>The array of ticks to display (data values converted to double)</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TickProvider`1.ConvertTicks(`0[])">
            <summary>
            Converts ticks in generic format to Double, e.g. cast to double for numeric types, or cast DateTime.Ticks to double for DateTime types
            </summary>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TickProvider`1.GetMajorTicks(Ecng.Xaml.Charting.Visuals.Axes.IAxisParams)">
            <summary>
            Returns Generic-typed representation of major ticks array
            </summary>
            <param name="axis">The AxisParams for the axis</param>
            <returns>The array of ticks to display (data values converted to T)</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TickProvider`1.GetMinorTicks(Ecng.Xaml.Charting.Visuals.Axes.IAxisParams)">
            <summary>
            Returns Generic-typed representation of minor ticks array
            </summary>
            <param name="axis">The AxisParams for the axis</param>
            <returns>The array of ticks to display (data values converted to T)</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.NumericTickLabel">
            <summary>
            Provides a class for tick axis labels rendering.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericTickLabel.#ctor">
            <summary>
            a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericTickLabel"/> class. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelsPool.Count">
            <summary>
            Gets the summary amount of created instances
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelsPool.AvailableCount">
            <summary>
            Gets the amount of pooled instances
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelsPool.IsEmpty">
            <summary>
            Gets the value indicating whether current <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelsPool"/> instance is empty.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelsPool.Get">
            <summary>
            Retrieves an item from the pool. 
            </summary>
            <returns>The item retrieved from the pool.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelsPool.Get(System.Func{Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel,Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel})">
            <summary>
            Retrieves an item from the pool. 
            </summary>
            <returns>The item retrieved from the pool.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelsPool.Put(Ecng.Xaml.Charting.Visuals.Axes.DefaultTickLabel)">
            <summary>
            Places an item in the pool.
            </summary>
            <param name="item">The item to place to the pool.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelsPool.Dispose">
            <summary>
            Disposes of items in the pool that implement IDisposable.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicAxis.LogarithmicBaseConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicAxis.LogarithmicBaseConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the intended conversion type of the converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>
            The converted value.
            </returns>
            <exception cref="T:System.FormatException">Unable to convert the object type {0} into a double. Please use a string with format '2, 5.6' or 'E, e'</exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.PolarXAxis">
            <summary>
            Provides a Polar, Value Numeric Axis, capable of rendering double, int, short, byte, long ticks on the XAxis of a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>. 
            </summary>
            <remarks>
            <para>All <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/> derived types have a <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TextFormatting"/> property to define axis text labels, however a more advanced
            way of defining axis label text is via the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.LabelProvider"/> property - expecting a custom <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/> derived type. </para>
            <para>In order to separately format cursor labels please see the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CursorTextFormatting"/> or again implement a customer <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/>. </para>
            <para>All axis types have many properties to define how they operate. These include <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorGridLines"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMinorGridLines"/>, 
            <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorTicks"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMinorTicks"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorBands"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawLabels"/>. </para>
            <para>Finally, all axis components can be styled. Please see the examples suite, the XAML Styling example to see how to use XAML to style axis elements.</para>
            </remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.PolarXAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.PolarYAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.PolarXAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.PolarXAxis"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.PolarXAxis.IsPolarAxis">
            <summary>
            Gets a value indicating whether this instance is a polar axis.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.PolarXAxis.IsHorizontalAxis">
            <summary>
            Gets whether the current axis is horizontal or not
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.PolarXAxis.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.OnApplyTemplate"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.PolarXAxis.GetAxisParams">
            <summary>
            Gets an <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisParams"/> struct with info about the current axis setup
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.PolarXAxis.DrawGridLine(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,System.Windows.Style,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Draws grid lines on chart at specified coordinates
            </summary>
            <param name="renderContext"></param>
            <param name="gridLineStyle"></param>
            <param name="coordsToDraw"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.PolarXAxis.GetAxisOffset">
            <summary>
            Returns the offset of the Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.PolarXAxis.GetLabelPosition(System.Single,System.Single)">
            <summary>
            Get coordinates to place tick label
            </summary>
            <param name="offset"></param>
            <param name="coords"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.PolarXAxis.HitTest(System.IComparable)">
            <summary>
            Performs a HitTest operation on the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase" />. The supplied <paramref name="dataValue" /> is used to convert to <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.AxisInfo" /> struct, which contains information about the axis, as well as formatted values
            </summary>
            <param name="dataValue">The data value.</param>
            <returns>The <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.AxisInfo"/> result</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.PolarYAxis">
            <summary>
            Provides a Polar, Value Numeric Axis, capable of rendering double, int, short, byte, long ticks on the YAxis of a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>. 
            </summary>
            <remarks>
            <para>All <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/> derived types have a <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TextFormatting"/> property to define axis text labels, however a more advanced
            way of defining axis label text is via the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.LabelProvider"/> property - expecting a custom <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/> derived type. </para>
            <para>In order to separately format cursor labels please see the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CursorTextFormatting"/> or again implement a customer <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/>. </para>
            <para>All axis types have many properties to define how they operate. These include <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorGridLines"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMinorGridLines"/>, 
            <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorTicks"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMinorTicks"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorBands"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawLabels"/>. </para>
            <para>Finally, all axis components can be styled. Please see the examples suite, the XAML Styling example to see how to use XAML to style axis elements.</para>
            </remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.PolarXAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.PolarYAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis"/>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.PolarYAxis.AngleProperty">
            <summary>
            Defines the Angle DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.PolarYAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.PolarYAxis"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.PolarYAxis.Angle">
            <summary>
            Gets or set rotation angle for this axis
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.PolarYAxis.IsPolarAxis">
            <summary>
            Gets a value indicating whether this instance is a polar axis.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.PolarYAxis.DrawGridLine(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,System.Windows.Style,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Draws grid lines on chart at specified coordinates
            </summary>
            <param name="renderContext"></param>
            <param name="gridLineStyle"></param>
            <param name="coordsToDraw"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.PolarYAxis.GetAxisOffset">
            <summary>
            Returns the offset of the Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.PolarYAxis.GetAxisParams">
            <summary>
            Gets an <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisParams"/> struct with info about the current axis setup
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxisBase">
            <summary>
            A common base class for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/> and <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxisBase.Ecng#Xaml#Charting#Visuals#Axes#IAxisParams#MinorDelta">
            <summary>
            Gets or sets the minor delta.
            </summary>
            <value>The minor delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxisBase.Ecng#Xaml#Charting#Visuals#Axes#IAxisParams#MajorDelta">
            <summary>
            Gets or sets the major delta.
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxisBase.MajorDelta">
            <summary>
            Gets or sets the major delta.
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxisBase.MinorDelta">
            <summary>
            Gets or sets the minor delta.
            </summary>
            <value>The minor delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxisBase.MinimalZoomConstrain">
            <summary>
            Gets or sets the MinimalZoomConstrain of the Axis. This is used to set minimum distance between Min and Max of the VisibleRange 
            </summary>
            <value>The minimum distance between Min and Max of the VisibleRange</value>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxisBase.CalculateYRange(Ecng.Xaml.Charting.RenderPassInfo)">
            <summary>
            Calculates the zoom-to-fit Y-Range of the axis, accounting for the data that
            is in the viewport and applying any GrowBy margin        
            </summary>
            <param name="renderPassInfo">Struct containing data for the current render pass</param>
            <returns>
            The VisibleRange of the axis
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxisBase.ToVisibleRange(System.IComparable,System.IComparable)">
            <summary>
            When overriden in a derived class, converts a Min Max <see cref="T:System.IComparable"/> value into an <see cref="T:Ecng.Xaml.Charting.IRange"/> of the correct type for this axis
            </summary>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <returns>The <see cref="T:Ecng.Xaml.Charting.IRange"/> instance</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxisBase.GetMaximumRange">
            <summary>
            Gets the Maximum Range of the axis, which is equal to the DataRange including any GrowBy factor applied
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxisBase.CalculateDataRange">
            <summary>
            Calculates data range of current axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxisBase.CalculateDelta">
            <summary>
            Calcuates the delta's for use in this render pass
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxisBase.GetDataValue(System.Double)">
            <summary>
            Transforms a pixel coordinate into a data value for this axis.
            </summary>
            <param name="pixelCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxisBase.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.AutoRange">
            <summary>
            Provides values which defines autorange behavior for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> implementers.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AutoRange.Once">
            <summary>
            Allows the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> instance decide whether autorange or not when show <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> first time, e.g. if the current VisibleRange is null or undefined
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AutoRange.Always">
            <summary>
            Autorange the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> instance always. In this case zooming is not allowed by user.  Only AxisDragModifier UI interaction is allowed.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AutoRange.Never">
            <summary>
            Never autoranges the the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> instance
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment">
            <summary>
            Enumeration constants to define the alignment of an axis
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment.Right">
            <summary>
            Axis is on the Right-side of the chart surface
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment.Left">
            <summary>
            Axis is on the Left-side of the chart surface
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment.Top">
            <summary>
            Axis is on the Top-edge of the chart surface
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment.Bottom">
            <summary>
            Axis is on the Bottom-edge of the chart surface
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment.Default">
            <summary>
            Axis is on the Bottom-edge of the chart surface
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.AxisArea">
            <summary>
            Provides a container for Axis within the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>. Styled by control template
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisArea.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisArea"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase">
            <summary>
            Provides base functionality for Axes throughout Ultrachart. Derived types include <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/>, which supports any 
            numeric value, <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/>, which supports Date values. Axes may be styled, see the <see href="http://www.ultrachart.com/tutorials">tutorials</see> for more details
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TickCoordinatesProviderProperty">
            <summary>
            Defines the TickCoordinatesProvider DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsStaticAxisProperty">
            <summary>
            Defines the IsStaticAxis DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsPrimaryAxisProperty">
            <summary>
            Defines the IsPrimaryAxis DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsCenterAxisProperty">
            <summary>
            Defines the IsCenterAxis DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AxisModeProperty">
            <summary>
            Defines the AxisMode DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AutoRangeProperty">
            <summary>
            Defines the AutoRange DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MajorDeltaProperty">
            <summary>
            Defines the MajorDelta DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MinorDeltaProperty">
            <summary>
            Defines the MinorDelta DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MinorsPerMajorProperty">
            <summary>
            Defines the MinorDelta DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GrowByProperty">
            <summary>
            Defines the GrowBy DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRangeProperty">
            <summary>
            Defines the VisibleRange DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRangeLimitProperty">
            <summary>
            Defines the VisibleRangeLimit DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRangeLimitModeProperty">
            <summary>
            Defines the VisibleRangeLimitMode DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AnimatedVisibleRangeProperty">
            <summary>
            Defines the Animated VisibleRange DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRangePointProperty">
            <summary>
            Defines the VisibleRangePoint DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AutoAlignVisibleRangeProperty">
            <summary>
            Defines the AutoAlignVisibleRange DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MaxAutoTicksProperty">
            <summary>
            Defines the MaxAutoTicks DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AutoTicksProperty">
            <summary>
            Defines the AutoTicks DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TickProviderProperty">
            <summary>
            Defines the TickProvider DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MinimalZoomConstrainProperty">
            <summary>
            Defines the MinimalZoomConstrain DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.OrientationProperty">
            <summary>
            Defines the Orientation DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AxisAlignmentProperty">
            <summary>
            Defines the AxisAlignment DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IdProperty">
            <summary>
            Defines the Id DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.FlipCoordinatesProperty">
            <summary>
            Defines the FlipCoordinates DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.LabelProviderProperty">
            <summary>
            Defines the LabelFormatter DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DefaultLabelProviderProperty">
            <summary>
            Defines the DefaultFormatter DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TextFormattingProperty">
            <summary>
            Defines the TextFormatting DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CursorTextFormattingProperty">
            <summary>
            Defines the CursorTextFormatting DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AxisTitleProperty">
            <summary>
            Defines the AxisTitle DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TitleStyleProperty">
            <summary>
            Defines the TitleStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TitleFontWeightProperty">
            <summary>
            Defines the TitleFontWeight DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TitleFontSizeProperty">
            <summary>
            Defines the TitleFontWeight DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TickTextBrushProperty">
            <summary>
            Defines the TickTextBrush DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.StrokeThicknessProperty">
            <summary>
            Defines the StrokeThickness DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MajorTickLineStyleProperty">
            <summary>
            Defines the MajorTickLineStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MinorTickLineStyleProperty">
            <summary>
            Defines the MinorTickLineStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorTicksProperty">
            <summary>
            Defines the DrawMajorTicks DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMinorTicksProperty">
            <summary>
            Defines the DrawMinorTicks DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawLabelsProperty">
            <summary>
            Defines the DrawLabels DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MajorGridLineStyleProperty">
            <summary>
            Defines the MajorGridLineStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MinorGridLineStyleProperty">
            <summary>
            Defines the MinorGridLineStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorGridLinesProperty">
            <summary>
            Defines the DrawMajorGridLines DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMinorGridLinesProperty">
            <summary>
            Defines the DrawMinorGridLines DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorBandsProperty">
            <summary>
            Defines the DrawMajorBands DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AxisBandsFillProperty">
            <summary>
            Defines the AxisBandsFill DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TickLabelStyleProperty">
            <summary>
            Defines the AutoTicks DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.ScrollbarProperty">
            <summary>
            Defines the Axis ScrollBar
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsLabelCullingEnabledProperty">
            <summary>
            The IsLabelCullingEnabled DependencyProperty
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.PropertyChanged">
            <summary>
            Raised when properties are changed
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.Arranged">
            <summary>
            Event raised immediately after the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/> measures itself
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRangeChanged">
            <summary>
            Raised when the VisibleRange is changed
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DataRangeChanged">
            <summary>
            Raised when data range is changed
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase._currentCoordinateCalculator">
            <summary>
            The current CoordinateCalculator for this render pass
            </summary>        
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase._currentInteractivityHelper">
            <summary>
            The current InteractivityHelper for this render pass
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DefaultAxisId">
            <summary>
            The Default Axis Id for new Axes
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MinDistanceToBounds">
            <summary>
            Defines the minimum distance to the edge of the chart to cull axis labels
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.ZeroRangeGrowBy">
            <summary>
            Gets GrowBy Min and Max which applied to VisibleRange if VisibleRange.Min == VisibleRAnge.Max
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.Ecng#Xaml#Charting#Visuals#Axes#IAxis#IsXAxis">
            <summary>
            Gets whether the current axis is an X-Axis or not
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsXAxis">
            <summary>
            Gets whether the current axis is an X-Axis or not
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsHorizontalAxis">
            <summary>
            Gets whether the current axis is horizontal or not
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsAxisFlipped">
            <summary>
            Gets whether the current axis is flipped (e.g. YAxis on the bottom or top, or XAxis on the left or right)
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsLabelCullingEnabled">
            <summary>
            Gets or sets a value indicating whether Label Culling is enabled (when labels overlap) on this AxisPanel instance
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsCenterAxis">
            <summary>
            Gets or sets whether current Axis should placed in the center of chart or not
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsPrimaryAxis">
            <summary>
            Gets or sets whether current Axis is the main one in axis collection
            </summary>
            <remarks>Primary axis determinate coordinate grid</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsStaticAxis">
            <summary>
            Gets or sets whether current Axis is a static axis
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AutoAlignVisibleRange">
            <summary>
            Gets or sets whether to auto-align the visible range to the data when it is set. Note that this property only applies to the X-Axis.
            The default value is False. Whenever the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRange"/> is set on the X-Axis, the Min and Max values will be aligned to data values in the <see cref="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.XValues"/>
            </summary>
            <value><c>true</c> if [auto align visible range]; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.HasValidVisibleRange">
            <summary>
            Gets whether the VisibleRange is valid, e.g. is not null, is not NaN and the difference between Max and Min is not zero
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.HasDefaultVisibleRange">
            <summary>
            Gets whether the VisibleRange has default value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.Ecng#Xaml#Charting#Visuals#IDrawable#Width">
            <summary>
            Gets or sets the width of the element.
            </summary>
            <returns>The width of the element, in device-independent units (1/96th inch per unit). The default value is <see cref="F:System.Double.NaN"/>. This value must be equal to or greater than 0.0. See Remarks for upper bound information.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.Ecng#Xaml#Charting#Visuals#IDrawable#Height">
            <summary>
            Gets or sets the suggested height of the element.
            </summary>
            <returns>The height of the element, in device-independent units (1/96th inch per unit). The default value is <see cref="F:System.Double.NaN"/>. This value must be equal to or greater than 0.0. See Remarks for upper bound information.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.ParentSurface">
            <summary>
            Gets or sets the ParentSurface that this Axis is associated with
            </summary>
            <value>The parent surface.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.Services">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/> which provides access to services throughout Ultrachart. 
            ServiceContainers are created one per <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AxisTitle">
            <summary>
            Gets or sets the Axis Title
            </summary>
            <value>The axis title.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TitleStyle">
            <summary>
            Gets or sets the Style of the Axis Title
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TitleFontWeight">
            <summary>
            Gets or sets the Axis Title Font Weight
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TitleFontSize">
            <summary>
            Gets or sets the Axis Title Font Size
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TextFormatting">
            <summary>
            Gets or sets the Text Formatting String for Tick Labels on this axis
            </summary>
            <value>The text formatting.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CursorTextFormatting">
            <summary>
            Gets or sets the Text Formatting String for Labels on this cursor
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.LabelProvider">
            <summary>
            Gets or sets a <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/> instance, which may be used to programmatically override the formatting of text and cursor labels. 
            For examples, see the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DefaultLabelProvider"/> and <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.TradeChartAxisLabelProvider"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DefaultLabelProvider">
            <summary>
            Gets the default <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/> instance.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AxisMode">
            <summary>
            Gets or sets the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AxisMode"/>, e.g. Linear or Logarithmic, that this Axis operates in
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AutoRange">
            <summary>
            Gets or sets AutoRange Mode
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GrowBy">
            <summary>
            Gets or sets the GrowBy Factor. e.g. GrowBy(0.1, 0.2) will increase the axis extents by 10% (min) and 20% (max) outside of the data range
            </summary>
            <value>The grow by factor as a DoubleRange.</value>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.FlipCoordinates">
            <summary>
            Gets or sets a flag indicating whether to flip the tick and pixel coordinate generation for this axis, causing the axis ticks to decrement and chart to be flipped in the axis direction
            </summary>
            <value>
              If <c>true</c> reverses the ticks and coordinates for the axis.
            </value>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MajorDelta">
            <summary>
            Gets or sets the Major Delta
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MinorsPerMajor">
            <summary>
            Gets or sets the number of Minor Delta ticks per Major Tick
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MaxAutoTicks">
            <summary>
            Gets or sets the max ticks.
            </summary>
            <value>The max ticks.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AutoTicks">
            <summary>
            Gets or sets value, that indicates whether calculate ticks automatically. Default is True.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TickProvider">
            <summary>
            Gets or sets a <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ITickProvider"/> instance on current axis,
            which is used to compute the data-values of Axis Gridlines, Ticks and Labels.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TickCoordinatesProvider">
            <summary>
            Gets or sets a <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateProviders.ITickCoordinatesProvider"/> instance on current axis,
            which is used to transform the data-values received from the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.TickProvider"/> instance
            to the coordinates for Axis Gridlines, Ticks and Labels drawing.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MinorDelta">
            <summary>
            Gets or sets the Minor Delta
            </summary>
            <value>The minor delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TickTextBrush">
            <summary>
            Gets or sets the tick text brush applied to text labels
            </summary>
            <value>The tick text brush</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MajorLineStroke">
            <summary>
            Gets or sets the Major Line Stroke for this axis
            </summary>
            <value>The major line stroke.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MinorLineStroke">
            <summary>
            Gets or sets the Minoe Line Stroke for this axis
            </summary>
            <value>The minor line stroke.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MajorTickLineStyle">
            <summary>
            Gets or sets the Major Tick Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all major ticks on this axis
            </summary>
            <value>The major tick line style.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MinorTickLineStyle">
            <summary>
            Gets or sets the Minor Tick Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all major ticks on this axis
            </summary>
            <value>The minor tick line style.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MajorGridLineStyle">
            <summary>
            Gets or sets the Major Grid Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all major gridlines drawn by this axis
            </summary>
            <value>The major grid line style.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MinorGridLineStyle">
            <summary>
            Gets or sets the Minor Grid Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all minor gridlines drawn by this axis
            </summary>
            <value>The minor grid line style.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMinorTicks">
            <summary>
            If True, draws Minor Tick Lines, else skips this step
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawLabels">
            <summary>
            If True, draw labels for each major tick on the Axis, else skips this step
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorTicks">
            <summary>
            If True, draws Major Tick Lines, else skips this step
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorGridLines">
            <summary>
            If True, draws Major Grid Lines, else skips this step
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMinorGridLines">
            <summary>
            If True, draws Minor Grid Lines, else skips this step
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorBands">
            <summary>
            If True, draws Major Axis Bands (a filled area between major gridlines), else skips this step
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AxisBandsFill">
            <summary>
            Gets or sets the Fill of the Axis Bands. Also see <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorBands"/> to enable this behaviour
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.Orientation">
            <summary>
            Gets or sets the Axis Orientation, e.g. Horizontal (XAxis) or Vertical (YAxis)
            </summary>
            <value>The orientation.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AxisAlignment">
            <summary>
            Gets or sets the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AxisAlignment"/> for this Axis. Default is Right.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.Id">
            <summary>
            Gets or sets the string Id of this axis. Used to associated <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> and <see cref="T:Ecng.Xaml.Charting.ChartModifiers.YAxisDragModifier"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
            <value>The stroke thickness.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TickLabelStyle">
            <summary>
            Gets or sets a style for the labels on this Axis.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.Scrollbar">
            <summary>
            Gets or Sets Axis ScrollBar
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.ModifierAxisCanvas">
            <summary>
            Gets the ModifierAxisCanvas, which may be used to overlay markers on the canvas
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GridLinesPanel">
            <summary>
            Get the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GridLinesPanel"/> instance off the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.RenderSurface">
            <summary>
            Get the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.RenderSurface"/> instance off the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsCategoryAxis">
            <summary>
            Gets a value indicating whether this instance is a category axis.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsLogarithmicAxis">
            <summary>
            Gets a value indicating whether this instance is a logarithmic axis.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsPolarAxis">
            <summary>
            Gets a value indicating whether this instance is a polar axis.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AnimatedVisibleRange">
            <summary>
            Gets or sets the animated VisibleRange of the Axis. 
            When this property is set, the axis animates the VisibleRange to the new value over a duration of 500ms
            </summary>
            <value>The visible range.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRange">
            <summary>
            Gets or sets the VisibleRange of the Axis.
            </summary>
            <value>The visible range.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRangeLimit">
            <summary>
            Gets or sets the VisibleRangeLimit of the Axis. This will be used to clip the axis during ZoomExtents and AutoRange operations
            </summary>
            <value>The visible range.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRangeLimitMode">
            <summary>
            Gets or setts the VisibleRangeLimitMode of the Axis. This property defines which parts of <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRangeLimit"/> will be used by axis
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MinimalZoomConstrain">
            <summary>
            Gets or sets the MinimalZoomConstrain of the Axis. This is used to set minimum distance between Min and Max of the VisibleRange 
            </summary>
            <value>The minimum distance between Min and Max of the VisibleRange</value>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DataRange">
            <summary>
            Gets the DataRange (full extents of the data) of the Axis.
            </summary>
            <value>The data range</value>
            <remarks>Note: The performance implications of calling this is axis will perform a full recalculation on each get. 
            It is recommended to get and cache if this property is needed more than once</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CurrentDatapointPixelSize">
            <summary>
            Gets the current data-point size in pixels
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetPointRange">
            <summary>
            Gets the integer indices of the X-Data array that are currently in range.
            </summary>
            <returns>
            The indices to the X-Data that are currently in range
            </returns>
            <example>If the input X-data is 0...100 in steps of 1, the VisibleRange is 10, 30 then the PointRange will be 10, 30</example>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetUndefinedRange">
            <summary>
            Returns an undefined <see cref="T:Ecng.Xaml.Charting.IRange" />, called internally by Ultrachart to reset the VisibleRange of an axis to an undefined state
            </summary>
            <returns></returns>        
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetDefaultNonZeroRange">
            <summary>
            Returns an default non zero <see cref="T:Ecng.Xaml.Charting.IRange" />, called internally by Ultrachart to reset the VisibleRange of an axis to an undefined state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CalculateYRange(Ecng.Xaml.Charting.RenderPassInfo)">
            <summary>
            Gets the aligned VisibleRange of the axis, with optional ZoomToFit flag.
            If ZoomToFit is true, it will return the DataRange plus any GrowBy applied to the axis
            </summary>
            <param name="renderPassInfo">Struct containing data for the current render pass</param>
            <returns>The VisibleRange of the axis</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CalculateDataRange">
            <summary>
            Calculates data range of current axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetMaximumRange">
            <summary>
            Gets the Maximum Range of the axis, which is equal to the DataRange including any GrowBy factor applied
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CoerceZeroRange(Ecng.Xaml.Charting.IRange)">
            <summary>
            Coerce <seealso cref="T:Ecng.Xaml.Charting.IRange"/> if current range is zero range
            </summary>
            <param name="maximumRange">Current maximum range</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetWindowedYRange(System.Collections.Generic.IDictionary{System.String,Ecng.Xaml.Charting.IRange})">
            <summary>
            Returns the max range only for that axis (by the data-series on it), based on <paramref name="xRanges"/>
            "windowed" = "displayed in current viewport"
            uses GrowBy()
            </summary>
            <param name="xRanges">Calculates the max range based on corresponding x ranges</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.Scroll(System.Double,Ecng.Xaml.Charting.ClipMode)">
            <summary>
            Scrolls current <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRange" /> by the specified number of pixels
            </summary>
            <param name="pixelsToScroll">Scroll N pixels from the current visible range</param>
            <param name="clipMode">Defines how scrolling behaves when you reach the edge of the Axis extents.
            e.g. ClipMode.ClipAtExtents prevents panning outside of the Axis, ClipMode.None allows panning outside</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.Scroll(System.Double,Ecng.Xaml.Charting.ClipMode,System.TimeSpan)">
            <summary>
            Scrolls current <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRange" /> by the specified number of pixels with the specified animation duration
            </summary>
            <param name="pixelsToScroll">Scroll N pixels from the current visible range</param>
            <param name="clipMode">Defines how scrolling behaves when you reach the edge of the Axis extents.
            e.g. ClipMode.ClipAtExtents prevents panning outside of the Axis, ClipMode.None allows panning outside</param>
            <param name="duration">The duration of animation when zooming to extents</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.ScrollByDataPoints(System.Int32)">
            <summary>
            Translates current <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRange" /> by the specified number of datapoints
            </summary>
            <param name="pointAmount">Amount of data points that the start visible range is scrolled by</param>
            <remarks>
            For XAxis only,  is suitable for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis" />, <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis" /> and <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis" />
            where data is regularly spaced
            </remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.ScrollByDataPoints(System.Int32,System.TimeSpan)">
            <summary>
            Translates current <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRange" /> by the specified number of datapoints with the specified animation duration
            </summary>
            <param name="pointAmount">Amount of points that the start visible range is scrolled by</param>
            <param name="duration">The duration of animation when zooming to extents</param>
            <exception cref="T:System.InvalidOperationException">ScrollXRange is only valid on the X Axis</exception>
            <remarks>
            For XAxis only,  is suitable for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis" />, <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis" /> and <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis" />
            where data is regularly spaced
            </remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.Zoom(System.Double,System.Double)">
            <summary>
            Performs zoom on current <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis" />, using <paramref name="fromCoord" /> as a coordinate of new range start and
            <paramref name="toCoord" /> as a coordinate of new range end
            </summary>
            <param name="fromCoord">The coordinate of new range start in pixels</param>
            <param name="toCoord">The coordinate of new range end in pixels</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.Zoom(System.Double,System.Double,System.TimeSpan)">
            <summary>
            Performs zoom on current <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis" />, using <paramref name="fromCoord" /> as a coordinate of new range start and
            <paramref name="toCoord" /> as a coordinate of new range end
            </summary>
            <param name="fromCoord">The coordinate of new range start in pixels</param>
            <param name="toCoord">The coordinate of new range end in pixels</param>
            <param name="duration">The duration of animation when zooming to extents</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.ZoomBy(System.Double,System.Double)">
            <summary>
            Performs zoom on current <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis" />, using <paramref name="minFraction" /> as a multiplier of range start and
            <paramref name="maxFraction" /> as a multiplier of range end
            </summary>
            <param name="minFraction">The multiplier of range start</param>
            <param name="maxFraction">The multiplier of range end</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.ZoomBy(System.Double,System.Double,System.TimeSpan)">
            <summary>
            Performs zoom on current <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis" />, using <paramref name="minFraction" /> as a multiplier of range start and
            <paramref name="maxFraction" /> as a multiplier of range end
            </summary>
            <param name="minFraction">The multiplier of range start</param>
            <param name="maxFraction">The multiplier of range end</param>
            <param name="duration">The duration of animation when zooming to extents</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.ScrollTo(Ecng.Xaml.Charting.IRange,System.Double)">
            <summary>
            From the starting <see cref="T:Ecng.Xaml.Charting.IRange"/>, scrolls to a new range by the specified number of pixels
            </summary>
            <param name="startVisibleRange">The start visible range</param>
            <param name="pixelsToScroll">Scroll N pixels from the start visible range</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.ScrollToWithLimit(Ecng.Xaml.Charting.IRange,System.Double,Ecng.Xaml.Charting.IRange)">
            <summary>
            From the starting <see cref="T:Ecng.Xaml.Charting.IRange"/>, scrolls to a new range by the specified number of pixels, with the specified range limit
            </summary>
            <param name="startVisibleRange">The start visible range</param>
            <param name="pixelsToScroll">Scroll N pixels from the start visible range</param>
            <param name="rangeLimit">The range limit.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsValidRange(Ecng.Xaml.Charting.IRange)">
            <summary>
            Checks whether <paramref name="range"/> is valid visible range for this axis
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsOfValidType(Ecng.Xaml.Charting.IRange)">
            <summary>
            Checks whether <paramref name="range"/> is not Null and is of valid type for this axis
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetSchema">
            <summary>
            Returns an XmlSchema that describes the XML representation of the object that is produced by the WriteXml method and consumed by the ReadXml method
            </summary>
            <remarks>
            This method is reserved by <see cref="T:System.Xml.Serialization.IXmlSerializable"/> and should not be used
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/> from its XML representation.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/> into its XML representation.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AssertDataType(System.Type)">
            <summary>
            Asserts the type passed in is supported by the current axis implementation
            </summary>
            <param name="dataType"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetSupportedTypes">
            <summary>
            Returns a list of types which current axis is designed to work with
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.ValidateAxis">
            <summary>
            Called to check if the axis properties are valid for rendering. Will throw an exception if not
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if any property is invalid for drawing</exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.SetMouseCursor(System.Windows.Input.Cursor)">
            <summary>
            Sets the cursor for this Axis
            </summary>
            <param name="cursor">The Cursor instance</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.Clear">
            <summary>
            Clears axis labels, ticks off this axis
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetCurrentInteractivityHelper">
            <summary>
            Returns the current <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxisInteractivityHelper"/>, valid for the current render pass, which may be used to 
            interact with the axis (Scroll, Zoom, Pan). 
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxisInteractivityHelper"/>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetCurrentCoordinateCalculator">
            <summary>
            Gets the current <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> for this Axis, based on current Visible Range and axis type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.OnBeginRenderPass(Ecng.Xaml.Charting.RenderPassInfo,Ecng.Xaml.Charting.Model.DataSeries.IPointSeries)">
            <summary>
            Called internally immediately before a render pass begins
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetAxisParams">
            <summary>
            Gets an <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisParams"/> struct with info about the current axis setup
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetAxisOffset">
            <summary>
            Returns the offset of the axis relative to the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.RenderSurface"/>.
            Is used for cases where axes are vertically or horizontally stacked.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.PropertyChanged"/> event, as part of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>The disposable Update Suspender</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.ResumeUpdates(Ecng.Xaml.Charting.Visuals.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by IUpdateSuspender
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.InvalidateElement">
            <summary>
            Asynchronously requests that the element redraws itself plus children.
            Will be ignored if the element is ISuspendable and currently IsSuspended (within a SuspendUpdates/ResumeUpdates call)
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.HitTest(System.Windows.Point)">
            <summary>
            Performs a hit test on the Axis, returning the Data Value at the specific x or y pixel coordinate. This operation is the opposite of <see cref="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetCoordinate(System.IComparable)"/>
            </summary>
            <remarks>If the Axis is an XAxis, the coordinate passed in is an X-pixel. If the axis is a Y Axis, the coordinate is a Y-pixel</remarks>
            <param name="atPoint">The pixel coordinate on this Axis corresponding to the input DataValue</param>
            <returns>An <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.AxisInfo"/> struct containing the datavalue and formatted data value at this coordinate</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.HitTest(System.IComparable)">
            <summary>
            Performs a HitTest operation on the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase" />. The supplied <paramref name="dataValue" /> is used to convert to <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.AxisInfo" /> struct, which contains information about the axis, as well as formatted values
            </summary>
            <param name="dataValue">The data value.</param>
            <returns>The <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.AxisInfo"/> result</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.FormatText(System.IComparable,System.String)">
            <summary>
            String formats the text, using the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TextFormatting"/> property as a formatting string
            </summary>
            <param name="value">The data value to format</param>
            <param name="format">A composite format string</param>
            <returns>The string formatted data value</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.FormatText(System.IComparable)">
            <summary>
            String formats the text, using the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TextFormatting"/> property as a formatting string
            </summary>
            <param name="value">The data value to format</param>
            <returns>The string formatted data value</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.FormatCursorText(System.IComparable)">
            <summary>
            String formats text for the cursor, using the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CursorTextFormatting"/> property as a formatting string
            </summary>
            <param name="value">The data value to format</param>
            <returns>The string formatted data value</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetDataValue(System.Double)">
            <summary>
            Transforms a pixel coordinate into a data value for this axis. 
            </summary>
            <param name="pixelCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetCoordinate(System.IComparable)">
            <summary>
            Given the Data Value, returns the x or y pixel coordinate at that value on the Axis. This operation is the opposite of <see cref="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.HitTest(System.Windows.Point)"/>
            </summary>
            <remarks>If the Axis is an XAxis, the coordinate returned is an X-pixel. If the axis is a Y Axis, the coordinate returned is a Y-pixel</remarks>
            <param name="value">The DataValue as input</param>
            <returns>The pixel coordinate on this Axis corresponding to the input DataValue</returns>
            <example>
            Given an axis with a VisibleRange of 1..10 and height of 100, a value of 7 passed in to GetCoordinate would return 70 pixels
              </example>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current HitTestable element
            </summary>
            <param name="point">The point to test</param>
            <returns>true if the Point is within the bounds</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TranslatePoint(System.Windows.Point,Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Translates the point relative to the other hittestable element
            </summary>
            <param name="point">The point.</param>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetBoundsRelativeTo(Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Gets the bounds of the current HitTestable element relative to another HitTestable element
            </summary>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.OnDraw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Called when the instance is drawn
            </summary>
            <param name="renderContext">The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> used for drawing</param>
            <param name="renderPassData">Contains arguments and parameters for this render pass</param>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.IDrawable"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.IsVisibleRangeValid">
            <summary>
            Checks if the VisibleRange is valid, e.g. is not null, is not NaN, the difference between Max and Min is positive
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CalculateTicks">
            <summary>
            Overridden by derived types, called internal to calculate MinorTicks, MajorTicks before Axis drawing
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CalculateDelta">
            <summary>
            Calcuates the delta's for use in this render pass
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetDeltaCalculator">
            <summary>
            Returns an instance of an <see cref="T:Ecng.Xaml.Charting.Numerics.IDeltaCalculator"/> which is used to compute the data-values of <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MajorDelta"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MinorDelta"/>. 
            Overridden by derived types to allow calculations specific to that axis type.
            </summary>
            <returns>An <see cref="T:Ecng.Xaml.Charting.Numerics.IDeltaCalculator"/> instance</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetMaxAutoTicks">
            <summary>
            Calculates max auto ticks amount, which is >= 1
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawGridLines(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates)">
            <summary>
            Called internal to draw gridlines before Axis drawing
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawGridLine(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Rendering.Common.IPen2D,Ecng.Xaml.Charting.XyDirection,System.Single)">
            <summary>
            Draws a single grid line on the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.RenderSurface"/>, using the specified Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), <see cref="T:Ecng.Xaml.Charting.XyDirection"/> and integer coordinate.
            </summary>
            <remarks>If direction is <see cref="F:Ecng.Xaml.Charting.XyDirection.XDirection"/>, the coodinate is an X-coordinate, else it is a Y-coordinate</remarks>
            <param name="renderContext">The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> instance to draw to</param>
            <param name="linePen">The pen (TargetType <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D"/>) to apply to the grid line</param>
            <param name="direction">The X or Y direction to draw the  </param>
            <param name="atPoint">The integer coordinate to draw at. If direction is <see cref="F:Ecng.Xaml.Charting.XyDirection.XDirection"/>, the coodinate is an X-coordinate, else it is a Y-coordinate</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.OnDrawAxis(Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates)">
            <summary>
            Called when the axis should redraw itself. 
            </summary>
            <param name="tickCoords"> </param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetOffsetForLabels">
            <summary>
            Returns an offset for the axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawTickLabels(Ecng.Xaml.Charting.Themes.AxisCanvas,Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates,System.Single)">
            <summary>
            Draws the ticks and gridlines during a render pass
            </summary>
            <param name="canvas">The canvas to draw labels on.</param>
            <param name="tickCoords">The tick coords containing all coordinates for ticks and gridlines.</param>
            <param name="offset"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.ConvertTickToDataValue(System.IComparable)">
            <summary>
            When overridden in a derived class, converts a tick value to a data value. For instance, this may be overridden in the
            <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/> to convert between indices and DateTimes
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.GetMajorTickIndex(System.Double)">
            <summary>
            Returns major tick index e.g value 0 has index #0, 0 + MajorDelta - #1, 0 + 2*MajorDelta - #2 etc...
            </summary>
            <param name="tick"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.OnApplyTemplate"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TryApplyVisibleRange(Ecng.Xaml.Charting.IRange,Ecng.Xaml.Charting.IRange)">
            <summary>
            When current VisibleRange is invalid, tries to replace it by <paramref name="oldRange"/>,
            if both ranges are invalid, throws an exception
            </summary>
            <param name="newRange">The range to apply</param>
            <param name="oldRange">The previous VisibleRange</param>
            <returns>The value, which indicates whether the VisibleRange is applied or no</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.ValidateVisibleRange(Ecng.Xaml.Charting.IRange)">
            <summary>
            Throws appropriate exceptions if the VisibleRange has a wrong type, or VisibleRange.Min > VisibleRange.Max
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AssertRangeType(Ecng.Xaml.Charting.IRange)">
            <summary>
            Asserts the <see cref="T:Ecng.Xaml.Charting.IRange"/> is of the correct type for this axis
            </summary>
            <param name="range">The range to assert</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.OnVisibleRangeChanged(Ecng.Xaml.Charting.VisibleRangeChangedEventArgs)">
            <summary>
            Raises the VisibleRangeChanged event
            </summary>
            <param name="args">The <see cref="T:Ecng.Xaml.Charting.VisibleRangeChangedEventArgs"/> containing event data</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CoerceVisibleRange">
            <summary>
            When overridden in derived classes, changes value of the VisibleRange according to axis requirements
            before it is applied
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AnimateVisibleRangeTo(Ecng.Xaml.Charting.IRange,System.TimeSpan)">
            <summary>
            Animates the visible range of the axis to the destination VisibleRange, over the specified Duration. 
            Also see <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AnimatedVisibleRange"/> property which has a default duration of 500ms
            </summary>
            <param name="to">The end range</param>
            <param name="duration">The duration of the animation.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.InvalidateParent(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Provides a DependencyProperty callback which invalidates the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.AxisInteractivityHelper">
            <summary>
            Provides implementation for interactivity methods from <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxisInteractivityHelper"/>
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.AxisMode">
            <summary>
            Defines constants for how Axes behave
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisMode.Linear">
            <summary>
            The Axis is a Linear Axis
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.AxisMode.Logarithmic">
            <summary>
            The Axis is a Logarithmic Axis
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.AxisParams">
            <summary>
            Defines constants for the current axis setup for this render pass
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisParams.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisParams.Equals(Ecng.Xaml.Charting.Visuals.Axes.AxisParams)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.AxisParams.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis">
            <summary>
            Provides a Linear, Category DateTime Axis, capable of rendering DateTime ticks on the X-Axis of a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>. 
            The CategoryDateTimeAxis is specifically used in stock-charts or financial charts, since the category-nature of the axis automatically
            collapses weekend gaps and overnight gaps in trading charts. 
            
            Each data-point is treated as equidistant despite the X Data-value.
            </summary>
            <remarks>
            <para>All <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/> derived types have a <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TextFormatting"/> property to define axis text labels, however a more advanced
            way of defining axis label text is via the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.LabelProvider"/> property - expecting a custom <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/> derived type. </para>
            <para>In order to separately format cursor labels please see the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CursorTextFormatting"/> or again implement a customer <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/>. </para>
            <para>All axis types have many properties to define how they operate. These include <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorGridLines"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMinorGridLines"/>, 
            <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorTicks"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMinorTicks"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorBands"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawLabels"/>. </para>
            <para>Finally, all axis components can be styled. Please see the examples suite, the XAML Styling example to see how to use XAML to style axis elements.</para>
            </remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis"/>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.BarTimeFrameProperty">
            <summary>
            Defines the BarTimeFrame DependencyProperty. A default value of -1 allows the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/> to estimate the timeframe
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.SubDayTextFormattingProperty">
            <summary>
            Defines the SubDayTextFormatting DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.SubDayTextFormatting">
            <summary>
            Gets or sets the Text Formatting String used for Axis Tick Labels when the range of the axis is sub-day
            </summary>
            <value>The text formatting.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.BarTimeFrame">
            <summary>
            Gets or sets the Bar Time Frame in seconds. This is the number of seconds that each data-point represents on the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/> and is required for proper rendering. 
            A default value of -1 allows the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/> to estimate the timeframe
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.MinimalZoomConstrain">
            <summary>
            Gets or sets the MinimalZoomConstrain of the Axis. This is used to set minimum distance between Min and Max of the VisibleRange 
            </summary>
            <value>The minimum distance between Min and Max of the VisibleRange</value>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.CurrentDatapointPixelSize">
            <summary>
            Gets the current data-point width, which is the width of one data-point in pixels on the category axis
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.IsCategoryAxis">
            <summary>
            Gets a value indicating whether this instance is category axis.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.CalculateYRange(Ecng.Xaml.Charting.RenderPassInfo)">
            <summary>
            Calculates the zoom-to-fit Y-Range of the axis, accounting for the data that
            is in the viewport and applying any GrowBy margin        
            </summary>
            <param name="renderPassInfo">Struct containing data for the current render pass</param>
            <returns>
            The VisibleRange of the axis
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.GetMaximumRange">
            <summary>
            Gets the Maximum Range of the axis, which is equal to the DataRange including any GrowBy factor applied
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.CalculateDataRange">
            <summary>
            Calculates data range of current axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.CalculateDelta">
            <summary>
            Calcuates the delta's for use in this render pass
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.GetDeltaCalculator">
            <summary>
            Returns an instance of an <see cref="T:Ecng.Xaml.Charting.Numerics.IDeltaCalculator"/> which is used to compute the data-values of <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MajorDelta"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MinorDelta"/>. 
            Overridden by derived types to allow calculations specific to that axis type.
            </summary>
            <returns>An <see cref="T:Ecng.Xaml.Charting.Numerics.IDeltaCalculator"/> instance</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.GetCoordinate(System.IComparable)">
            <summary>
            Given the Data Value, returns the x or y pixel coordinate at that value on the Axis. This operation is the opposite of <see cref="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.HitTest(System.Windows.Point)" />
            </summary>
            <param name="value">The DataValue as input</param>
            <returns>
            The pixel coordinate on this Axis corresponding to the input DataValue
            </returns>
            <example>
            Given an axis with a VisibleRange of 1..10 and height of 100, a value of 7 passed in to GetCoordinate would return 70 pixels
              </example>
            <remarks>
            If the Axis is an XAxis, the coordinate returned is an X-pixel. If the axis is a Y Axis, the coordinate returned is a Y-pixel
            </remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.GetDataValue(System.Double)">
            <summary>
            Transforms a pixel coordinate into a data value for this axis.
            </summary>
            <param name="pixelCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.ConvertTickToDataValue(System.IComparable)">
            <summary>
            When overridden in a derived class, converts a tick value to a data value. For instance, this may be overridden in the
            <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis" /> to convert between indices and DateTimes
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.IsOfValidType(Ecng.Xaml.Charting.IRange)">
            <summary>
            Checks whether <paramref name="range" /> is of valid type for this axis
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.GetUndefinedRange">
            <summary>
            Returns an undefined <see cref="T:Ecng.Xaml.Charting.IRange" />, called internally by Ultrachart to reset the VisibleRange of an axis to an undefined state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.GetDefaultNonZeroRange">
            <summary>
            Returns an default non zero <see cref="T:Ecng.Xaml.Charting.IRange" />, called internally by Ultrachart to reset the VisibleRange of an axis to an undefined state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.GetAxisParams">
            <summary>
            Gets an <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisParams"/> struct with info about the current axis setup
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.OnBeginRenderPass(Ecng.Xaml.Charting.RenderPassInfo,Ecng.Xaml.Charting.Model.DataSeries.IPointSeries)">
            <summary>
            Called at the start of a render pass, passing in the root <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which will define the categories
            </summary>
            <param name="firstPointSeries">the root <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which will define the categories</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.ToDateRange(Ecng.Xaml.Charting.IndexRange)">
            <summary>
            Converts the CategoryDateTimeAxis's <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRange"/> of type <see cref="T:Ecng.Xaml.Charting.IndexRange"/> to a <see cref="T:Ecng.Xaml.Charting.DateRange"/> of concrete date-values.
            Note: If either index is outside of the range of data on the axis, the date values will be inteporlated.
            </summary>
            <param name="visibleRange">The input <see cref="T:Ecng.Xaml.Charting.IndexRange"/></param>
            <returns>The <see cref="T:Ecng.Xaml.Charting.DateRange"/> with transformed dates that correspond to input indices</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis.GetSupportedTypes">
            <summary>
            Returns a list of types which current axis is designed to work with
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeLabelProvider">
            <summary>
            The DateTimeLabelFormatter is a pass-through which uses the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TextFormatting"/> and <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CursorTextFormatting"/> properties
            to format axis and cursor label texts. It also uses the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis.SubDayTextFormatting"/> property to alter text-formatting when the date-range 
            switches to intra-day
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DateTimeLabelProvider.FormatCursorLabel(System.IComparable)">
            <summary>
            Formats a label for the cursor, from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted cursor label string
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DateTimeLabelProvider.FormatLabel(System.IComparable)">
            <summary>
            Formats a label for the axis from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted label string
            </returns>
            <exception cref="T:System.InvalidOperationException">The DateTimeLabelFormatter is only valid on instances of DateTimeAxis</exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.NumericLabelProvider">
            <summary>
            The NumericLabelFormatter is a pass-through which uses the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TextFormatting"/> and <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CursorTextFormatting"/> properties
            to format axis and cursor label texts
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericLabelProvider.CreateDataContext(System.IComparable)">
            <summary>
            Creates a 
            <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelViewModel" /> instance, based on the data-value passed in.
            Invokes 
            <see cref="M:Ecng.Xaml.Charting.Visuals.Axes.NumericLabelProvider.FormatLabel(System.IComparable)" /> to format the specified data-value passed in.
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericLabelProvider.UpdateDataContext(Ecng.Xaml.Charting.Visuals.Axes.ITickLabelViewModel,System.IComparable)">
            <summary>
            Updates existing 
            <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelViewModel" />, based on the data-value passed in.
            Invokes 
            <see cref="M:Ecng.Xaml.Charting.Visuals.Axes.NumericLabelProvider.FormatLabel(System.IComparable)" /> to format the specified data-value passed in.
            </summary>
            <param name="labelDataContext">The instance to update</param>
            <param name="dataValue">The data-value to format</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericLabelProvider.FormatCursorLabel(System.IComparable)">
            <summary>
            Formats a label for the cursor, from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted cursor label string
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericLabelProvider.FormatLabel(System.IComparable)">
            <summary>
            Formats a label for the axis from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted label string
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.IAxisInteractivityHelper">
            <summary>
            Defines a set of operations which allows to interact with axis that owns current instance of <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxisInteractivityHelper"/> 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxisInteractivityHelper.Zoom(Ecng.Xaml.Charting.IRange,System.Double,System.Double)">
            <summary>
            Calculates and returns a Zoomed Range on current <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>, using <paramref name="fromCoord"/> as a coordinate of new range start and
            <paramref name="toCoord"/> as a coordinate of new range end
            </summary>
            <param name="initialRange">Initial range</param>
            <param name="fromCoord">The coordinate of new range start in pixels</param>
            <param name="toCoord">The coordinate of new range end in pixels</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxisInteractivityHelper.ZoomBy(Ecng.Xaml.Charting.IRange,System.Double,System.Double)">
            <summary>
            Calculates and returns a Zoomed Range on current <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>, using <paramref name="minFraction"/> as a multiplier of range start and
            <paramref name="maxFraction"/> as a multiplier of range end
            </summary>
            <param name="initialRange">Initial range</param>
            <param name="minFraction">The multiplier of range start</param>
            <param name="maxFraction">The multiplier of range end</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxisInteractivityHelper.ScrollInMinDirection(Ecng.Xaml.Charting.IRange,System.Double)">
            <summary>
            From the starting <see cref="T:Ecng.Xaml.Charting.IRange"/>, scrolls to a new range by the specified number of pixels in Min direction
            </summary>
            <param name="rangeToScroll">The start range</param>
            <param name="pixels">Scroll N pixels from the start visible range</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxisInteractivityHelper.ScrollInMaxDirection(Ecng.Xaml.Charting.IRange,System.Double)">
            <summary>
            From the starting <see cref="T:Ecng.Xaml.Charting.IRange"/>, scrolls to a new range by the specified number of pixels in Max direction
            </summary>
            <param name="rangeToScroll">The start range</param>
            <param name="pixels">Scroll N pixels from the start visible range</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxisInteractivityHelper.Scroll(Ecng.Xaml.Charting.IRange,System.Double)">
            <summary>
            From the starting <see cref="T:Ecng.Xaml.Charting.IRange"/>, scrolls to a new range by the specified number of pixels
            </summary>
            <param name="rangeToScroll">The start range</param>
            <param name="pixels">Scroll N pixels from the start visible range</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxisInteractivityHelper.ScrollBy(Ecng.Xaml.Charting.IRange,System.Int32)">
            <summary>
            Translates the passed range by the specified number of datapoints
            </summary>
            <param name="rangeToScroll">The start range</param>
            <param name="pointAmount">Amount of points that the start visible range is scrolled by</param>
            <remarks>For XAxis only,  is suitable for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/> and <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/>
            where data is regularly spaced</remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxisInteractivityHelper.ClipRange(Ecng.Xaml.Charting.IRange,Ecng.Xaml.Charting.IRange,Ecng.Xaml.Charting.ClipMode)">
            <summary>
            Performs clipping of passed <paramref name="rangeToClip"/> using <paramref name="clipMode"/>
            </summary>
            <param name="rangeToClip"></param>
            <param name="maximumRange"></param>
            <param name="clipMode"></param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.ICategoryAxis">
            <summary>
            Defines the interface to a category axis, which treats X-data as linearly increasing regardless of value
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.ICategoryAxis.ToDateRange(Ecng.Xaml.Charting.IndexRange)">
            <summary>
            Converts the CategoryDateTimeAxis's <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRange"/> of type <see cref="T:Ecng.Xaml.Charting.IndexRange"/> to a <see cref="T:Ecng.Xaml.Charting.DateRange"/> of concrete date-values.
            Note: If either index is outside of the range of data on the axis, the date values will be inteporlated.
            </summary>
            <param name="visibleRange">The input <see cref="T:Ecng.Xaml.Charting.IndexRange"/></param>
            <returns>The <see cref="T:Ecng.Xaml.Charting.DateRange"/> with transformed dates that correspond to input indices</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider">
            <summary>
            Interface to define a LabelProvider. The LabelFormatter may be set or data-bound to the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.LabelProvider"/> property, allowing
            programmatic overriding of axis labels. 
            
            Create a class which implements <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/> and return string values from the <see cref="M:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider.FormatLabel(System.IComparable)"/> and <see cref="M:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider.FormatCursorLabel(System.IComparable)"/> methods
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider.Init(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Called when the label formatted is initialized as it is attached to the parent axis, with the parent axis instance
            </summary>
            <param name="parentAxis">The parent <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> instance</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider.OnBeginAxisDraw">
            <summary>
            Called at the start of an axis render pass, before any labels are formatted for the current draw operation
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider.CreateDataContext(System.IComparable)">
            <summary>
            Creates a <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelViewModel"/> instance, based on the data-value passed in.
            Invokes <see cref="M:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider.FormatLabel(System.IComparable)"/> to format the specified data-value passed in.
            </summary>
            <param name="dataValue">The data-value to format</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider.UpdateDataContext(Ecng.Xaml.Charting.Visuals.Axes.ITickLabelViewModel,System.IComparable)">
            <summary>
            Updates existing <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ITickLabelViewModel"/>, based on the data-value passed in.
            Invokes <see cref="M:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider.FormatLabel(System.IComparable)"/> to format the specified data-value passed in.
            </summary>
            <param name="labelDataContext">The instance to update</param>
            <param name="dataValue">The data-value to format</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider.FormatLabel(System.IComparable)">
            <summary>
            Formats a label for the axis from the specified data-value passed in 
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>The formatted label string</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider.FormatCursorLabel(System.IComparable)">
            <summary>
            Formats a label for the cursor, from the specified data-value passed in 
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>The formatted cursor label string</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis">
            <summary>
            Provides a Logarithmic, Value Numeric Axis, capable of rendering double, int, short, byte, long ticks on the X or Y-Axis of a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>. 
            The <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis.LogarithmicBase"/> property determines which base is used for the logarithm.
            </summary>
            <remarks>
            <para>All <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/> derived types have a <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TextFormatting"/> property to define axis text labels, however a more advanced
            way of defining axis label text is via the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.LabelProvider"/> property - expecting a custom <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/> derived type. </para>
            <para>In order to separately format cursor labels please see the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CursorTextFormatting"/> or again implement a customer <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/>. </para>
            <para>All axis types have many properties to define how they operate. These include <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorGridLines"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMinorGridLines"/>, 
            <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorTicks"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMinorTicks"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorBands"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawLabels"/>. </para>
            <para>Finally, all axis components can be styled. Please see the examples suite, the XAML Styling example to see how to use XAML to style axis elements.</para>
            </remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis"/>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis.LogarithmicBaseProperty">
            <summary>
            Defines the LogarithmicBase DependencyProperty
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis.LogarithmicBase">
            <summary>
            Gets or sets the value which determines the base used for the logarithm.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis.IsLogarithmicAxis">
            <summary>
            Gets a value indicating whether this instance is a logarithmic axis.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis.GetAxisParams">
            <summary>
            Gets an <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisParams" /> struct with info about the current axis setup
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis.IsValidRange(Ecng.Xaml.Charting.IRange)">
            <summary>
            Checks whether <paramref name="range" /> is valid visible range for this axis
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis.GetDeltaCalculator">
            <summary>
            Returns an instance of an <see cref="T:Ecng.Xaml.Charting.Numerics.IDeltaCalculator" /> which is used to compute the data-values of Axis Gridlines, Ticks and Labels.
            When overridden in a derived class (e.g. <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis" />, the implementation of GetTickCalculator() changes to
            allow calculations specific to that axis type
            </summary>
            <returns>
            An <see cref="T:Ecng.Xaml.Charting.Numerics.IDeltaCalculator" /> instance
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis.GetDefaultNonZeroRange">
            <summary>
            Returns an default non zero <see cref="T:Ecng.Xaml.Charting.IRange" />, called internally by Ultrachart to reset the VisibleRange of an axis to an undefined state
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis">
            <summary>
            Provides a Linear, Value DateTime Axis, capable of rendering DateTime ticks on the X-Axis of a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>. 
            </summary>
            <remarks>
            <para>All <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/> derived types have a <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TextFormatting"/> property to define axis text labels, however a more advanced
            way of defining axis label text is via the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.LabelProvider"/> property - expecting a custom <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/> derived type. </para>
            <para>In order to separately format cursor labels please see the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CursorTextFormatting"/> or again implement a customer <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/>. </para>
            <para>All axis types have many properties to define how they operate. These include <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorGridLines"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMinorGridLines"/>, 
            <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorTicks"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMinorTicks"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorBands"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawLabels"/>. </para>
            <para>Finally, all axis components can be styled. Please see the examples suite, the XAML Styling example to see how to use XAML to style axis elements.</para>
            </remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis"/>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis.SubDayTextFormattingProperty">
            <summary>
            Defines the SubDayTextFormatting DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis.SubDayTextFormatting">
            <summary>
            Gets or sets the Text Formatting String used for Axis Tick Labels when the range of the axis is sub-day
            </summary>
            <value>The text formatting.</value>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis.CalculateYRange(Ecng.Xaml.Charting.RenderPassInfo)">
            <summary>
            Calculates the zoom-to-fit Y-Range of the axis, accounting for the data that
            is in the viewport and applying any GrowBy margin        
            </summary>
            <param name="renderPassInfo">Struct containing data for the current render pass</param>
            <returns>
            The VisibleRange of the axis
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis.GetMaximumRange">
            <summary>
            Gets the Maximum Range of the axis, which is equal to the DataRange including any GrowBy factor applied
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis.CoerceZeroRange(Ecng.Xaml.Charting.IRange)">
            <summary>
            Coerce <seealso cref="T:Ecng.Xaml.Charting.IRange"/> if current range is zero range
            </summary>
            <param name="maximumRange">Current maximum range</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis.AssertDataType(System.Type)">
            <summary>
            Asserts the type passed in is supported by the current axis implementation
            </summary>
            <param name="dataType"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis.GetUndefinedRange">
            <summary>
            Returns an undefined <see cref="T:Ecng.Xaml.Charting.IRange" />, called internally by Ultrachart to reset the VisibleRange of an axis to an undefined state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis.GetDefaultNonZeroRange">
            <summary>
            Returns an default non zero <see cref="T:Ecng.Xaml.Charting.IRange" />, called internally by Ultrachart to reset the VisibleRange of an axis to an undefined state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis.ToVisibleRange(System.IComparable,System.IComparable)">
            <summary>
            When overriden in a derived class, converts a Min Max <see cref="T:System.IComparable" /> value into an <see cref="T:Ecng.Xaml.Charting.IRange" /> of the correct type for this axis
            </summary>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <returns>
            The <see cref="T:Ecng.Xaml.Charting.IRange" /> instance
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis.GetDeltaCalculator">
            <summary>
            Returns an instance of an <see cref="T:Ecng.Xaml.Charting.Numerics.IDeltaCalculator"/> which is used to compute the data-values of <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxisBase.MajorDelta"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxisBase.MinorDelta"/>. 
            Overridden by derived types to allow calculations specific to that axis type.
            </summary>
            <returns>An <see cref="T:Ecng.Xaml.Charting.Numerics.IDeltaCalculator"/> instance</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis.ConvertTickToDataValue(System.IComparable)">
            <summary>
            When overridden in a derived class, converts a tick value to a data value. For instance, this may be overridden in the
            <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis" /> to convert between indices and DateTimes
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis.IsOfValidType(Ecng.Xaml.Charting.IRange)">
            <summary>
            Checks whether <paramref name="range" /> is not Null and is of valid type for this axis
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis.GetSupportedTypes">
            <summary>
            Returns a list of types which current axis is designed to work with
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis">
            <summary>
            Provides a Linear, Value Numeric Axis, capable of rendering double, int, short, byte, long ticks on the X or Y-Axis of a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>. 
            </summary>
            <remarks>
            <para>All <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/> derived types have a <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TextFormatting"/> property to define axis text labels, however a more advanced
            way of defining axis label text is via the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.LabelProvider"/> property - expecting a custom <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/> derived type. </para>
            <para>In order to separately format cursor labels please see the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CursorTextFormatting"/> or again implement a customer <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/>. </para>
            <para>All axis types have many properties to define how they operate. These include <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorGridLines"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMinorGridLines"/>, 
            <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorTicks"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMinorTicks"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorBands"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawLabels"/>. </para>
            <para>Finally, all axis components can be styled. Please see the examples suite, the XAML Styling example to see how to use XAML to style axis elements.</para>
            </remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis"/>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis.ScientificNotationProperty">
            <summary>
            Defines the ScientificNotation DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis.MajorDelta">
            <summary>
            Gets or sets the major delta.
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis.MinorDelta">
            <summary>
            Gets or sets the minor delta.
            </summary>
            <value>The minor delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis.MinimalZoomConstrain">
            <summary>
            Gets or sets the MinimalZoomConstrain of the Axis. This is used to set minimum distance between Min and Max of the VisibleRange 
            </summary>
            <value>The minimum distance between Min and Max of the VisibleRange</value>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis.ScientificNotation">
            <summary>
            Gets or sets used number format
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis.GetDeltaCalculator">
            <summary>
            Returns an instance of an <see cref="T:Ecng.Xaml.Charting.Numerics.IDeltaCalculator"/> which is used to compute the data-values of Axis Gridlines, Ticks and Labels. 
            When overridden in a derived class (e.g. <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis"/>, the implementation of GetTickCalculator() changes to 
            allow calculations specific to that axis type
            </summary>
            <returns>An <see cref="T:Ecng.Xaml.Charting.Numerics.IDeltaCalculator"/> instance</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis.CalculateDelta">
            <summary>
            Calcuates the delta's for use in this render pass
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis.CalculateYRange(Ecng.Xaml.Charting.RenderPassInfo)">
            <summary>
            Gets the aligned VisibleRange of the axis, with optional ZoomToFit flag.
            If ZoomToFit is true, it will return the DataRange plus any GrowBy applied to the axis
            </summary>
            <param name="renderPassInfo">Struct containing data for the current render pass</param>
            <returns>
            The VisibleRange of the axis
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis.GetUndefinedRange">
            <summary>
            Returns an undefined <see cref="T:Ecng.Xaml.Charting.IRange" />, called internally by Ultrachart to reset the VisibleRange of an axis to an undefined state
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis.GetDefaultNonZeroRange">
            <summary>
            Returns an default non zero <see cref="T:Ecng.Xaml.Charting.IRange" />, called internally by Ultrachart to reset the VisibleRange of an axis to an undefined state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis.IsOfValidType(Ecng.Xaml.Charting.IRange)">
            <summary>
            Checks whether <paramref name="range" /> is of valid type for this axis
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis.GetSupportedTypes">
            <summary>
            Returns a list of types which current axis is designed to work with
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis.GetAxisParams">
            <summary>
            Gets an <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisParams"/> struct with info about the current axis setup
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis.GetDataValue(System.Double)">
            <summary>
            Transforms a pixel coordinate into a data value for this axis. 
            </summary>
            <param name="pixelCoordinate"></param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.GridLinesPanel">
            <summary>
            Provides a panel to draw the background behind a UltrachartSurface gridlines area only. Since v2.0 this panel no longer draws gridlines, these are deferred to the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>
            </summary>    
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.GridLinesPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.GridLinesPanel"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.GridLinesPanel.EventAggregator">
            <summary>
            Sets the event aggregator instance used throughout Ultrachart
            </summary>
            <value>The event aggregator instance.</value>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.GridLinesPanel.Clear(Ecng.Xaml.Charting.XyDirection)">
            <summary>
            Clears the grid lines in a specific direction
            </summary>
            <param name="xyDirection">The <see cref="T:Ecng.Xaml.Charting.XyDirection"/> to clear in, e.g. <see cref="F:Ecng.Xaml.Charting.XyDirection.XDirection"/> clears the X-Axis gridlines</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.GridLinesPanel.AddLine(Ecng.Xaml.Charting.XyDirection,System.Windows.Shapes.Line)">
            <summary>
            Adds a line to the panel in the specific <see cref="T:Ecng.Xaml.Charting.XyDirection"/>
            </summary>
            <param name="xyDirection">The <see cref="T:Ecng.Xaml.Charting.XyDirection"/> to clear in, e.g. <see cref="F:Ecng.Xaml.Charting.XyDirection.XDirection"/> adds an X-Axis gridline</param>
            <param name="line">The line to add</param>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.GridLinesPanel.Ecng#Xaml#Charting#Visuals#Axes#IGridLinesPanel#Width">
            <summary>
            Gets the width of the panel in pixels
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.GridLinesPanel.Ecng#Xaml#Charting#Visuals#Axes#IGridLinesPanel#Height">
            <summary>
            Gets the height of the panel in pixels
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.GridLinesPanel.GenerateElement(System.Int32,Ecng.Xaml.Charting.XyDirection,System.Windows.Style)">
            <summary>
            Generates and adds a <see cref="T:System.Windows.Shapes.Line"/> element to the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.GridLinesPanel"/>. Applies the direction and style to the line as 
            well as Id so they may be re-used (pooled)
            </summary>
            <param name="lineId">The line Id</param>
            <param name="xyDirection">The direction, X or Y</param>
            <param name="lineStyle">The style to apply to the line</param>
            <returns>The <see cref="T:System.Windows.Shapes.Line"/> instance, which has been added to the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.GridLinesPanel"/></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.GridLinesPanel.RemoveElementsAfter(Ecng.Xaml.Charting.XyDirection,System.Int32)">
            <summary>
            Removes all <see cref="T:System.Windows.Shapes.Line"/> instances after the specified index. This method is used when re-drawing the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> 
            when the number of lines has reduced from one redraw to the next. 
            </summary>
            <param name="xyDirection">The direction to clear, X or Y</param>
            <param name="index">The index to remove after (inclusive)</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis">
            <summary>
            Defines the base interface to an Axis used throughout Ultrachart
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Axes.IAxis.VisibleRangeChanged">
            <summary>
            Raised when the VisibleRange is changed
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Axes.IAxis.DataRangeChanged">
            <summary>
            Raised when data range is changed
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.Id">
            <summary>
            Gets or sets the string Id of this axis. Used to associated <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> and <see cref="T:Ecng.Xaml.Charting.ChartModifiers.YAxisDragModifier"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.AutoTicks">
            <summary>
            Gets or sets value, that indicates whether calculate ticks automatically
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.TickProvider">
            <summary>
            Gets or sets a <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ITickProvider"/> instance on current axis,
            which is used to compute the data-values of Axis Gridlines, Ticks and Labels.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.AnimatedVisibleRange">
            <summary>
            Gets or sets the animated VisibleRange of the Axis. When this property is set, the axis animates the VisibleRange to the new value
            </summary>
            <value>The visible range.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.DataRange">
            <summary>
            Gets the DataRange (full extents of the data) of the Axis
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.Services">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/> which provides access to services throughout Ultrachart. 
            ServiceContainers are created one per <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.ParentSurface">
            <summary>
            Gets or sets the ParentSurface that this Axis is associated with
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.Orientation">
            <summary>
            Gets or sets the Axis Orientation, e.g. Horizontal (XAxis) or Vertical (YAxis)
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.MajorLineStroke">
            <summary>
            Gets or sets the Major Line Stroke for this axis
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.MinorLineStroke">
            <summary>
            Gets or sets the Minoe Line Stroke for this axis
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.MajorTickLineStyle">
            <summary>
            Gets or sets the Major Tick Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all major ticks on this axis
            </summary>
            <remarks>
            The depth of the tick is defined by the <see cref="P:System.Windows.Shapes.Line.Y2"/> and <see cref="P:System.Windows.Shapes.Line.X2"/> properties. For instance, setting
            Y2 and X2 to 6 will result in Major ticks being 6 pixels in size, whether on the X or Y axis
            </remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.MinorTickLineStyle">
            <summary>
            Gets or sets the Minor Tick Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all major ticks on this axis
            </summary>
            <remarks>
            The depth of the tick is defined by the <see cref="P:System.Windows.Shapes.Line.Y2"/> and <see cref="P:System.Windows.Shapes.Line.X2"/> properties. For instance, setting
            Y2 and X2 to 3 will result in Minor ticks being 6 pixels in size, whether on the X or Y axis
            </remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.MajorGridLineStyle">
            <summary>
            Gets or sets the Major Grid Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all major gridlines drawn by this axis
            </summary>        
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.MinorGridLineStyle">
            <summary>
            Gets or sets the Minor Grid Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all minor gridlines drawn by this axis
            </summary>        
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.AutoRange">
            <summary>
            Gets or sets whether this current axis <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.AutoRange"/>. Default is AutoRange.Once
            </summary>
            <value>If AutoRange.Always, the axis should scale to fit the data, else AutoRange.Once, the axis will try to fit the data once. 
            If AutoRange.Never, then the axis will never autorange.</value>
            <remarks>GrowBy is applied when the axis scales to fit</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.TextFormatting">
            <summary>
            Gets or sets the Text Formatting String for Axis Tick Labels on this axis
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.CursorTextFormatting">
            <summary>
            Gets or sets the Text Formatting String for Labels on this cursor
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.LabelProvider">
            <summary>
            Gets or sets a <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/> instance, which may be used to programmatically override the formatting of text and cursor labels. 
            For examples, see the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericLabelProvider"/> and <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.TradeChartAxisLabelProvider"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.IsXAxis">
            <summary>
            Gets whether this axis is an X-Axis or not
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.IsHorizontalAxis">
            <summary>
            Gets whether this axis is horizontal or not
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.IsStaticAxis">
            <summary>
            Gets or sets whether current Axis is a static axis
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.FlipCoordinates">
            <summary>
            Gets or sets a flag indicating whether to flip the tick and pixel coordinate generation for this axis,
            causing the axis ticks to decrement and chart to be flipped in the axis direction
            </summary>
            <value>
            If <c>true</c> reverses the ticks and coordinates for the axis.
            </value>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.HasValidVisibleRange">
            <summary>
            Gets whether the VisibleRange is valid, e.g. is not null, is not NaN and the difference between Max and Min is not zero
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.HasDefaultVisibleRange">
            <summary>
            Gets whether the VisibleRange has default value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.AxisTitle">
            <summary>
            Gets or sets the Axis Title
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.TickTextBrush">
            <summary>
            Gets or sets the tick text brush applied to text labels
            </summary>
            <value>The tick text brush</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.AutoAlignVisibleRange">
            <summary>
            Gets or sets whether to auto-align the visible range to the data when it is set. Note that this property only applies to the X-Axis. 
            The default value is True. Whenever the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.VisibleRange"/> is set on the X-Axis, the Min and Max values will be aligned to data values in the <see cref="P:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries.XValues"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.DrawMinorTicks">
            <summary>
            If True, draws Minor Tick Lines, else skips this step
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.DrawMajorTicks">
            <summary>
            If True, draws Major Tick Lines, else skips this step
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.DrawMajorGridLines">
            <summary>
            If True, draws Major Grid Lines, else skips this step
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.DrawMinorGridLines">
            <summary>
            If True, draws Minor Grid Lines, else skips this step
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment characteristics that are applied to a <see cref="T:System.Windows.FrameworkElement"/> when it is composed in a layout parent, such as a panel or items control.
            </summary>
            <returns>
            A horizontal alignment setting, as a value of the enumeration. The default is <see cref="F:System.Windows.HorizontalAlignment.Stretch"/>.
            </returns>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment characteristics that are applied to a <see cref="T:System.Windows.FrameworkElement"/> when it is composed in a parent object such as a panel or items control.
            </summary>
            <returns>
            A vertical alignment setting. The default is <see cref="F:System.Windows.VerticalAlignment.Stretch"/>.
            </returns>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.AxisMode">
            <summary>
            Gets or sets the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.AxisMode"/>, e.g. Linear or Logarithmic, that this Axis operates in
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.AxisAlignment">
            <summary>
            Gets or sets the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.AxisAlignment"/> for this Axis. Default is Right.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.IsCategoryAxis">
            <summary>
            Gets a value indicating whether this instance is a category axis.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.IsLogarithmicAxis">
            <summary>
            Gets a value indicating whether this instance is a logarithmic axis.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.IsPolarAxis">
            <summary>
            Gets a value indicating whether this instance is a polar axis.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.IsCenterAxis">
            <summary>
            Gets or sets whether current Axis should placed in the center of chart or not
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.IsPrimaryAxis">
            <summary>
            Gets or sets whether current Axis is the main one in axis collection. This is the axis which is responsible for drawing grid lines on the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.GridLinesPanel"/> and by default, 
            is the first axis in the collection
            </summary>
            <remarks>Primary axis determines grid coordinates</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.ModifierAxisCanvas">
            <summary>
            Gets the modifier axis canvas, which is used by the CursorModifier to overlay cursor labels and by AxisMarkerAnnotations
            </summary>        
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.Visibility">
            <summary>
            Gets or sets the visibility of the Axis
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.IsAxisFlipped">
            <summary>
            Gets whether the current axis is flipped (e.g. YAxis on the bottom or top, or XAxis on the left or right)
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.VisibleRangeLimit">
            <summary>
            Gets or sets the VisibleRangeLimit of the Axis. This will be used to clip the axis during ZoomExtents and AutoRange operations
            </summary>
            <value>The visible range.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.VisibleRangeLimitMode">
            <summary>
            Gets or setts the VisibleRangeLimitMode of the Axis. This property defines which parts of <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.VisibleRangeLimit"/> will be used by axis
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.MinimalZoomConstrain">
            <summary>
            Gets or sets the MinimalZoomConstrain of the Axis. This is used to set minimum distance between Min and Max of the VisibleRange 
            </summary>
            <value>The minimum distance between Min and Max of the VisibleRange</value>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.IsLabelCullingEnabled">
            <summary>
            Gets or sets a value indicating whether Label Culling is enabled (when labels overlap) on this AxisPanel instance
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.GetCurrentCoordinateCalculator">
            <summary>
            Gets the current <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> for this Axis, based on current Visible Range and axis type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.GetCurrentInteractivityHelper">
            <summary>
            Gets the current <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxisInteractivityHelper"/> for this Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.CaptureMouse">
            <summary>
            Captures the mouse for this Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.ReleaseMouseCapture">
            <summary>
            Releases the mouse for this Axis
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.SetMouseCursor(System.Windows.Input.Cursor)">
            <summary>
            Sets the cursor for this Axis
            </summary>
            <param name="cursor">The Cursor instance</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.HitTest(System.Windows.Point)">
            <summary>
            Performs a HitTest on this axis. Given the input mouse point, returns an AxisInfo struct containing the Value and FormattedValue closest to that point
            </summary>
            <param name="atPoint">The mouse x,y point</param>
            <returns>The AxisInfo struct containing the value and formatted value closest to the mouse point</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.GetPointRange">
            <summary>
            Gets the integer indices of the X-Data array that are currently in range. 
            </summary>
            <example>If the input X-data is 0...100 in steps of 1, the VisibleRange is 10, 30 then the PointRange will be 10, 30</example>
            <returns>The indices to the X-Data that are currently in range</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.CalculateYRange(Ecng.Xaml.Charting.RenderPassInfo)">
            <summary>
            Gets the aligned VisibleRange of the axis, with optional ZoomToFit flag. 
            If ZoomToFit is true, it will return the DataRange plus any GrowBy applied to the axis
            </summary>
            <returns>The VisibleRange of the axis</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.GetWindowedYRange(System.Collections.Generic.IDictionary{System.String,Ecng.Xaml.Charting.IRange})">
            <summary>
             Called by the UltrachartSurface internally. Returns the max range only for that axis (by the data-series on it), based on <paramref name="xRanges"/>
            "windowed" = "displayed in current viewport"
            uses GrowBy()
            </summary>
            <param name="xRanges">Calculates the max range based on corresponding x ranges</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.GetCoordinate(System.IComparable)">
            <summary>
            Given the Data Value, returns the x or y pixel coordinate at that value on the Axis
            </summary>
            <example>
            Given an axis with a VisibleRange of 1..10 and height of 100, a value of 7 passed in to GetCoordinate would return 70 pixels
            </example>
            <param name="value">The DataValue as input</param>
            <returns>The pixel coordinate on this Axis corresponding to the input DataValue</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.GetDataValue(System.Double)">
            <summary>
            Given the x or y pixel coordinate, returns the data value at that coordinate
            </summary>
            <param name="pixelCoordinate">The x or y pixel coordinate as input</param>
            <returns>The data value on this Axis corresponding to the input x or y pixel coordinate</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.GetAxisOffset">
            <summary>
            Returns the offset of the Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.OnBeginRenderPass(Ecng.Xaml.Charting.RenderPassInfo,Ecng.Xaml.Charting.Model.DataSeries.IPointSeries)">
            <summary>
            Called at the start of a render pass, passing in the root <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which will define the categories
            </summary>
            <param name="firstPointSeries">the root <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which will define the categories</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.Scroll(System.Double,Ecng.Xaml.Charting.ClipMode)">
            <summary>
            Scrolls current <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.VisibleRange"/> by the specified number of pixels
            </summary>
            <param name="pixelsToScroll">Scroll N pixels from the current visible range</param>
            <param name="clipMode">Defines how scrolling behaves when you reach the edge of the Axis extents.
            e.g. ClipMode.ClipAtExtents prevents panning outside of the Axis, ClipMode.None allows panning outside</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.Scroll(System.Double,Ecng.Xaml.Charting.ClipMode,System.TimeSpan)">
            <summary>
            Scrolls current <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.VisibleRange"/> by the specified number of pixels with the specified animation duration
            </summary>
            <param name="pixelsToScroll">Scroll N pixels from the current visible range</param>
            <param name="clipMode">Defines how scrolling behaves when you reach the edge of the Axis extents.
            e.g. ClipMode.ClipAtExtents prevents panning outside of the Axis, ClipMode.None allows panning outside</param>
            <param name="duration">The duration of animation when zooming to extents</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.ScrollByDataPoints(System.Int32)">
            <summary>
            Translates current <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.VisibleRange"/> by the specified number of datapoints
            </summary>
            <param name="pointAmount">Amount of data points that the start visible range is scrolled by</param>
            <remarks>For XAxis only,  is suitable for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/> and <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/>
            where data is regularly spaced</remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.ScrollByDataPoints(System.Int32,System.TimeSpan)">
            <summary>
            Translates current <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.VisibleRange"/> by the specified number of datapoints with the specified animation duration
            </summary>
            <param name="pointAmount">Amount of points that the start visible range is scrolled by</param>
            <remarks>For XAxis only,  is suitable for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/> and <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/>
            where data is regularly spaced</remarks>
            <param name="duration">The duration of animation when zooming to extents</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.Zoom(System.Double,System.Double)">
            <summary>
            Performs zoom on current <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>, using <paramref name="fromCoord"/> as a coordinate of new range start and
            <paramref name="toCoord"/> as a coordinate of new range end
            </summary>
            <param name="fromCoord">The coordinate of new range start in pixels</param>
            <param name="toCoord">The coordinate of new range end in pixels</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.Zoom(System.Double,System.Double,System.TimeSpan)">
            <summary>
            Performs zoom on current <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>, using <paramref name="fromCoord"/> as a coordinate of new range start and
            <paramref name="toCoord"/> as a coordinate of new range end
            </summary>
            <param name="fromCoord">The coordinate of new range start in pixels</param>
            <param name="toCoord">The coordinate of new range end in pixels</param>
            <param name="duration">The duration of animation when zooming to extents</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.ZoomBy(System.Double,System.Double)">
            <summary>
            Performs zoom on current <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>, using <paramref name="minFraction"/> as a multiplier of range start and
            <paramref name="maxFraction"/> as a multiplier of range end
            </summary>
            <param name="minFraction">The multiplier of range start</param>
            <param name="maxFraction">The multiplier of range end</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.ZoomBy(System.Double,System.Double,System.TimeSpan)">
            <summary>
            Performs zoom on current <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>, using <paramref name="minFraction"/> as a multiplier of range start and
            <paramref name="maxFraction"/> as a multiplier of range end
            </summary>
            <param name="minFraction">The multiplier of range start</param>
            <param name="maxFraction">The multiplier of range end</param>
            <param name="duration">The duration of animation when zooming to extents</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.ScrollTo(Ecng.Xaml.Charting.IRange,System.Double)">
            <summary>
            From the starting <see cref="T:Ecng.Xaml.Charting.IRange"/>, scrolls to a new range by the specified number of pixels
            </summary>
            <param name="startVisibleRange">The start visible range</param>
            <param name="pixelsToScroll">Scroll N pixels from the start visible range</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.ScrollToWithLimit(Ecng.Xaml.Charting.IRange,System.Double,Ecng.Xaml.Charting.IRange)">
            <summary>
            From the starting <see cref="T:Ecng.Xaml.Charting.IRange"/>, scrolls to a new range by the specified number of pixels, with the specified range limit
            </summary>
            <param name="startVisibleRange">The start visible range</param>
            <param name="pixelsToScroll">Scroll N pixels from the start visible range</param>
            <param name="rangeLimit">The range limit.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.AssertDataType(System.Type)">
            <summary>
            Asserts the type passed in is supported by the current axis implementation
            </summary>
            <param name="dataType"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.FormatText(System.IComparable,System.String)">
            <summary>
            String formats the text, using the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TextFormatting"/> property as a formatting string
            </summary>
            <param name="value">The data value to format</param>
            /// <param name="format">A composite format string</param>
            <returns>The string formatted data value</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.FormatText(System.IComparable)">
            <summary>
            String formats the text, using the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TextFormatting"/> property as a formatting string
            </summary>
            <param name="value">The data value to format</param>
            <returns>The string formatted data value</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.FormatCursorText(System.IComparable)">
            <summary>
            String formats text for the cursor, using the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CursorTextFormatting"/> property as a formatting string
            </summary>
            <param name="value">The data value to format</param>
            <returns>The string formatted data value</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.IsValidRange(Ecng.Xaml.Charting.IRange)">
            <summary>
            Checks whether <paramref name="range"/> is valid visible range for this axis
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.AnimateVisibleRangeTo(Ecng.Xaml.Charting.IRange,System.TimeSpan)">
            <summary>
            Animates the VisibleRange of the current axis to the end-range, with the specified duration
            </summary>
            <param name="range">The range to animate to</param>
            <param name="duration">The duration to animate</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.ValidateAxis">
            <summary>
            Called by the UltrachartSurface internally to validate current axis during render pass
            </summary>
            <remarks>Throws if <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AutoTicks"/> is False
            and <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MajorDelta"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.MinorDelta"/> aren't set</remarks>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.Clear">
            <summary>
            Clears the axis of tick-marks and labels 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.GetUndefinedRange">
            <summary>
            Returns an undefined <see cref="T:Ecng.Xaml.Charting.IRange"/>, called internally by Ultrachart to reset the VisibleRange of an axis to an undefined state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IAxis.GetDefaultNonZeroRange">
            <summary>
            Returns an default non zero <see cref="T:Ecng.Xaml.Charting.IRange"/>, called internally by Ultrachart to reset the VisibleRange of an axis to an undefined state
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.CurrentDatapointPixelSize">
            <summary>
            Gets the current data-point size in pixels
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.IGridLinesPanel">
            <summary>
            Defines the interface to the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.GridLinesPanel"/>, a canvas control which displays grid lines behind the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IGridLinesPanel.Clear(Ecng.Xaml.Charting.XyDirection)">
            <summary>
            Clears the grid lines in a specific direction
            </summary>
            <param name="xyDirection">The <see cref="T:Ecng.Xaml.Charting.XyDirection"/> to clear in, e.g. <see cref="F:Ecng.Xaml.Charting.XyDirection.XDirection"/> clears the X-Axis gridlines</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IGridLinesPanel.AddLine(Ecng.Xaml.Charting.XyDirection,System.Windows.Shapes.Line)">
            <summary>
            Adds a line to the panel in the specific <see cref="T:Ecng.Xaml.Charting.XyDirection"/>
            </summary>
            <param name="xyDirection">The <see cref="T:Ecng.Xaml.Charting.XyDirection"/> to clear in, e.g. <see cref="F:Ecng.Xaml.Charting.XyDirection.XDirection"/> adds an X-Axis gridline</param>
            <param name="line">The line to add</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IGridLinesPanel.Width">
            <summary>
            Gets the width of the panel in pixels
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IGridLinesPanel.Height">
            <summary>
            Gets the height of the panel in pixels
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Axes.IGridLinesPanel.BorderThickness">
            <summary>
            Gets the thickness of any border applied to the panel
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IGridLinesPanel.GenerateElement(System.Int32,Ecng.Xaml.Charting.XyDirection,System.Windows.Style)">
            <summary>
            Generates and adds a <see cref="T:System.Windows.Shapes.Line"/> element to the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.GridLinesPanel"/>. Applies the direction and style to the line as 
            well as Id so they may be re-used (pooled)
            </summary>
            <param name="lineId">The line Id</param>
            <param name="xyDirection">The direction, X or Y</param>
            <param name="lineStyle">The style to apply to the line</param>
            <returns>The <see cref="T:System.Windows.Shapes.Line"/> instance, which has been added to the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.GridLinesPanel"/></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.IGridLinesPanel.RemoveElementsAfter(Ecng.Xaml.Charting.XyDirection,System.Int32)">
            <summary>
            Removes all <see cref="T:System.Windows.Shapes.Line"/> instances after the specified index. This method is used when re-drawing the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> 
            when the number of lines has reduced from one redraw to the next. 
            </summary>
            <param name="xyDirection">The direction to clear, X or Y</param>
            <param name="index">The index to remove after (inclusive)</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis">
            <summary>
            Provides a Linear, Value TimeSpan Axis, capable of rendering TimeSpan ticks on the X-Axis of a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>. 
            </summary>
            <remarks>
            <para>All <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/> derived types have a <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TextFormatting"/> property to define axis text labels, however a more advanced
            way of defining axis label text is via the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.LabelProvider"/> property - expecting a custom <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/> derived type. </para>
            <para>In order to separately format cursor labels please see the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CursorTextFormatting"/> or again implement a customer <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.ILabelProvider"/>. </para>
            <para>All axis types have many properties to define how they operate. These include <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorGridLines"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMinorGridLines"/>, 
            <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorTicks"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMinorTicks"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawMajorBands"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.DrawLabels"/>. </para>
            <para>Finally, all axis components can be styled. Please see the examples suite, the XAML Styling example to see how to use XAML to style axis elements.</para>
            </remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis.GetUndefinedRange">
            <summary>
            Returns an undefined <see cref="T:Ecng.Xaml.Charting.IRange" />, called internally by Ultrachart to reset the VisibleRange of an axis to an undefined state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis.CoerceZeroRange(Ecng.Xaml.Charting.IRange)">
            <summary>
            Coerce <seealso cref="T:Ecng.Xaml.Charting.IRange"/> if current range is zero range
            </summary>
            <param name="maximumRange">Current maximum range</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis.GetDefaultNonZeroRange">
            <summary>
            Returns an default non zero <see cref="T:Ecng.Xaml.Charting.IRange" />, called internally by Ultrachart to reset the VisibleRange of an axis to an undefined state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis.ToVisibleRange(System.IComparable,System.IComparable)">
            <summary>
            When overriden in a derived class, converts a Min Max <see cref="T:System.IComparable" /> value into an <see cref="T:Ecng.Xaml.Charting.IRange" /> of the correct type for this axis
            </summary>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <returns>
            The <see cref="T:Ecng.Xaml.Charting.IRange" /> instance
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis.GetDeltaCalculator">
            <summary>
            Returns an instance of an 
            <see cref="T:Ecng.Xaml.Charting.Numerics.IDeltaCalculator" /> which is used to compute the data-values of 
            <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxisBase.MajorDelta" />, 
            <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxisBase.MinorDelta" />. 
            Overridden by derived types to allow calculations specific to that axis type.
            </summary>
            <returns>
            An <see cref="T:Ecng.Xaml.Charting.Numerics.IDeltaCalculator" /> instance
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis.ConvertTickToDataValue(System.IComparable)">
            <summary>
            When overridden in a derived class, converts a tick value to a data value. For instance, this may be overridden in the
            <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis" /> to convert between indices and DateTimes
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis.IsOfValidType(Ecng.Xaml.Charting.IRange)">
            <summary>
            Checks whether <paramref name="range" /> is not Null and is of valid type for this axis
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanAxis.GetSupportedTypes">
            <summary>
            Returns a list of types which current axis is designed to work with
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanLabelProvider">
            <summary>
            The DateTimeLabelFormatter is a pass-through which uses the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.TextFormatting"/> and <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.CursorTextFormatting"/> properties
            to format axis and cursor label texts. 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanLabelProvider.FormatCursorLabel(System.IComparable)">
            <summary>
            Formats a label for the cursor, from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted cursor label string
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TimeSpanLabelProvider.FormatLabel(System.IComparable)">
            <summary>
            Formats a label for the axis from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted label string
            </returns>
            <exception cref="T:System.InvalidOperationException">The DateTimeLabelFormatter is only valid on instances of DateTimeAxis</exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Axes.TradeChartAxisLabelProvider">
            <summary>
            A LabelFormatter instance to use on stock charts. Designed to be used with the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/> and applied by default on the <see cref="T:Ecng.Xaml.Charting.UltraStockChart"/> control
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TradeChartAxisLabelProvider.Init(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Called when the label formatted is initialized, with the parent axis instance
            </summary>
            <param name="parentAxis">The parent <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis" /> instance</param>
            <exception cref="T:System.InvalidOperationException">The TradeChartAxisLabelFormatter is only valid on instances of CategoryDateTimeAxis</exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TradeChartAxisLabelProvider.OnBeginAxisDraw">
            <summary>
            Called at the start of an axis render pass, before any labels are formatted for the current draw operation
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TradeChartAxisLabelProvider.FormatCursorLabel(System.IComparable)">
            <summary>
            Formats a label for the cursor, from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted cursor label string
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Axes.TradeChartAxisLabelProvider.FormatLabel(System.IComparable)">
            <summary>
            Formats a label for the axis from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted label string
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotationCanvas">
            <summary>
            Defines the base interface for annotation canvas
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotationCanvas.Children">
            <summary>
            Gets children elements of current annotation canvas
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationSurface">
            <summary>
            A canvas which is used to place annotations on chart
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.SeriesValueAxisMarkerAnnotation">
            <summary>
            Used by <see cref="T:Ecng.Xaml.Charting.ChartModifiers.SeriesValueModifier"/> to create AxisMarkers which are bound to the series latest Y value in a viewport.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.SeriesValueAxisMarkerAnnotation.#ctor">
            <summary>
            Initializes a new <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.SeriesValueAxisMarkerAnnotation"/> instance.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotationCollection">
            <summary>
            Contains a collection of <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation"/> instances, which allow custom vertical lines
            over or under the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotationCollection.ClearItems">
            <summary>
            Clears the items in the collection
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AdornerBase.Services">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/> which provides access to services throughout Ultrachart. 
            ServiceContainers are created one per <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AdornerBase.ParentCanvas">
            <summary>
            Gets or sets the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to perform operations on
            </summary>
            <value>The parent surface.</value>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AdornerBase.OnModifierDoubleClick(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse DoubleClick occurs on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AdornerBase.OnModifierMouseDown(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AdornerBase.OnModifierMouseMove(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AdornerBase.OnModifierMouseUp(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AdornerBase.OnModifierMouseWheel(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse Wheel is scrolled on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse wheel operation</param>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AdornerBase.IsEnabled">
            <summary>
            Gets or sets whether this Adorner is enabled. 
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.AnchorPointAnnotation">
            <summary>
            An Anchor-Point annotation is an <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation"/> which only has one X1,Y1 point. 
            This annotation may be anchored around the coordinate using various alignmnets. See the <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AnchorPointAnnotation.HorizontalAnchorPoint"/> and <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AnchorPointAnnotation.VerticalAnchorPoint"/> properties
            for more information
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnchorPointAnnotation.HorizontalAnchorPointProperty">
            <summary>
            Defines the HorizontalAnchorPoint DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnchorPointAnnotation.VerticalAnchorPointProperty">
            <summary>
            Defines the VerticalAnchorPointProperty DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnchorPointAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnchorPointAnnotation" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnchorPointAnnotation.HorizontalAnchorPoint">
            <summary>
            Gets or sets the <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AnchorPointAnnotation.HorizontalAnchorPoint" />.
            The value of Left means the X1,Y1 coordinate of the annotation is on the Left horizontally.
            The value of Center means the X1,Y1 coordinate of the annotation is at the center horizontally.
            The value of Right means the X1,Y1 coordinate of the annotation is at the right horizontally.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnchorPointAnnotation.VerticalAnchorPoint">
            <summary>
            Gets or sets the <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AnchorPointAnnotation.VerticalAnchorPoint" />.
            The value of Top means the X1,Y1 coordinate of the annotation is on the Top vertically.
            The value of Center means the X1,Y1 coordinate of the annotation is at the center vertically.
            The value of Bottom means the X1,Y1 coordinate of the annotation is at the Bottom vertically.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnchorPointAnnotation.VerticalOffset">
            <summary>
            Gets the computed VerticalOffset in pixels to apply to this annotation when placing
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnchorPointAnnotation.HorizontalOffset">
            <summary>
            Gets the computed HorizontalOffset in pixels to apply to this annotation when placing
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnchorPointAnnotation.GetAnchorAnnotationCoordinates(Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates)">
            <summary>
            Applies <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AnchorPointAnnotation.HorizontalOffset"/> and <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AnchorPointAnnotation.VerticalOffset"/> to annotationCoordinates
            </summary>
            <param name="annotationCoordinates"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnchorPointAnnotation.GetSelectedCursor">
            <summary>
            Gets the <see cref="T:System.Windows.Input.Cursor" /> to use for the annotation when selected
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.LabelPlacement">
            <summary>
            Enumeration constants to define label placement
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LabelPlacement.Right">
            <summary>Places on the right</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LabelPlacement.TopRight">
            <summary>Places at the top right</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LabelPlacement.BottomRight">
            <summary>Places at the bottom right</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LabelPlacement.Bottom">
            <summary>Places at the bottom</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LabelPlacement.Left">
            <summary>Places on the left</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LabelPlacement.TopLeft">
            <summary>Places on the top left</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LabelPlacement.BottomLeft">
            <summary>Places on the bottom left</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LabelPlacement.Top">
            <summary>Places at the top</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LabelPlacement.Axis">
            <summary>Places on the axis</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LabelPlacement.Auto">
            <summary>Automatic Placement (Default)</summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel">
            <summary>
            Defines an AnnotationLabel which may be used in <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalLineAnnotation"/> and <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation"/> instances
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.TextProperty">
            <summary>Defines the Text DependnecyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.LabelPlacementProperty">
            <summary>Defines the LabelPlacement DependnecyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.LabelStyleProperty">
            <summary>Defines the LabelStyle DependnecyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.AxisLabelStyleProperty">
            <summary>Defines the AxisLabel DependnecyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.CornerRadiusProperty">
            <summary>Defines the CornerRadius DependnecyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.RotationAngleProperty">
            <summary>Defines the RotationAngle DependnecyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.CanEditTextProperty">
            <summary>Defines the CanEditText DependnecyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.TextFormattingProperty">
            <summary>Defines the TextFormatting DependnecyProperty</summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.IsAxisLabel">
            <summary>
            Returns <value>True</value> if <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.LabelPlacement"/> == <value>LabelPlacement.Axis</value>
            or if ParentAnnotation.ResolveAutoPlacement() == <value>LabelPlacement.Axis</value>
            in case when <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.LabelPlacement"/> == <value>LabelPlacement.Auto</value>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.CanEditText">
            <summary>
            Gets or sets whether the text in the label is editable
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.RotationAngle">
            <summary>
            Gets or sets the angle, in degrees, of clockwise rotation
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.ParentAnnotation">
            <summary>
            Gets or sets the parent <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase"/> that this label is attached to
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.Text">
            <summary>
            Gets or sets the Text of the label
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.LabelPlacement">
            <summary>
            Gets or sets the <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.LabelPlacement"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.TextFormatting">
            <summary>
            Gets or sets the TextFormatting to use on the label, when the Text property is bound to a Data-Value. 
            This works in a similar way to the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/> TextFormatting property
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.LabelStyle">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Style"/> to apply to the label
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.AxisLabelStyle">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Style"/> to apply to the Axis Label
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.CornerRadius">
            <summary>
            Gets or sets the CornerRadius of the Label element
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />. In simplest terms, this means the method is called just before a UI element displays in an application. For more information, see Remarks.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel.GetAndAssertTemplateChild``1(System.String)">
            <summary>
            Gets the TemplateChild by the specified name and casts to type <typeparamref name="T" />, asserting that the result is not null
            </summary>
            <typeparam name="T">The Type of the templated part</typeparam>
            <param name="childName">Name of the templated part.</param>
            <returns>The template part instance</returns>
            <exception cref="T:System.InvalidOperationException">Unable to Apply the Control Template. Child is missing or of the wrong type</exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotationResizeAdorner">
            <summary>
            Defines the inteface to an annotation resize adorner, which is placed over an <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase"/>
            when selected, allowing the user to move or resize it by dragging
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotationResizeAdorner.AdornerMarkers">
            <summary>
            Gets the Adorner Markers placed by this annotation (e.g. grippers to resize, move)
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationResizeAdorner.AdornerMarkers">
            <summary>
            Gets the Adorner Markers placed by this annotation (e.g. grippers to resize, move)
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.CustomAnnotation">
            <summary>
            CustomAnnotation is a ContentControl which can be overlaid on the annotation surfaces. For examples of use, see the Annotations Are Easy and Create Annotations Dynamically examples in the trial download
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.CustomAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.CustomAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.CustomAnnotation.OnContentChanged(System.Object,System.Object)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes.
            </summary>
            <param name="oldContent">The old value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
            <param name="newContent">The new value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.CustomAnnotation.OnContentTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplate" /> property changes.
            </summary>
            <param name="oldContentTemplate">The old value of the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplate" /> property.</param>
            <param name="newContentTemplate">The new value of the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplate" /> property.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.CustomAnnotation.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /> element
            </summary>
            <param name="point">The point to test</param>
            <returns>
            true if the Point is within the bounds
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase">
            <summary>
            Provides a base class for HorizontalLineAnnotation, VerticalLineAnnotation
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.ShowLabelProperty">
            <summary>
            Defines the ShowLabel Property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.DefaultLabelValueProperty">
            <summary>
            Defines the DefaultLabelValue Property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.DefaultTextFormattingProperty">
            <summary>
            Defines the DefaultTextFormatting Property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.LabelPlacementProperty">
            <summary>
            Defines the LabelPlacement Property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.LabelValueProperty">
            <summary>
            Defines the LabelValue Property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.LabelTextFormattingProperty">
            <summary>
            Defines the LabelTextFormatting Property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.FormattedLabelProperty">
            <summary>
            Defines the FormattedLabel Property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.AnnotationLabelsProperty">
            <summary>
            Defines the AnnotationLabels Property
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.DefaultLabelValue">
            <summary>
            Gets or sets value which labels will be bound to
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.DefaultTextFormatting">
            <summary>
            Gets the default text formatting value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.FormattedLabel">
            <summary>
            Gets the formatted label value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.AnnotationLabels">
            <summary>
            Gets or sets a collection of annotation labels
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.ShowLabel">
            <summary>
            Gets or sets value, indicating whether show the default label or not
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.LabelPlacement">
            <summary>
            Gets or sets placement for the default label
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.LabelValue">
            <summary>
            Gets or sets a value for the default label
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.LabelTextFormatting">
            <summary>
            Gets or sets formatting string which is applied to all annotation labels
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.AttachLabels(System.Collections.Generic.IEnumerable{Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel})">
            <summary>
            Adds a collection of <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel"/> instances to the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase"/>
            </summary>
            <param name="labels">The collection of labels to add</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.DetachLabels(System.Collections.Generic.IEnumerable{Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel})">
            <summary>
            Removes a collection of <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel"/> instances to the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase"/>
            </summary>
            <param name="labels">The collection of labels to remove</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.Attach(Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel)">
            <summary>
            Called internally to attach an <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel"/> to the current instance
            </summary>
            <param name="label">The AnnotationLabel to attach</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.GetUsedAxis">
            <summary>
            Returns axis, which current annotation shows data value for
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.OnXAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Virtual method to override if you wish to be notified that the parent <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.XAxes" /> has changed
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.InvalidateLabel(Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel)">
            <summary>
            Invalidates annotation label
            </summary>
            <param name="annotationLabel">Label to invalidate</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.OnYAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Virtual method to override if you wish to be notified that the parent <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.YAxes" /> has changed
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.OnYAxisIdChanged">
            <summary>
            Virtual method to override if you wish to be notified that the <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.YAxisId" /> has changed
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.OnXAxisIdChanged">
            <summary>
            Virtual method to override if you wish to be notified that the <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.XAxisId"/> has changed
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.OnAxisAlignmentChanged(Ecng.Xaml.Charting.Visuals.Axes.IAxis,Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment)">
            <summary>
            Virtual method to override if you wish to be notified that the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.AxisAlignment" /> has changed
            </summary>
            <param name="axis"></param>
            <param name="oldAlignment"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.MakeInvisible">
            <summary>
            Hides current instance of <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.MakeVisible(Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates)">
            <summary>
            Hides current instance of <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.OnAttached">
            <summary>
            Called when the Annotation is attached to parent surface
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.AddLabel">
            <summary>
            Adds new label to <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.AnnotationLabels"/>
            </summary>
            <returns>Label which has been created</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.TryPlaceAxisLabels(System.Windows.Point)">
            <summary>
            Try to place all annotation labels on ModifierAxisCanvas of appropriate axis at <paramref name="offset"/> position.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.PlaceAxisLabel(Ecng.Xaml.Charting.Visuals.Axes.IAxis,Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel,System.Windows.Point)">
            <summary>
            Place <paramref name="axisLabel"/> on ModifierAxisCanvas of appropriate axis at <paramref name="offset"/> position.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.Detach(Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel)">
            <summary>
            Detaches the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel"/> from the current <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase"/>
            </summary>
            <param name="label">The label to detach</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.ApplyPlacement(Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel,Ecng.Xaml.Charting.Visuals.Annotations.LabelPlacement)">
            <summary>
            Positions the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel"/> using the value of the <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.LabelPlacement"/> enum
            </summary>
            <param name="label">The label to place</param>
            <param name="placement">Placement arguments</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.GetSelectedCursor">
            <summary>
            Gets the <see cref="T:System.Windows.Input.Cursor"/> to use for the annotation when selected
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationWithLabelsBase.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /> element
            </summary>
            <param name="point">The point to test</param>
            <returns>
            true if the Point is within the bounds
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalAnchorPoint">
            <summary>
            Enumeration constants used by <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.IAnchorPointAnnotation"/> to define horizontal alignment around the X1,Y1 coordinates
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalAnchorPoint.Left">
            <summary>
            Align Left
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalAnchorPoint.Center">
            <summary>
            Align Center
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalAnchorPoint.Right">
            <summary>
            Align Right
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.IAnchorPointAnnotation">
            <summary>
            Defines the interface to an Anchor-Point annotation, which is an <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation"/> which only has one X1,Y1 point. 
            This annotation may be anchored around the coordinate using various alignmnets. See the <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnchorPointAnnotation.HorizontalAnchorPoint"/> and <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnchorPointAnnotation.VerticalAnchorPoint"/> properties
            for more information
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnchorPointAnnotation.HorizontalAnchorPoint">
            <summary>
            Gets or sets the <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnchorPointAnnotation.HorizontalAnchorPoint"/>. 
            
            The value of Left means the X1,Y1 coordinate of the annotation is on the Left horizontally.
            The value of Center means the X1,Y1 coordinate of the annotation is at the center horizontally.
            The value of Right means the X1,Y1 coordinate of the annotation is at the right horizontally.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnchorPointAnnotation.VerticalAnchorPoint">
            <summary>
            Gets or sets the <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnchorPointAnnotation.VerticalAnchorPoint"/>. 
            
            The value of Top means the X1,Y1 coordinate of the annotation is on the Top vertically.
            The value of Center means the X1,Y1 coordinate of the annotation is at the center vertically.
            The value of Bottom means the X1,Y1 coordinate of the annotation is at the Bottom vertically.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnchorPointAnnotation.VerticalOffset">
            <summary>
            Gets the computed VerticalOffset in pixels to apply to this annotation when placing
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnchorPointAnnotation.HorizontalOffset">
            <summary>
            Gets the computed HorizontalOffset in pixels to apply to this annotation when placing
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotationAdorner">
            <summary>
            Defines the interface to an annotation adorner, which may be placed to drag, or resize an annotation
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotationAdorner.Initialize">
            <summary>
            Initializes this adorner.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotationAdorner.Clear">
            <summary>
            Clears child markers from the adorner layer
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotationAdorner.UpdatePositions">
            <summary>
            Causes a refresh to update the positions of the adorner
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotationAdorner.AdornedAnnotation">
            <summary>
            Gets the associated annotation that this instance adorns
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationBase">
            <summary>
            A base class with shared properties for <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotation"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalLineAnnotation"/> and <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationBase.StrokeDashArrayProperty">
            <summary>Defines the StrokeDashArray DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationBase.StrokeThicknessProperty">
            <summary>Defines the StrokeThickness DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationBase.StrokeProperty">
            <summary>Defines the Stroke DependencyProperty</summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationBase.Stroke">
            <summary>
            Gets or sets the Stroke brush of the line
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationBase.StrokeThickness">
            <summary>
            Gets or sets the StrokeThickness of the line
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationBase.StrokeDashArray">
            <summary>
            Gets or sets the StrokeDashArray of the line
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationBase.GetPropertiesFromIndex(System.Int32,System.Windows.DependencyProperty@,System.Windows.DependencyProperty@)">
            <summary>
            Used internally to derive the X1Property, Y1Property, X1Property, Y2Property pair for the given index around the annotation..
            
            e.g. index 0 returns X1,Y1
            index 1 returns X2,Y1
            index 2 returns X2,Y2
            index 3 returns X1,Y2
            </summary>
            <param name="index">The index</param>
            <param name="x">The X coordinate dependency property, either X1Property or X2Property</param>
            <param name="y">The Y coordinate dependency property, either Y1Property or Y2Property</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationBase.GetSelectedCursor">
            <summary>
            Gets the <see cref="T:System.Windows.Input.Cursor" /> to use for the annotation when selected
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotationBase.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /> element
            </summary>
            <param name="point">The point to test</param>
            <returns>
            true if the Point is within the bounds
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.LineArrowAnnotation">
            <summary>
            The LineArrowAnnotation provides a Line with X1,Y1,X2,Y2 coordinates and an arrow head at the tip. 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LineArrowAnnotation.HeadLengthProperty">
            <summary>
            Defines the HeadLength DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.LineArrowAnnotation.HeadWidthProperty">
            <summary>
            Defines the HeadWidth DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineArrowAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.LineArrowAnnotation" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.LineArrowAnnotation.HeadLength">
            <summary>
            Gets or sets the Head Length in pixels. Change this along with <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.LineArrowAnnotation.HeadWidth"/> to make the line-arrow head larger or smaller
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.LineArrowAnnotation.HeadWidth">
            <summary>
            Gets or sets the Head Length in pixels. Change this along with <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.LineArrowAnnotation.HeadLength"/> to make the line-arrow head larger or smaller
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineArrowAnnotation.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineArrowAnnotation.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /> element
            </summary>
            <param name="point">The point to test</param>
            <returns>
            true if the Point is within the bounds
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation">
            <summary>
            The AxisMarkerAnnotation provides an axis label which is data-bound to its Y-value. Used to place a marker on the Y-Axis it can give feedback about the latest value of a series, or 
            important points in a series. 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.FormattedValueProperty">
            <summary>
            Defines the FormattedValue DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.MarkerPointWidthProperty">
            <summary>
            Defines the MarkerPointWidth DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.LabelTemplateProperty">
            <summary>
            Defines the LabelTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.PointerTemplateProperty">
            <summary>
            Defines the PointerTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.AxisInfoProperty">
            <summary>
            Defines the AxisInfo DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.FormattedValue">
            <summary>
            Gets or sets the Formatted Value of the Axis Marker. By default this is data-bound to Y1
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.MarkerPointWidth">
            <summary>
            Gets or sets the Marker tip width, this is the width of the point of the marker in pixels. Default value is 8. 
            Change this property if the marker looks squashed!
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.LabelTemplate">
            <summary>
            Gets or sets label template of <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.PointerTemplate">
            <summary>
            Gets or sets pointer template of <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.Axis">
            <summary>
            Gets <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> intance where <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation"/> is placed 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.AxisInfo">
            <summary>
            Gets AxisInfo for current MarkerValue
            Used internally as DataContext for <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.PointerTemplate"/> and <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.LabelTemplate"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.OnAxisAlignmentChanged(Ecng.Xaml.Charting.Visuals.Axes.IAxis,Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment)">
            <summary>
            Virtual method to override if you wish to be notified that the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.AxisAlignment" /> has changed
            </summary>
            <param name="axis"></param>
            <param name="oldAlignment"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.Update(Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator{System.Double},Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator{System.Double})">
            <summary>
            Updates the coordinate calculators and refreshes the annotation position on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="xCoordinateCalculator">The XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1" /></param>
            <param name="yCoordinateCalculator">The YAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1" /></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.GetSelectedCursor">
            <summary>
            Gets the <see cref="T:System.Windows.Input.Cursor" /> to use for the annotation when selected
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.ToCoordinate(System.IComparable,System.Double,Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator{System.Double},Ecng.Xaml.Charting.XyDirection)">
            <summary>
            Converts a Data-Value to Pixel Coordinate
            </summary>
            <param name="dataValue">The Data-Value to convert</param>
            <param name="canvasMeasurement">The size of the canvas in the X or Y direction</param>
            <param name="coordCalc">The current <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1">Coordinate Calculator</see></param>
            <param name="direction">The X or Y direction for the transformation</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /> element
            </summary>
            <param name="point">The point to test</param>
            <returns>
            true if the Point is within the bounds
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.BoxAnnotation">
            <summary>
            Defines a rectangle or box annotation, which may be placed on the chart at specific X1,Y1,X2,Y2 coordinates
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.BoxAnnotation.CornerRadiusProperty">
            <summary>
            Defines the CornerRadius DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.BoxAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.BoxAnnotation" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.BoxAnnotation.CornerRadius">
            <summary>
            Gets or sets the CornerRadius of the box
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.BoxAnnotation.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.BoxAnnotation.GetSelectedCursor">
            <summary>
            Gets the <see cref="T:System.Windows.Input.Cursor" /> to use for the annotation when selected
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.BoxAnnotation.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /> element
            </summary>
            <param name="point">The point to test</param>
            <returns>
            true if the Point is within the bounds
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalLineAnnotation">
            <summary>
            A class for <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalLineAnnotation"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalLineAnnotation.HorizontalAlignmentProperty">
            <summary>
            Defines the HorizontalAlignment Property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalLineAnnotation.YDragStepProperty">
            <summary>
            Defines the YDragStep Property
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalLineAnnotation.#ctor">
            <summary>
            Creates new instance of <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalLineAnnotation"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalLineAnnotation.HorizontalAlignment">
            <summary>
            Gets or sets docking of <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalLineAnnotation"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalLineAnnotation.YDragStep">
            <summary>
            Gets or sets the value which determines a drag step for this <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalLineAnnotation"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalLineAnnotation.GetUsedAxis">
            <summary>
            Returns axis, which current annotation shows data value for
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalLineAnnotation.GetPropertiesFromIndex(System.Int32,System.Windows.DependencyProperty@,System.Windows.DependencyProperty@)">
            <summary>
            Used internally to derive the X1Property, Y1Property, X1Property, Y2Property pair for the given index around the annotation..
            e.g. index 0 returns X1,Y1
            index 1 returns X2,Y1
            index 2 returns X2,Y2
            index 3 returns X1,Y2
            </summary>
            <param name="index">The index</param>
            <param name="X"></param>
            <param name="Y"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.HorizontalLineAnnotation.SetBasePoint(System.Windows.Point,System.Int32,Ecng.Xaml.Charting.Visuals.Axes.IAxis,Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Called internally to marshal pixel points to X1,Y1,X2,Y2 values.
            Taking a pixel point (<paramref name="newPoint" />) and base point <paramref name="index" />, sets the X,Y data-values.
            </summary>
            <param name="newPoint">The pixel point</param>
            <param name="index">The base point index, where 0, 1, 2, 3 refer to the four corners of an Annotation</param>
            <param name="xAxis">The current X-Axis</param>
            <param name="yAxis">The current Y-Axis</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotation">
            <summary>
            Defines a read-only or editable Line annotation, which may be placed on the chart at specific X1,Y1,X2,Y2 coordinates
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotation" /> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.LineAnnotation.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation">
            <summary>
            Defines a Text annotation, which may be used to place read-only labels or read-write Textboxes on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation.CornerRadiusProperty">
            <summary>Defines the CornerRadius DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation.TextProperty">
            <summary>Defines the Text DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation.TextAlignmentProperty">
            <summary>Defines the TextAlignment DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation.TextStretchProperty">
            <summary>Defines the TextStretch DependencyProperty</summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation.CornerRadius">
            <summary>
            Gets or sets the CornerRadius of the TextAnnotation
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation.TextAlignment">
            <summary>
            Gets or sets the <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation.TextAlignment"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation.Text">
            <summary>
            Gets or sets the Text of the TextAnnotation
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation.TextStretch">
            <summary>
            Gets or sets how Text stretches to fill its container. Applicable if the X1,Y1,X2,Y2 properties are all set, else text will be uniform
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation.FocusInputTextArea">
            <summary>
            Focuses the text input area on the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation.RemoveFocusInputTextArea">
            <summary>
            Remove focus from input text area. Applicable only for Text and label annotation
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /> element
            </summary>
            <param name="point">The point to test</param>
            <returns>
            true if the Point is within the bounds
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCanvas">
            <summary>
            Enumeration constants to define the Annotation Canvas that an <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation"/> is placed on
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCanvas.AboveChart">
            <summary>
            The annotation is placed above the chart
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCanvas.BelowChart">
            <summary>
            The annotation is placed below the chart
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCanvas.YAxis">
            <summary>
            The annotation is placed on the YAxis
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCanvas.XAxis">
            <summary>
            The annotation is placed on the XAxis
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode">
            <summary>
            Enumeration constants to define the Coordinate mode used to place an annotation
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.Absolute">
            <summary>
            Absolute, requires that coordinates X1,Y1,X2,Y2 are data-values
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.Relative">
            <summary>
            Relative, requires that coordinates X1,Y1,X2,Y2 are double values between 0.0 and 1.0
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.RelativeX">
            <summary>
            RelativeX, requires that coordinates X1,X2 are double values between 0.0 and 1.0, whereas Y1,Y2 are data-values
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.RelativeY">
            <summary>
            RelativeY, requires that coordinates Y1,Y2 are double values between 0.0 and 1.0, whereas X1,X2 are data-values
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates">
            <summary>
            Used internally by the Annotation API. Struct to hold transformed coordinates for placement of an annotation on the chart.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates.X1Coord">
            <summary>Gets or sets the X1 coordinate.</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates.X2Coord">
            <summary>Gets or sets the X2 coordinate.</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates.Y1Coord">
            <summary>Gets or sets the Y1 coordinate.</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates.Y2Coord">
            <summary>Gets or sets the Y2 coordinate.</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates.YOffset">
            <summary>Gets or sets the offset of the YAxis which the annotation is associated with.</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates.XOffset">
            <summary>Gets or sets the offset of the YAxis which the annotation is associated with.</summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase">
            <summary>
            Provides a base class for annotations to be rendered over the chart
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.XAxisIdProperty">
            <summary>Defines the YAxisId DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.YAxisIdProperty">
            <summary>Defines the YAxisId DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.X1Property">
            <summary>Defines the X1 DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.Y1Property">
            <summary>Defines the Y1 DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.X2Property">
            <summary>Defines the X2 DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.Y2Property">
            <summary>Defines the Y2 DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.AnnotationCanvasProperty">
            <summary>Defines the AnnotationCanvas DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.CoordinateModeProperty">
            <summary>Defines the CoordinateMode DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.IsSelectedProperty">
            <summary>Defines the IsSelected DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.IsEditableProperty">
            <summary>Defines the IsEditable DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.IsHiddenProperty">
            <summary>Defines the IsHidden DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.DragDirectionsProperty">
            <summary>Defines the DragDirections DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.ResizeDirectionsProperty">
            <summary>Defines the ResizeDirection DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.CanEditTextProperty">
            <summary>Defines the CanEditText DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.ResizingGripsStyleProperty">
            <summary>
            Defines the ResizingGripsStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.AnnotationRoot">
            <summary>
            The Root Element of the Annotation to be displayed on the Canvas
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.Selected">
            <summary>
            Occurs when <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation"/> becomes selected. 
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.Unselected">
            <summary>
            Occurs when <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation"/> becomes unselected. 
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.DragStarted">
            <summary>
            Occurs when a Drag or move operation starts
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.DragEnded">
            <summary>
            Occurs when a Drag or move operation ends
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.DragDelta">
            <summary>
            Occurs when current <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase"/> is dragged or moved
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.IsHiddenChanged">
            <summary>
            Occurs when the <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.IsHidden"/> property is changed
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.MouseMiddleButtonDown">
            <summary>
            Occurs when the middle mouse button is pressed while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.MouseMiddleButtonUp">
            <summary>
            Occurs when the middle mouse button is released while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>. However, this event will only be raised if a caller marks the preceding <see cref="E:System.Windows.UIElement.MouseRightButtonDown"/> event as handled; see Remarks.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.ResizingGripsStyle">
            <summary>
            Gets or sets the Style which is applied to the resizing grips appearing when the annotation gets selected.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.CanEditText">
            <summary>
            Gets or sets whether text can be edited on this <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase"/>. 
            Supported by Text or label annotations only
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.IsResizable">
            <summary>
            Gets value, indicates whether current instance is resizable
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.XAxisId">
            <summary>
            Gets or sets the ID of the X-Axis which this Annotation is measured against
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.YAxisId">
            <summary>
            Gets or sets the ID of the Y-Axis which this Annotation is measured against
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.DragDirections">
            <summary>
            Limits the Drag direction when dragging the annotation using the mouse, e.g in the X-Direction, Y-Direction or XyDirection. See the <see cref="T:Ecng.Xaml.Charting.XyDirection"/> enumeration for options
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.ResizeDirections">
            <summary>
            Limits the Resize direction when resiaing the annotation using the mouse, e.g in the X-Direction, Y-Direction or XyDirection. See the <see cref="T:Ecng.Xaml.Charting.XyDirection"/> enumeration for options
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.CoordinateMode">
            <summary>
            Gets or sets the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode"/> to use when placing the annotation. E.g. the default of Absolute requires that X1,Y1 coordinates are data-values. The value
            of Relative requires that X1,Y1 are double values from 0.0 to 1.0
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.AnnotationCanvas">
            <summary>
            Gets or sets the <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.AnnotationCanvas"/> to place the annotation on. The default is <see cref="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCanvas.AboveChart"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.IsSelected">
            <summary>
            Gets or sets whether the current annotation is selected. When selected, an Adorner is placed over the annotation to allow dynamic resizing and dragging by the user. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.IsEditable">
            <summary>
            Gets or sets whether the current annotation is editable. When editable, the user may click to select and interact with the annotation
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.IsHidden">
            <summary>
            Gets or sets value, indicates whether current annotation was hidden by <see cref="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.Hide"/> call
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.X1">
            <summary>
            Gets or sets the X1 Coordinate of the Annotation. 
            
            For <see cref="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.Absolute"/>, this must be a data-value on the X-Axis such as a DateTime for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/>, double for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/> or integer index for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/>.
            
            For <see cref="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.Relative"/>, this must be a double value between 0.0 and 1.0, where 0.0 is the far left of the XAxis and 1.0 is the far right.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.X2">
            <summary>
            Gets or sets the X2 Coordinate of the Annotation. 
            
            For <see cref="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.Absolute"/>, this must be a data-value on the X-Axis such as a DateTime for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/>, double for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/> or integer index for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/>.
            
            For <see cref="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.Relative"/>, this must be a double value between 0.0 and 1.0, where 0.0 is the far left of the XAxis and 1.0 is the far right.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.Y1">
            <summary>
            Gets or sets the Y1 Coordinate of the Annotation.
            
            For <see cref="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.Absolute"/>, this must be a data-value on the Y-Axis such as a double for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/> 
            
            For <see cref="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.Relative"/>, this must be a double value between 0.0 and 1.0, where 0.0 is the top of the YAxis and 1.0 is the bottom
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.Y2">
            <summary>
            Gets or sets the Y2 Coordinate of the Annotation. 
            
            For <see cref="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.Absolute"/>, this must be a data-value on the Y-Axis such as a double for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/> 
            
            For <see cref="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.Relative"/>, this must be a double value between 0.0 and 1.0, where 0.0 is the top of the YAxis and 1.0 is the bottom
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.GetSelectedCursor">
            <summary>
            Gets the <see cref="T:System.Windows.Input.Cursor"/> to use for the annotation when selected
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.OnDragStarted">
            <summary>
            Raises the <see cref="E:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.DragStarted"/> event, called when a drag operation starts
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.OnDragEnded">
            <summary>
            Raises the <see cref="E:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.DragEnded"/> event, called when a drag operation ends
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.OnDragDelta">
            <summary>
            Raises the <see cref="E:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.DragDelta"/> event, called when a drag operation is in progress and each time the X1 Y1 X2 Y2 points update in the annotation
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.IsAttached">
            <summary>
            Gets or sets whether this Element is attached to a parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <value>
            <c>true</c> if this instance is attached; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.YAxis">
            <summary>
            Gets the YAxis, which current annotation is bound to
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.XAxis">
            <summary>
            Gets the XAxis, which current annotation is bound to
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.AnnotationOverlaySurface">
            <summary>
            Gets the canvas over the Series on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.AnnotationUnderlaySurface">
            <summary>
            Gets the canvas under the Series on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.Ecng#Xaml#Charting#Visuals#Annotations#IAnnotation#OnXAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises notification when parent <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.XAxes"/> changes.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.Ecng#Xaml#Charting#Visuals#Annotations#IAnnotation#OnYAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises notification when parent <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.YAxes"/> changes.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.OnAxisAlignmentChanged(Ecng.Xaml.Charting.Visuals.Axes.IAxis,Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment)">
            <summary>
            Virtual method to override if you wish to be notified that the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.AxisAlignment"/> has changed
            </summary>
            <param name="axis"></param>
            <param name="oldAlignment"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.OnXAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Virtual method to override if you wish to be notified that the parent <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.XAxes"/> has changed
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.OnYAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Virtual method to override if you wish to be notified that the parent <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.YAxes"/> has changed
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.OnYAxisIdChanged">
            <summary>
            Virtual method to override if you wish to be notified that the <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.YAxisId"/> has changed
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.OnXAxisIdChanged">
            <summary>
            Virtual method to override if you wish to be notified that the <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.XAxisId"/> has changed
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.FocusInputTextArea">
            <summary>
            Focuses the input text area. Applicable only for Text and label annotations
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.RemoveFocusInputTextArea">
            <summary>
            Remove focus from input text area. Applicable only for Text and label annotation
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.OnAttached">
            <summary>
            Called when the Annotation is attached to parent surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.OnAnnotationLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Gets called as soon as the Loaded event occurs.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.AttachInteractionHandlersTo(System.Windows.FrameworkElement)">
            <summary>
            Attaches handlers to particular events of passed object
            </summary>
            <param name="source">Mouse events source</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.OnAnnotationMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Contains interaction logic of handling mouse down event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.OnAnnotationMouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Contains interaction logic of handling mouse up event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.OnAnnotationMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Contains interaction logic of handling mouse move event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.OnDetached">
            <summary>
            Called immediately before the Annotation is detached from its parent surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.DetachInteractionHandlersFrom(System.Windows.FrameworkElement)">
            <summary>
            When called in a derived class, detaches any mouse events which may have been previously attached to the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase"/>
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.Refresh">
            <summary>
            Refreshes the annnotation position on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>, without causing a full redraw of the chart
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.Update(Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator{System.Double},Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator{System.Double})">
            <summary>
            Updates the coordinate calculators and refreshes the annotation position on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
            <param name="xCoordinateCalculator">The XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1" /></param>
            <param name="yCoordinateCalculator">The YAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1" /></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.Hide">
            <summary>
            Hides the Annotation by removing adorner markers from the parent <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AdornerLayerCanvas"/>
            and setting Visibility to Collapsed
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.Show">
            <summary>
            Shows annotation which being hidden by <see cref="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.Hide"/> call
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.MakeInvisible">
            <summary>
            Called internally by layout system when annotation is out of surface's bounds
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.HideAdornerMarkers">
            <summary>
            Hides adorner markers by calling <see cref="M:Ecng.Xaml.Charting.Visuals.Annotations.AdornerBase.Clear"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.GetUsedAdorners``1(System.Windows.Controls.Canvas)">
            <summary>
            Gets a collection of the Adorners currently used on the Annotation, given the Annotation AdornerLayer Canvas
            </summary>
            <typeparam name="T">The type of Adorners to search for</typeparam>
            <param name="adornerLayer">The adorner layer canvas</param>
            <returns>A list of adorners matching type T</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.MakeVisible(Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates)">
            <summary>
            Called internally by layout system when annotation come into surface's bounds
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.IsInBounds(Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates,Ecng.Xaml.Charting.Visuals.Annotations.IAnnotationCanvas)">
            <summary>
            Performs a simple rectangular bounds-check to see if the X1,X2,Y1,Y2 coordinates passed in are within the Canvas extends
            </summary>
            <param name="coordinates">The normalised AnnotationCoordinates</param>
            <param name="canvas">The canvas to check if the annotation is within bounds</param>
            <returns>True if in bounds</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.PlaceAnnotation(Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates)">
            <summary>
            Override in derived classes to handle specific placement of the annotation at the given <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates"/>
            </summary>
            <param name="coordinates">The normalised <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates"/></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.GetCanvas(Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCanvas)">
            <summary>
            Gets the Canvas instance for this annotation
            </summary>
            <param name="annotationCanvas">The <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.AnnotationCanvas"/> enumeration</param>
            <returns>The canvas instance</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.OnRenderablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependencyProperty changed handler which can be used to refresh the annotation on property changed
            </summary>
            <param name="d">The DependencyObject sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.OnAnnotationPositionChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependencyProperty changed handler which can be used to refresh the annotation on property and position changed 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.UpdatePosition(System.Windows.Point,System.Windows.Point)">
            <summary>
            Updates the position and values of the annotation during a drag or resize operation, by setting X1,Y1,X2,Y2 and X,Y pixel coordinates together, 
            from a pixel coordinate input
            </summary>
            <param name="point1">The first input pixel coordinate</param>
            <param name="point2">The second input pixel coordinate</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.FromCoordinates(System.Windows.Point)">
            <summary>
            Converts pixel coordinates to data-values
            </summary>
            <param name="coords">The X, Y coordinates </param>
            <returns>
            The data values
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.FromCoordinates(System.Double,System.Double)">
            <summary>
            Converts pixel coordinates to data-values
            </summary>
            <param name="xCoord">The X coordinate</param>
            <param name="yCoord">The Y coordinate</param>
            <returns>
            The data values
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.FromCoordinate(System.Double,Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Converts a pixel coordinate to data-value
            </summary>
            <param name="coord">The pixel coordinate.</param>
            <param name="axis">The axis for which the data value is calculated</param>
            <returns>
            The datavalue
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.FromRelativeCoordinate(System.Double,Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Converts a relative coordinate (e.g. 0.0 to 1.0) to data-value
            </summary>
            <param name="coord">The relative coordinate, in the range of 0.0 to 1.0 for extremes of the viewport.</param>
            <param name="axis">The axis for which the data value is calculated</param>
            <returns>
            The datavalue
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.ToCoordinate(System.IComparable,Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Converts a data value to pixel coordinate
            </summary>
            <param name="dataValue">The data value to convert</param>
            <param name="axis">The axis for which the coordinate is calculated</param>
            <returns>The coordinate in pixels</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.ToCoordinates(System.IComparable,System.IComparable,Ecng.Xaml.Charting.Visuals.Annotations.IAnnotationCanvas,Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator{System.Double},Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator{System.Double})">
            <summary>
            Converts a data-values to pixel coordinates
            </summary>
            <param name="xDataValue">The X data-value, e.g. value of X1 or X2</param>
            <param name="yDataValue">The Y data-value, e.g. value of Y1 or Y2 </param>
            <param name="canvas">The <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.AnnotationCanvas"/> </param>
            <param name="xCoordCalc">The current X <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1" /> valid for the current render pass</param>
            <param name="yCoordCalc">The current Y <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1" /> valid for the current render pass</param>
            <returns>
            The pixel coordinates
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.ToCoordinate(System.IComparable,System.Double,Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator{System.Double},Ecng.Xaml.Charting.XyDirection)">
            <summary>
            Converts a Data-Value to Pixel Coordinate
            </summary>
            <param name="dataValue">The Data-Value to convert</param>
            <param name="canvasMeasurement">The size of the canvas in the X or Y direction</param>
            <param name="coordCalc">The current <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1">Coordinate Calculator</see></param>
            <param name="direction">The X or Y direction for the transformation</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.GetCoordinates(Ecng.Xaml.Charting.Visuals.Annotations.IAnnotationCanvas,Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator{System.Double},Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator{System.Double})">
            <summary>
            Gets an <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates"/> struct containing pixel coordinates to place or update the annotation in the current render pass
            </summary>
            <param name="canvas">The canvas the annotation will be placed on</param>
            <param name="xCalc">The current XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> to perform data to pixel transformations</param>
            <param name="yCalc">The current YAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> to perform data to pixel transformations</param>
            <returns>The <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates"/> struct containing pixel coordinates</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.MoveAnnotation(System.Double,System.Double)">
            <summary>
            This method is used internally by the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationDragAdorner"/>. Programmatically moves the annotation by an X,Y offset. 
            </summary>
            <param name="horizOffset">The horizontal offset to move in pixels</param>
            <param name="vertOffset">The vertical offset to move in pxiels</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.MoveAnnotationTo(Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates,System.Double,System.Double)">
            <summary>
            Moves the annotation to a specific horizontal and vertical offset
            </summary>
            <param name="coordinates">The initial coordinates.</param>
            <param name="horizOffset">The horizontal offset.</param>
            <param name="vertOffset">The vertical offset.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.IsCoordinateValid(System.Double,System.Double)">
            <summary>
            Determines whether the coordinate is valid for placing on the canvas, e.g. is greater than zero and less than <paramref name="canvasMeasurement"/>
            </summary>
            <param name="coord">The coordinate.</param>
            <param name="canvasMeasurement">The canvas dimension in this axis.</param>
            <returns>
              <c>true</c> if coordinate is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.GetBasePoints">
            <summary>
            This method is used in internally by the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationResizeAdorner" />. Gets the adorner point positions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.GetBasePoints(Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates)">
            <summary>
            This method is used in internally by the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationResizeAdorner" />. Gets the adorner point positions
            </summary>
            <param name="coordinates">The previously calculated <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates"/> in screen pixels.</param>
            <returns>A list of points in screen pixels denoting the Adorner corners</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.SetBasePoint(System.Windows.Point,System.Int32)">
            <summary>
            This method is used in internally by the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationResizeAdorner" />. Programmatically sets an adorner point position
            </summary>
            <param name="newPoint"></param>
            <param name="index"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.SetBasePoint(System.Windows.Point,System.Int32,Ecng.Xaml.Charting.Visuals.Axes.IAxis,Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Called internally to marshal pixel points to X1,Y1,X2,Y2 values. 
            Taking a pixel point (<paramref name="newPoint"/>) and base point <paramref name="index"/>, sets the X,Y data-values. 
            </summary>
            <param name="newPoint">The pixel point</param>
            <param name="index">The base point index, where 0, 1, 2, 3 refer to the four corners of an Annotation</param>
            <param name="yAxis">The current Y-Axis</param>
            <param name="xAxis">The current X-Axis </param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.GetPropertiesFromIndex(System.Int32,System.Windows.DependencyProperty@,System.Windows.DependencyProperty@)">
            <summary>
            Used internally to derive the X1Property, Y1Property, X1Property, Y2Property pair for the given index around the annotation..
            
            e.g. index 0 returns X1,Y1
            index 1 returns X2,Y1
            index 2 returns X2,Y2
            index 3 returns X1,Y2
            </summary>
            <param name="index">The index</param>
            <param name="x">The X coordinate dependency property, either X1Property or X2Property</param>
            <param name="y">The Y coordinate dependency property, either Y1Property or Y2Property</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.GetAdornerLayer">
            <summary>
            Gets the Adorner Canvas to place annotation adorners
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.AddAdorners(System.Windows.Controls.Canvas)">
            <summary>
            When overriden in a derived class, places the appropriate adorners on the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase"/>
            </summary>
            <param name="adornerLayer">The adorner layer</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.RemoveAdorners(System.Windows.Controls.Canvas)">
            <summary>
            Removes all adorners from the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase"/>
            </summary>
            <param name="adornerLayer">The adorner layer</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.TranslatePoint(System.Windows.Point,Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Translates the point relative to the other <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /> element
            </summary>
            <param name="point">The input point relative to this <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /></param>
            <param name="relativeTo">The other <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /> to use when transforming the point</param>
            <returns>
            The transformed Point
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /> element
            </summary>
            <param name="point">The point to test</param>
            <returns>
            true if the Point is within the bounds
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.GetBoundsRelativeTo(Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Gets the bounds of the current <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /> element relative to another <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /> element
            </summary>
            <param name="relativeTo"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.TrySelectAnnotation">
            <summary>
            Tries to select the annotation. Returns True if the operation was successful
            </summary>
            <returns>True if the operation was successful</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.OnAnnotationDragging(Ecng.Xaml.Charting.AnnotationDragDeltaEventArgs)">
            <summary>
            Initiates the DragDelta event
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>
            The disposable Update Suspender
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.ResumeUpdates(Ecng.Xaml.Charting.Visuals.IUpdateSuspender)">
            <summary>
            Resumes the updates.
            </summary>
            <param name="updateSuspender">The update suspender.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.GetSchema">
            <summary>
            Returns an XmlSchema that describes the XML representation of the object that is produced by the WriteXml method and consumed by the ReadXml method
            </summary>
            <remarks>
            This method is reserved by <see cref="T:System.Xml.Serialization.IXmlSerializable"/> and should not be used
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase"/> from its XML representation.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase"/> into its XML representation.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection">
            <summary>
            Contains a collection of <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation"/> derived types, which allow custom drawing elements 
            over or under the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection"/> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection.#ctor(System.Collections.Generic.IEnumerable{Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation})">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection.ParentSurface">
            <summary>
            Gets or sets the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to perform operations on 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection.SubscribeSurfaceEvents(Ecng.Xaml.Charting.Visuals.IUltrachartSurface)">
            <summary>
            Subscribes the AnnotationCollection to events on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>. 
            Should be called internally by the Annotations API when attaching to a surface. 
            </summary>
            <param name="parentSurface">The parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection.UnsubscribeSurfaceEvents(Ecng.Xaml.Charting.Visuals.IUltrachartSurface)">
            <summary>
            Unsubscribes the AnnotationCollection to events on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>. 
            Should be called internally by the Annotations API when detaching from a surface. 
            </summary>
            <param name="parentSurface">The parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection.DeselectAll">
            <summary>
            Deselects all annotations in the AnnotationCollection
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection.ClearItems">
            <summary>
            Clears all Annotations from the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection.GetSchema">
            <summary>
            Returns an XmlSchema that describes the XML representation of the object that is produced by the WriteXml method and consumed by the ReadXml method
            </summary>
            <remarks>
            This method is reserved by <see cref="T:System.Xml.Serialization.IXmlSerializable"/> and should not be used
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection"/> from its XML representation.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection"/> into its XML representation.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection.RefreshPositions(Ecng.Xaml.Charting.RenderPassInfo)">
            <summary>
            Refreshes positions of all annotations within the collection
            </summary>
            <param name="rpi"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection.TrySelectAnnotation(Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation)">
            <summary>
            Gets attempt to select annotation, and returns whether attempt was successful or not
            </summary>
            <param name="annotationBase">Annotation <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation"/> for selection</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection.OnXAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called with the <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.XAxes" /> <see cref="T:Ecng.Xaml.Charting.AxisCollection" /> changes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection.OnYAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called with the <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.YAxes" /> <see cref="T:Ecng.Xaml.Charting.AxisCollection" /> changes
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation">
            <summary>
            Defines the interface to an annotation, a custom drawable element over or under the UltrachartSurface
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.DragStarted">
            <summary>
            Occurs when a Drag or move operation starts
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.DragEnded">
            <summary>
            Occurs when a Drag or move operation ends
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.DragDelta">
            <summary>
            Occurs when current <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase"/> is dragged or moved
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.Selected">
            <summary>
            Occurs when <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation"/> becomes selected. 
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.Unselected">
            <summary>
            Occurs when <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation"/> becomes unselected. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.XAxisId">
            <summary>
            Gets or sets the XAxis Id that this annotation is measured against. See <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.Id"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.YAxisId">
            <summary>
            Gets or sets the YAxis Id that this annotation is measured against. See <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.Id"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.IsAttached">
            <summary>
            Gets or sets whether the current annotation is attached
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.IsSelected">
            <summary>
            Gets or sets whether the current annotation is selected
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.IsEditable">
            <summary>
            Gets or sets whether you can interact current annotation
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.IsHidden">
            <summary>
            Gets or sets value, indicates whether current annotation was hidden by <see cref="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.Hide"/> call
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.YAxis">
            <summary>
            Gets the primary YAxis, this is the first axis in the YAxes collection
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.YAxes">
            <summary>
            Returns the YAxes on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.XAxis">
            <summary>
            Gets the XAxis <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> instance on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.XAxes">
            <summary>
            Returns the XAxes on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.Services">
            <summary>
            Gets or sets a <see cref="T:Ecng.Xaml.Charting.IServiceContainer"/> container 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.X1">
            <summary>
            Gets or sets the X1 Coordinate of the Annotation. 
            
            For <see cref="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.Absolute"/>, this must be a data-value on the X-Axis such as a DateTime for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/>, double for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/> or integer index for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/>.
            
            For <see cref="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.Relative"/>, this must be a double value between 0.0 and 1.0, where 0.0 is the far left of the XAxis and 1.0 is the far right.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.Y1">
            <summary>
            Gets or sets the Y1 Coordinate of the Annotation. 
            
            For <see cref="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.Absolute"/>, this must be a data-value on the Y-Axis such as a double for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/> 
            
            For <see cref="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.Relative"/>, this must be a double value between 0.0 and 1.0, where 0.0 is the bottom of the YAxis and 1.0 is the top
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.X2">
            <summary>
            Gets or sets the X2 Coordinate of the Annotation. 
            
            For <see cref="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.Absolute"/>, this must be a data-value on the X-Axis such as a DateTime for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.DateTimeAxis"/>, double for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/> or integer index for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/>.
            
            For <see cref="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.Relative"/>, this must be a double value between 0.0 and 1.0, where 0.0 is the far left of the XAxis and 1.0 is the far right.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.Y2">
            <summary>
            Gets or sets the Y2 Coordinate of the Annotation. 
            
            For <see cref="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.Absolute"/>, this must be a data-value on the Y-Axis such as a double for <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/> 
            
            For <see cref="F:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinateMode.Relative"/>, this must be a double value between 0.0 and 1.0, where 0.0 is the bottom of the YAxis and 1.0 is the top
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.ParentSurface">
            <summary>
            Gets or sets the parent <see cref="T:Ecng.Xaml.Charting.Visuals.IUltrachartSurface"/> that this Annotation belongs to
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.DragDirections">
            <summary>
            Limits the Drag direction when dragging the annotation using the mouse, e.g in the X-Direction, Y-Direction or XyDirection. See the <see cref="T:Ecng.Xaml.Charting.XyDirection"/> enumeration for options
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.ResizeDirections">
            <summary>
            Limits the Resize direction when resiaing the annotation using the mouse, e.g in the X-Direction, Y-Direction or XyDirection. See the <see cref="T:Ecng.Xaml.Charting.XyDirection"/> enumeration for options
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.IsResizable">
            <summary>
            Gets value, indicates whether current instance is resizable
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.DataContext">
            <summary>
            Gets or sets the data context
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.CaptureMouse">
            <summary>
            Captures the mouse
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.ReleaseMouseCapture">
            <summary>
            Releases mouse capture
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.Update(Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator{System.Double},Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator{System.Double})">
            <summary>
            Updates the coordinate calculators and refreshes the annotation position on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="xCoordinateCalculator">The XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/></param>
            <param name="yCoordinateCalculator">The YAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.OnDetached">
            <summary>
            Called when the Annotation is detached from its parent surface
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.OnAttached">
            <summary>
            Called when the Annotation is attached to parent surface
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.Hide">
            <summary>
            Hides the Annotation by removing adorner markers from the <see cref="P:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.ParentSurface"/> AdornerLayerCanvas
            and setting Visibility to Collapsed
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.Show">
            <summary>
            Shows annotation which being hidden by <see cref="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.Hide"/> call
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.MoveAnnotation(System.Double,System.Double)">
            <summary>
            This method is used internally by the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationDragAdorner"/>. Programmatically moves the annotation by an X,Y offset. 
            </summary>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.SetBasePoint(System.Windows.Point,System.Int32)">
            <summary>
            This method is used in internally by the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationResizeAdorner"/>. Programmatically sets an adorner point position
            </summary>
            <param name="newPoint"></param>
            <param name="index"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.GetBasePoints">
            <summary>
            This method is used in internally by the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationResizeAdorner"/>. Gets the adorner point positions
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.Refresh">
            <summary>
            Refreshes the annnotation position on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>, without causing a full redraw of the chart
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.OnDragStarted">
            <summary>
            Raises the <see cref="E:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.DragStarted"/> event, called when a drag operation starts
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.OnDragEnded">
            <summary>
            Raises the <see cref="E:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.DragEnded"/> event, called when a drag operation ends
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.OnDragDelta">
            <summary>
            Raises the <see cref="E:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.DragDelta"/> event, called when a drag operation is in progress and each time the X1 Y1 X2 Y2 points update in the annotation
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.OnXAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises notification when parent <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.XAxes"/> changes.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.IAnnotation.OnYAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises notification when parent <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.YAxes"/> changes.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.VerticalAnchorPoint">
            <summary>
            Enumeration constants used by <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.IAnchorPointAnnotation"/> to define vertical alignment around the X1,Y1 coordinates
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.VerticalAnchorPoint.Top">
            <summary>
            Align Top
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.VerticalAnchorPoint.Center">
            <summary>
            Align Center
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.VerticalAnchorPoint.Bottom">
            <summary>
            Align Bottom
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation">
            <summary>
            A class for <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation.VerticalAlignmentProperty">
            <summary>
            Defines the VerticalAlignment Property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation.LabelsOrientationProperty">
            <summary>
            Defines the LabelDirection Property
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation.#ctor">
            <summary>
            Creates new instance of <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation.LabelsOrientation">
            <summary>
            Gets or sets value, indicating whether labels will be placed vertically or horizontally
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation.VerticalAlignment">
            <summary>
            Gets or sets docking of <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation.Attach(Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel)">
            <summary>
            Called internally to attach an <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel" /> to the current instance
            </summary>
            <param name="label">The AnnotationLabel to attach</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation.GetUsedAxis">
            <summary>
            Returns axis, which current annotation shows data value for
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation.ApplyPlacement(Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel,Ecng.Xaml.Charting.Visuals.Annotations.LabelPlacement)">
            <summary>
            Positions the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationLabel" /> using the value of the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.LabelPlacement" /> enum
            </summary>
            <param name="label">The label to place</param>
            <param name="placement">Placement arguments</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation.GetSelectedCursor">
            <summary>
            Gets the <see cref="T:System.Windows.Input.Cursor" /> to use for the annotation when selected
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation.SetBasePoint(System.Windows.Point,System.Int32,Ecng.Xaml.Charting.Visuals.Axes.IAxis,Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Called internally to marshal pixel points to X1,Y1,X2,Y2 values.
            Taking a pixel point (<paramref name="newPoint" />) and base point <paramref name="index" />, sets the X,Y data-values.
            </summary>
            <param name="newPoint">The pixel point</param>
            <param name="index">The base point index, where 0, 1, 2, 3 refer to the four corners of an Annotation</param>
            <param name="xAxis">The current X-Axis</param>
            <param name="yAxis">The current Y-Axis</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Annotations.VerticalLineAnnotation.GetPropertiesFromIndex(System.Int32,System.Windows.DependencyProperty@,System.Windows.DependencyProperty@)">
            <summary>
            Used internally to derive the X1Property, Y1Property, X1Property, Y2Property pair for the given index around the annotation..
            
            e.g. index 0 returns X1,Y1
            index 1 returns X2,Y1
            index 2 returns X2,Y2
            index 3 returns X1,Y2
            </summary>
            <param name="index">The index</param>
            <param name="x">The X coordinate dependency property, either X1Property or X2Property</param>
            <param name="y">The Y coordinate dependency property, either Y1Property or Y2Property</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.Events.TouchManipulationEventArgs">
            <summary>
            EventArgs to store a list of <see cref="T:System.Windows.Input.TouchPoint"/> TouchPoints
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Events.TouchManipulationEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Ecng.Xaml.Charting.Visuals.Events.TouchManipulationEventArgs"/> is handled.
            </summary>
            <value>
              <c>true</c> if handled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.Events.TouchManipulationEventArgs.TouchPoints">
            <summary>
            Gets or sets the touch points.
            </summary>
            <value>
            The touch points.
            </value>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.Events.TouchManipulationEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Input.TouchPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.Events.TouchManipulationEventArgs"/> class.
            </summary>
            <param name="touchPoints">The touch points.</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.IUltrachartController">
            <summary>
                An interface to a subset of methods on the UltrachartSurface.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartController.ZoomExtents">
            <summary>
            Zooms the chart to the extents of the data, plus any X or Y Grow By fraction set on the X and Y Axes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartController.AnimateZoomExtents(System.TimeSpan)">
            <summary>
            Zooms to extents with the specified animation duration
            </summary>
            <param name="duration">The duration of animation when zooming to extents</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartController.ZoomExtentsY">
            <summary>
            Zooms the chart to the extents of the data in the Y-Direction, accounting for the current data in view in the X-direction
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartController.AnimateZoomExtentsY(System.TimeSpan)">
            <summary>
            Zooms the chart to the extents of the data in the Y-Direction, accounting for the current data in view in the X-direction
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartController.ZoomExtentsX">
            <summary>
            Zooms the chart to the extents of the data in the X-Direction
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartController.AnimateZoomExtentsX(System.TimeSpan)">
            <summary>
            Zooms the chart to the extents of the data in the X-Direction
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.ManipulationMargins">
            <summary>
            Contains properties related to mouse and touch manipulation precision.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.ManipulationMargins.AnnotationResizingThumbSize">
            <summary>
            Defines size of thumbs on the corners of annotations, which serve for annotation resizing.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.ManipulationMargins.AnnotationLineWidth">
            <summary>
            Defines width of ghost line around annotation line that can be dragged to move the annotation line.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker">
            <summary>A base class for Bitmap-rendered Point-Markers, which are small markers drawn once per data-point on a BaseRenderableSeries</summary>
            <example>
            public class CustomPointMarker : BasePointMarker<br/>
            {<br/>
                protected override void DrawInternal(IRenderContext2D context, IEnumerable&lt;Point&gt; centers, IPen2D pen, IBrush2D brush)<br/>
                {<br/>
                    // TODO: Render a single point marker using IRenderContext2D<br/>
                }<br/>
            }
            </example>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.PointMarkerTemplateProperty">
            <summary>
            Defines the PointMarkerTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.StrokeProperty">
            <summary>
            Defines the Stroke DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.StrokeThicknessProperty">
            <summary>
            Defines the StrokeThickness DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.FillProperty">
            <summary>
            Defines the Fill DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.AntiAliasingProperty">
            <summary>
            Defines the AntiAliasing DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.EnableMultithreadedDrawing">
            <summary>
            PROTOTYPE ONLY: Enables MultiThreaded Drawing for certain <see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/> derived types
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.PointMarkerTemplate">
            <summary>
            Gets or sets the PointMarker ControlTemplate, which defines the point-marker Visual to be rendered on each datapoint of the series
            </summary>
            <remarks>The ControlTemplate is used to template the visuals only for a blank control, creating a new instance per <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>. 
            the resulting FrameworkElement is cached to bitmap and drawn on each redraw of the series, so any triggers, mouse interactions on the ControlTemplate will be lost</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.Stroke">
            <summary>
            Gets or sets the Stroke (the outline) of the PointMarker. May be Transparent to ignore
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.Fill">
            <summary>
            Gets or sets the solid color Fill of the PointMarker. May be Transparent to ignore
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.StrokeThickness">
            <summary>
            Gets or sets the StrokeThickness of the PointMarker stroke. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.AntiAliasing">
            <summary>
            Gets or sets the AntiAliasing property, which is used when drawing the stroke
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.Draw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Renders the PointMarker on each <see cref="T:System.Windows.Point"/> passed in with Fill and Stroke values. Each point is a coordinate in the centre of the PointMarker. 
            </summary>
            <param name="context">The RenderContext to draw too</param>
            <param name="centers">The collection of Points to render the Point Markers at</param>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.Dispose">
            <summary>
            Disposes any cached resources, e.g. when the Fill or Stroke is changed, any cached pens or brushes are also disposed
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.DrawInternal(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,System.Collections.Generic.IEnumerable{System.Windows.Point},Ecng.Xaml.Charting.Rendering.Common.IPen2D,Ecng.Xaml.Charting.Rendering.Common.IBrush2D)">
            <summary>
            When overridden in a derived class, draws the point markers at specified collection of <see cref="T:System.Windows.Point"/> centers
            </summary>
            <param name="context">The RenderContext to draw with</param>
            <param name="centers">The Centres of the point markers</param>
            <param name="pen">The default Stroke pen (if current pen is not set)</param>
            <param name="brush">The default Fill brush (if current brush is not set)</param>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.DrawInternal(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,System.Double,System.Double,Ecng.Xaml.Charting.Rendering.Common.IPen2D,Ecng.Xaml.Charting.Rendering.Common.IBrush2D)">
            <summary>
            When overridden in a derived class, draws the point markers at specified x,y pixel coordinate
            </summary>
            <param name="context">The RenderContext to draw with</param>
            <param name="x">The x-coordinate to draw at</param>
            <param name="y">The y-coordinate to draw at</param>
            <param name="pen">The default Stroke pen (if current pen is not set)</param>
            <param name="brush">The default Fill brush (if current brush is not set)</param>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Should be called when any DependencyProperty value changes on the <see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/> derived class
            </summary>
            <param name="d">The sender</param>
            <param name="e">The arguments</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.Begin(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Rendering.Common.IPen2D,Ecng.Xaml.Charting.Rendering.Common.IBrush2D)">
            <summary>
            Called when a batched draw operation is about to begin. All subsequent draw operations will have the same width, height, rendercontext and pen, brush
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker.End(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D)">
            <summary>
            Ends a batch draw operation
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.PointMarkers.CrossPointMarker">
            <summary>
            Allows a Cross to be rendered at each data-point location using the following XAML syntax
            </summary>
            <remarks><see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/> derived types use fast bitmap rendering to draw data-points to the screen. This means that
            traditional WPF style tooltips won't work. For that we need to use the HitTest API. Please see the HitTest sections of the user manual
            for more information</remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.SquarePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.TrianglePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.EllipsePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.CrossPointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.SpritePointMarker"></seealso>
            <example>
            <code title="CrossPointMarker usage" description="Shows how to instantiate a CrossPointMarker inline in XAML. Note when templating or styling a series, you will need to use the BaseRenderableSeries.PointMarkerTemplate property instead" lang="xaml">
            &lt;s:FastLineRenderableSeries&gt;
               &lt;s:FastLineRenderableSeries.PointMarker&gt;
                  &lt;s:CrossPointMarker Width="7" Height="7" Fill="Yellow" Stroke="White" StrokeThickness="1"/&gt;
               &lt;/s:FastLineRenderableSeries.PointMarker&gt;
            &lt;/s:FastLineRenderableSeries&gt;
            </code>
            </example>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.PointMarkers.CrossPointMarker.DrawInternal(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,System.Collections.Generic.IEnumerable{System.Windows.Point},Ecng.Xaml.Charting.Rendering.Common.IPen2D,Ecng.Xaml.Charting.Rendering.Common.IBrush2D)">
            <summary>
            When overridden in a derived class, draws the point markers at specified collection of <see cref="T:System.Windows.Point" /> centers
            </summary>
            <param name="context">The RenderContext to draw with</param>
            <param name="centers">The Centres of the point markers</param>
            <param name="pen">The default Stroke pen (if current pen is not set)</param>
            <param name="brush">The default Fill brush (if current brush is not set)</param>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D" />
              <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D" />
              <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D" />
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.PointMarkers.EllipsePointMarker">
            <summary>
            Allows a Ellipse to be rendered at each data-point location using the following XAML syntax
            </summary>
            <remarks><see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/> derived types use fast bitmap rendering to draw data-points to the screen. This means that
            traditional WPF style tooltips won't work. For that we need to use the HitTest API. Please see the HitTest sections of the user manual
            for more information</remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.SquarePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.TrianglePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.EllipsePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.CrossPointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.SpritePointMarker"></seealso>
            <example>
            <code title="EllipsePointmarker usage" description="Shows how to instantiate a EllipsePointMarker inline in XAML. Note when templating or styling a series, you will need to use the BaseRenderableSeries.PointMarkerTemplate property instead" lang="xaml">
            &lt;s:FastLineRenderableSeries&gt;
               &lt;s:FastLineRenderableSeries.PointMarker&gt;
                  &lt;s:EllipsePointMarker Width="7" Height="7" Fill="Yellow" Stroke="White" StrokeThickness="1"/&gt;
               &lt;/s:FastLineRenderableSeries.PointMarker&gt;
            &lt;/s:FastLineRenderableSeries&gt;
            </code>
            </example>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.PointMarkers.EllipsePointMarker.DrawInternal(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,System.Collections.Generic.IEnumerable{System.Windows.Point},Ecng.Xaml.Charting.Rendering.Common.IPen2D,Ecng.Xaml.Charting.Rendering.Common.IBrush2D)">
            <summary>
            When overridden in a derived class, draws the point markers at specified collection of <see cref="T:System.Windows.Point" /> centers
            </summary>
            <param name="context">The RenderContext to draw with</param>
            <param name="centers">The Centres of the point markers</param>
            <param name="pen">The default Stroke pen (if current pen is not set)</param>
            <param name="brush">The default Fill brush (if current brush is not set)</param>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D" />
              <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D" />
              <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D" />
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.PointMarkers.PointMarkerPathContextFactory">
            <summary>
            Allows bridging of <see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.IPointMarker"/> and <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLinesHelper"/>, allowing us to re-use fast optimized code for iterating over <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/>
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.PointMarkers.SpritePointMarker">
            <summary>
            Allows any WPF UIElement to be rendered as a Sprite (bitmap) at each each data-point location using the following XAML syntax
            </summary>
            <remarks><see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/> derived types use fast bitmap rendering to draw data-points to the screen. This means that
            traditional WPF style tooltips won't work. For that we need to use the HitTest API. Please see the HitTest sections of the user manual
            for more information</remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.SquarePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.TrianglePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.EllipsePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.CrossPointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.SpritePointMarker"></seealso>
            <example>
            <code title="SpritePointMarker usage" description="Shows how to instantiate a SpritePointMarker inline in XAML. Note when templating or styling a series, you will need to use the BaseRenderableSeries.PointMarkerTemplate property instead" lang="xaml">
            &lt;s:FastLineRenderableSeries&gt;
               &lt;s:FastLineRenderableSeries.PointMarker&gt;
                  &lt;s:SpritePointMarker&gt;
                     &lt;s:SpritePointMarker.PointMarkerTemplate&gt;
                        &lt;ControlTemplate&gt;
                           &lt;!-- This can be any WPF UIElement, rendered as bitmnap and repeated per point --&gt;
                           &lt;Ellipse Width="7" Height="7" Fill="Magenta" Stroke="White"&gt;
                        &lt;/ControlTemplate&gt;
                     &lt;/s:SpritePointMarker.PointMarkerTemplate&gt;
                  &lt;/s:SpritePointMarker&gt;
               &lt;/s:FastLineRenderableSeries.PointMarker&gt;
            &lt;/s:FastLineRenderableSeries&gt;
            </code>
            </example>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.PointMarkers.SpritePointMarker.Dispose">
            <summary>
            Disposes any cached resources, e.g. when the Fill or Stroke is changed, any cached pens or brushes are also disposed
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.PointMarkers.SpritePointMarker.DrawInternal(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,System.Collections.Generic.IEnumerable{System.Windows.Point},Ecng.Xaml.Charting.Rendering.Common.IPen2D,Ecng.Xaml.Charting.Rendering.Common.IBrush2D)">
            <summary>
            When overridden in a derived class, draws the point markers at specified collection of <see cref="T:System.Windows.Point" /> centers
            </summary>
            <param name="context">The RenderContext to draw with</param>
            <param name="centers">The Centres of the point markers</param>
            <param name="pen">The default Stroke pen (if current pen is not set)</param>
            <param name="brush">The default Fill brush (if current brush is not set)</param>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D" />
              <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D" />
              <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D" />
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.PointMarkers.SquarePointMarker">
            <summary>
            Allows a Square to be rendered at each data-point location using the following XAML syntax
            </summary>
            <remarks><see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/> derived types use fast bitmap rendering to draw data-points to the screen. This means that
            traditional WPF style tooltips won't work. For that we need to use the HitTest API. Please see the HitTest sections of the user manual
            for more information</remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.SquarePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.TrianglePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.EllipsePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.CrossPointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.SpritePointMarker"></seealso>
            <example>
            <code title="SquarePointMarker usage" description="Shows how to instantiate a SquarePointMarker inline in XAML. Note when templating or styling a series, you will need to use the BaseRenderableSeries.PointMarkerTemplate property instead" lang="xaml">
            &lt;s:FastLineRenderableSeries&gt;
               &lt;s:FastLineRenderableSeries.PointMarker&gt;
                  &lt;s:SquarePointMarker Width="7" Height="7" Fill="Yellow" Stroke="White" StrokeThickness="1"/&gt;
               &lt;/s:FastLineRenderableSeries.PointMarker&gt;
            &lt;/s:FastLineRenderableSeries&gt;
            </code>
            </example>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.PointMarkers.SquarePointMarker.DrawInternal(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,System.Collections.Generic.IEnumerable{System.Windows.Point},Ecng.Xaml.Charting.Rendering.Common.IPen2D,Ecng.Xaml.Charting.Rendering.Common.IBrush2D)">
            <summary>
            When overridden in a derived class, draws the point markers at specified collection of <see cref="T:System.Windows.Point" /> centers
            </summary>
            <param name="context">The RenderContext to draw with</param>
            <param name="centers">The Centres of the point markers</param>
            <param name="pen">The default Stroke pen (if current pen is not set)</param>
            <param name="brush">The default Fill brush (if current brush is not set)</param>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D" />
              <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D" />
              <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D" />
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.PointMarkers.TrianglePointMarker">
            <summary>
            Allows a Triangle to be rendered at each data-point location using the following XAML syntax
            </summary>
            <remarks><see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/> derived types use fast bitmap rendering to draw data-points to the screen. This means that
            traditional WPF style tooltips won't work. For that we need to use the HitTest API. Please see the HitTest sections of the user manual
            for more information</remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.SquarePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.TrianglePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.EllipsePointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.CrossPointMarker"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.SpritePointMarker"></seealso>
            <example>
            <code title="TrianglePointMarker usage" description="Shows how to instantiate a TrianglePointMarker inline in XAML. Note when templating or styling a series, you will need to use the BaseRenderableSeries.PointMarkerTemplate property instead" lang="xaml">
            &lt;s:FastLineRenderableSeries&gt;
               &lt;s:FastLineRenderableSeries.PointMarker&gt;
                  &lt;s:TrianglePointMarker Width="7" Height="7" Fill="Yellow" Stroke="White" StrokeThickness="1"/&gt;
               &lt;/s:FastLineRenderableSeries.PointMarker&gt;
            &lt;/s:FastLineRenderableSeries&gt;
            </code>
            </example>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.PointMarkers.TrianglePointMarker.DrawInternal(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,System.Collections.Generic.IEnumerable{System.Windows.Point},Ecng.Xaml.Charting.Rendering.Common.IPen2D,Ecng.Xaml.Charting.Rendering.Common.IBrush2D)">
            <summary>
            When overridden in a derived class, draws the point markers at specified collection of <see cref="T:System.Windows.Point" /> centers
            </summary>
            <param name="context">The RenderContext to draw with</param>
            <param name="centers">The Centres of the point markers</param>
            <param name="pen">The default Stroke pen (if current pen is not set)</param>
            <param name="brush">The default Fill brush (if current brush is not set)</param>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D" />
              <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D" />
              <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D" />
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.PointMarkers.IPointMarker">
            <summary>
            specifies interface for rendering point markers. a point marker is something which is displayed at data points
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.PointMarkers.IPointMarker.Draw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Renders the PointMarker on each <see cref="T:System.Windows.Point"/> passed in with Fill and Stroke values. Each point is a coordinate in the centre of the PointMarker. 
            </summary>
            <param name="context">The RenderContext to draw too</param>
            <param name="centers">The collection of Points to render the Point Markers at</param>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D"/>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.PointMarkers.IPointMarker.Stroke">
            <summary>
            Gets or sets the Stroke Color (outline) of the PointMarker
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.PointMarkers.IPointMarker.Fill">
            <summary>
            Gets or sets the Fill Color (fill) of the PointMarker
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.PointMarkers.IPointMarker.Width">
            <summary>
            Gets or sets the Width of the PointMarker in pixels
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.PointMarkers.IPointMarker.Height">
            <summary>
            Gets or sets the Height of the PointMarker in pixels
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.PointMarkers.IPointMarker.StrokeThickness">
            <summary>
            Gets or sets the StrokeThickness of the PointMarker outline in pixels
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.PointMarkers.IPointMarker.Begin(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Rendering.Common.IPen2D,Ecng.Xaml.Charting.Rendering.Common.IBrush2D)">
            <summary>
            Called when a batched draw operation is about to begin. All subsequent draw operations will have the same width, height, rendercontext and pen, brush
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.PointMarkers.IPointMarker.End(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D)">
            <summary>
            Ends a batch draw operation
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.PolarPathDrawingDecorator.AdditionalSegmentLength">
            <summary>
            Defines length of additional segment in pixels
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnsWrapper.GetXRange(System.Boolean)">
            <summary>
            Returns the data range of all the assosiated <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> on X direction
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnsWrapper.DrawStackedSeries(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D)">
            <summary>
            Draws the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/> using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> passed in
            </summary>
            <param name="series"></param>
            <param name="renderContext"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnsWrapper.DrawColumns(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries)">
            <summary>
            Draws the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/> using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> and renderable series itself passed in
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnsWrapper.GetSeriesVerticalBounds(Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries,System.Int32)">
            <summary>
            Returns Upper and Lower Bound of <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries"/> column
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnsWrapper.GetSeriesBodyWidth(Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries,System.Int32)">
            <summary>
            Returns DataPointWith of <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries"/> considering spacing between groups
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnsWrapper.GetSpacingMode(System.String)">
            <summary>
            Gets mode of setting Spacing between stacked column groups
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnsWrapper.GetSpacing(System.String)">
            <summary>
            Gets spacing between stacked column groups
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnsWrapper.ShiftHitTestInfo(System.Windows.Point,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo,System.Double,Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries)">
            <summary>
            Returns shifted <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/> for horizontally / vertically stacked <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/>
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.SpacingMode">
            <summary>
            Defines the mode of setting spacing between <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/> groups
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.SpacingMode.Absolute">
            <summary>
            For setting spacing in pixels
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.SpacingMode.Relative">
            <summary>
            For setting spacing in fraction of column group width
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnsWrapper">
            <summary>
            Defines interface for <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnsWrapper"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnsWrapper.GetDataPointWidthFraction">
            <summary>
            Gets fraction of the data point width
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnsWrapper.GetSeriesBodyWidth(Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries,System.Int32)">
            <summary>
            Returns DataPointWith of <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries"/> considering spacing between groups
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnsWrapper.GetSeriesVerticalBounds(Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries,System.Int32)">
            <summary>
            Returns Upper and Lower Bound of <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries"/> column
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnsWrapper.GetXRange(System.Boolean)">
            <summary>
            Returns the data range of all the assosiated <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> on X direction
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries">
            <summary>
            Defines the interface to <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries.Wrapper">
            <summary>
            Gets the instance of <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnsWrapper"/> used internally for
            stacked series composition and rendering.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries.Spacing">
            <summary>
            Gets or sets the value which specifies the width of the gap between horizontally stacked columns. 
            Can be set to either a relative or absolute value depending on the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries.SpacingMode"/> used.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries.SpacingMode">
            <summary>
            Gets or sets the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries.SpacingMode"/> to use for the space between columns computations.
            E.g. the default of Absolute requires that <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries.Spacing"/> is in pixels. The value
            of Relative requires that <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries.Spacing"/> is a double value from 0.0 to 1.0.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries.DataPointWidth">
            <summary>
            Gets or sets the value between 0.0 and 1.0 indicating how much of the space available every column occupies.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries.ShowLabel">
            <summary>
            Gets or sets the value indicating whether to show text labels over the columns.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries.LabelColor">
            <summary>
            Gets or sets the foreground color for text labels.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries.LabelFontSize">
            <summary>
            Gets or sets the font size for text labels.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries.LabelTextFormatting">
            <summary>
            Gets or sets the formatting string for text labels.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnRenderableSeries.GetDatapointWidth(Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator{System.Double},Ecng.Xaml.Charting.Model.DataSeries.IPointSeries,System.Double,System.Double)">
            <summary>
            Calculates the space available per a data-point.
            </summary>
            <param name="xCoordinateCalculator">The current x coordinate calculator instance</param>
            <param name="pointSeries">The current <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries" /> being rendered.</param>
            <param name="barsAmount">Amount of bars within the viewport</param>
            <param name="widthFraction">The width fraction from 0.0 to 1.0, where 0.0 is infinitey small, 0.5 takes up half the available width and 1.0 means a data-point is the full width between points</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedMountainRenderableSeries">
            <summary>
            Defines the interface to <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedMountainRenderableSeries.Wrapper">
            <summary>
            Gets the instance of <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnsWrapper"/> used internally for
            stacked series composition and rendering.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedMountainRenderableSeries.IsDigitalLine">
            <summary>
            Gets or sets a value indicating whether this line series is a digital (step) line.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedMountainRenderableSeries.DrawMountain(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,System.Boolean)">
            <summary>
            Draws the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries"/> using <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/>.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedRenderableSeries.StackedGroupId">
            <summary>
            Gets or sets a string stacked-group Id, used to ensure columns are stacked together
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedRenderableSeries.IsOneHundredPercent">
            <summary>
            Gets or sets a value whether all series with the same <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedRenderableSeries.StackedGroupId"/> will appear 100% stacked
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedRenderableSeries.ZeroLineY">
            <summary>
            Gets or sets the value which determines the zero line in Y direction.
            Used to set the bottom of an area
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedSeriesWrapperBase`1">
            <summary>
            Defines common properties to stacked series wrappers, such as <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnsWrapper"/> and <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainsWrapper"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedSeriesWrapperBase`1.IsOneHundredPercentGroup(System.String)">
            <summary>
            Gets a value indicating whether all the series within the StackedGroup are 100% stacked.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedSeriesWrapperBase`1.AccumulateYValueAtX(`0,System.Int32,System.Boolean)">
            <summary>
            Accumulate Y value at <see cref="!:index"/> for a stacked series,
            where Tuple.Item1 represents the upper series value at the <see cref="!:index"/> and Tuple.Item2 - the lower one.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedSeriesWrapperBase`1.CalculateYRange(`0,Ecng.Xaml.Charting.IndexRange)">
            <summary>
            Gets the YRange of the data (min, max of the <paramref name="series"/>) in the passed <param name="xIndexRange"/>, where indices are point-indices on the DataSeries columns.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedSeriesWrapperBase`1.DrawStackedSeries(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D)">
            <summary>
            Draws all the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedRenderableSeries"/> being wrapped, using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> passed in.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedSeriesWrapperBase`1.ShiftHitTestInfo(System.Windows.Point,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo,System.Double,`0)">
            <summary>
            Called internaly to correlate a hit-test result for the <param name="series"/>.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedSeriesWrapperBase`1.AddSeries(`0)">
            <summary>
            Adds the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedRenderableSeries"/> to the internal collection.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedSeriesWrapperBase`1.RemoveSeries(`0)">
            <summary>
            Removes the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedRenderableSeries"/> from the internal collection.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedSeriesWrapperBase`1.MoveSeriesToAnotherGroup(`0,System.String,System.String)">
            <summary>
            Called internally to move series from one StackedGroup to another.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedSeriesWrapperBase`1.GetStackedSeriesFromSameGroup(System.String)">
            <summary>
            Returns all the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedRenderableSeries"/> from the same StackedGroup. 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedSeriesWrapperBase`1.GetStackedSeriesCount">
            <summary>
            Returns amount of the series being stacked.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.LinesPathContextFactory">
            <summary>
            Allows bridging of <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> DrawLines with <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext"/> and <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLinesHelper"/>, 
            allowing us to re-use fast optimized code for iterating over <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> and drawing Lines
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.DrawingHelper.TransformPoint(System.Single,System.Single,System.Boolean)">
            <summary>
            Returns a point with swapped coordinates if <paramref name="isVerticalChart"/> is True
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="isVerticalChart"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.DrawingHelper.TransformPoint(System.Windows.Point,System.Boolean)">
            <summary>
            Returns a point with swapped coordinates if <paramref name="isVerticalChart"/> is True
            </summary>
            <param name="point"></param>
            <param name="isVerticalChart"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.DrawingHelper.TransformPoint(System.Double,System.Double,System.Boolean)">
            <summary>
            Returns a point with swapped coordinates if <paramref name="isVerticalChart"/> is True
            </summary>
            <param name="y"> </param>
            <param name="isVerticalChart"></param>
            <param name="x"> </param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.MountainAreaPathContextFactory">
            <summary>
            Allows bridging of <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> and <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLinesHelper"/>, allowing us to re-use fast optimized code for iterating over <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> and drawing mountain areas
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries">
            <summary>
            Defines the Base class for all RenderableSeries within Ultrachart. 
            </summary>
            <remarks>
            A RenderableSeries has a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> data-source, 
            may have a <see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/> point-marker, and draws onto a specific <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>. 
            A given <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> may have 0..N <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, each of which may map to, or share a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            </remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries"/>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.StrokeThicknessProperty">
            <summary>
            Defines the StrokeThickness DependencyProperty 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.IsSelectedProperty">
            <summary>
            Defines the IsSelected DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.DataSeriesIndexProperty">
            <summary>
            Defines the DataSeriesIndex DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.DataSeriesProperty">
            <summary>
            Defines the DataSeries DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.IsVisibleProperty">
            <summary>
            Defines the IsVisible DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SeriesColorProperty">
            <summary>
            Defines the SeriesColor DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SelectedSeriesStyleProperty">
            <summary>
            Defines the SelectedSelectedSeriesStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.ResamplingModeProperty">
            <summary>
            Defines the ResamplingMode DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.AntiAliasingProperty">
            <summary>
            Defines the AntiAliasing DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.PointMarkerTemplateProperty">
            <summary>
            Defines the PointMarkerTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.PointMarkerProperty">
            <summary>
            Defines the PointMarker DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.RolloverMarkerTemplateProperty">
            <summary>
            Defines the RolloverMarkerTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.LegendMarkerTemplateProperty">
            <summary>
            Defines the LegendMarkerTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.YAxisIdProperty">
            <summary>
            Defines the AxisAlignment DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.XAxisIdProperty">
            <summary>
            Defines the AxisAlignment DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.PaletteProviderProperty">
            <summary>
            Defines the PaletteProvider DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.ZeroLineYProperty">
            <summary>
            Defines the ZeroLineY DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.DrawNaNAsProperty">
            <summary>
            Defines the DrawNaNAs DependencyProperty
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SelectionChanged">
            <summary>
            Event raised whenever IsSelected property changed
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.IsVisibleChanged">
            <summary>
            Event raised whenever IsVisible property changed
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.DefaultHitTestRadius">
            <summary>
            A default radius used in the <see cref="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.HitTest(System.Windows.Point,System.Boolean)"/> method for interpolation, in RoloverModifier 
            and instead of <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.PointMarker"/> size when it is not set
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.DefaultDatapointWidth">
            <summary>
            Default datapoint width used when there is only one point in point series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.Services">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/> which provides access to services throughout Ultrachart. 
            ServiceContainers are created one per <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.ZeroLineY">
            <summary>
            Gets or sets the value which determines the zero line in Y direction.
            Used to set the bottom of a column, or the zero line in a mountain
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.IsVisible">
            <summary>
            Gets or sets whether the series is visible when drawn
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.StrokeThickness">
            <summary>
            Gets or sets the StrokeThickness of the line. 
            </summary>
            <remarks>
            Note that increasing stroke thickness from 1 will have a detrimental effect on performance
            </remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.ResamplingResolution">
            <summary>
            Gets or sets the resampling resolution. The default is 2, which results in Nyquist resampling. Lower values are not permitted. Higher values result in potentially more visually accurate rendering, but at the expense of performance
            </summary>
            <value>The resampling resolution.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.PaletteProvider">
            <summary>
            Gets or Sets an optional <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IPaletteProvider" /> instance, which may be used to override specific data-point colors during rendering.
            For more details, see the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IPaletteProvider" /> documentation
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.RolloverMarker">
            <summary>
            Gets a cached Framework Element which is used as a Rollover Marker.
            This is generated from a ControlTemplate in xaml via the <see cref="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.RolloverMarkerTemplateProperty"/> DependencyProperty
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.PointMarkerTemplate">
            <summary>
            Gets or sets the PointMarker ControlTemplate, which defines the point-marker Visual to be rendered on each datapoint of the series
            </summary>
            <remarks>The ControlTemplate is used to template the visuals only for a blank control, creating a new instance per <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>. 
            the resulting FrameworkElement is cached to bitmap and drawn on each redraw of the series, so any triggers, mouse interactions on the ControlTemplate will be lost</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.PointMarker">
            <summary>
            Gets or sets a <see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/> instance directly on the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>. When a <see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/>
            is present, then the markers will be drawn at each data-point in the series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.RolloverMarkerTemplate">
            <summary>
            Gets or sets the RolloverMarker ControlTemplate, which defines the Visual to be rendered on the series when the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier"/> is enabled and the user moves the mouse.
            </summary>
            <remarks>The ControlTemplate is used to template the visuals only for a blank control, creating a new instance per <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.LegendMarkerTemplate">
            <summary>
            Gets or sets the DataTemplate, which defines the Visual to be rendered on the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartLegend"/> as a series marker
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.YAxisId">
            <summary>
            Gets or sets the ID of the Y-Axis which this renderable series is measured against
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.XAxisId">
            <summary>
            Gets or sets the ID of the X-Axis which this renderable series is measured against
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.AntiAliasing">
            <summary>
            Gets or sets whether this series uses AntiAliasing when drawn
            </summary>
            <value><c>true</c> if anti aliasing is enabled; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.ResamplingMode">
            <summary>
            Gets or sets the <see cref="T:Ecng.Xaml.Charting.Numerics.ResamplingMode"/> used when drawing this series
            </summary>
            <value>The resampling mode.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SeriesColor">
            <summary>
            Gets or sets the SeriesColor.
            </summary>
            <value>The color of the series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SelectedSeriesStyle">
            <summary>
            Gets or sets a style for selected series.
            </summary>
            <value>The style of the selected series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.IsSelected">
            <summary>
            Gets or sets the IsSelectedProperty.
            </summary>
            <value>The color of the selected series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.DataSeries">
            <summary>
            Gets or sets the DataSeries associated with this series
            </summary>
            <value>The data series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.DrawNaNAs">
            <summary>
            Gets or sets a value indicating how this renderable series will treat double.NaN. See <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.LineDrawMode"/> for available options
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.CurrentRenderPassData">
            <summary>
            Gets or sets the RenderPassData instance used for this render pass
            </summary>
            <value>The render data.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.XAxis">
            <summary>
            Gets or sets the XAxis that this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> is associated with
            </summary>
            <value>The X axis.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.YAxis">
            <summary>
            Gets or sets the YAxis that this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> is associated with
            </summary>
            <value>The Y axis.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.DisplaysDataAsXy">
            <summary>
            If true, the data is displayed as XY, e.g. like a Scatter plot, not a line (time) series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.IsValidForDrawing">
            <summary>
            Gets a value indicating whether this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> is valid for drawing.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.GetIsValidForDrawing">
            <summary>
            Gets a value indicating whether this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> is valid for drawing.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.GetPointMarker">
            <summary>
            Returns the PointMarker used by this series
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.OnInvalidateParentSurface">
            <summary>
            Raises the <see cref="T:Ecng.Xaml.Charting.InvalidateUltrachartMessage"/> which causes the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to invalidate
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.OnSeriesColorChanged">
            <summary>
            Called when the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SeriesColor"/> dependency property changes. Allows derived types to do caching 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.OnDataSeriesDependencyPropertyChanged">
            <summary>
            Called when the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.DataSeries"/> dependency property changes.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.AssertDataPointType``1(System.String)">
            <summary>
            Used internally by the renderer. Asserts that the input data-type is of the correct format for the current <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries" />
            </summary>
            <typeparam name="TSeriesPoint">The type of the series point.</typeparam>
            <param name="dataSeriesType">Type of the data series.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.Ecng#Xaml#Charting#Visuals#IDrawable#OnDraw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Called when the instance is drawn
            </summary>
            <param name="renderContext">The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D" /> used for drawing</param>
            <param name="renderPassData">The current render pass data</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.InternalDraw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Draws the series using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> and the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> passed in
            </summary>
            <param name="renderContext">The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen</param>
            <param name="renderPassData">The render pass data. Contains a resampled <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/>, the <see cref="T:Ecng.Xaml.Charting.IndexRange"/> of points on the screen
            and the current YAxis and XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> to convert data-points to screen points</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.GetDatapointWidth(Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator{System.Double},Ecng.Xaml.Charting.Model.DataSeries.IPointSeries,System.Double)">
            <summary>
            Gets the width of data-points, used to compute column and OHLC bar widths
            </summary>
            <param name="xCoordinateCalculator">The current x coordinate calculator.</param>
            <param name="pointSeries">The current <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries" /> being rendered.</param>
            <param name="widthFraction">The width fraction from 0.0 to 1.0, where 0.0 is infinitey small, 0.5 takes up half the available width and 1.0 means a data-point is the full width between points</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">widthFraction should be between 0.0 and 1.0 inclusive;widthFraction</exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.GetDatapointWidth(Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator{System.Double},Ecng.Xaml.Charting.Model.DataSeries.IPointSeries,System.Double,System.Double)">
            <summary>
            Gets the width of data-points, used to compute column and OHLC bar widths
            </summary>
            <param name="xCoordinateCalculator">The current x coordinate calculator.</param>
            <param name="pointSeries">The current <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries" /> being rendered.</param>
            <param name="barsAmount">Amount of bars within viewport</param>
            <param name="widthFraction">The width fraction from 0.0 to 1.0, where 0.0 is infinitey small, 0.5 takes up half the available width and 1.0 means a data-point is the full width between points</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">widthFraction should be between 0.0 and 1.0 inclusive;widthFraction</exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.GetYZeroCoord">
            <summary>
            Returns a value that determines the position of Y zero line on a chart.
            Significant for the series types that render negative data points differently, 
            such as the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastImpulseRenderableSeries"/>.
            </summary>
            <returns>The value in pixels indicating the position of zero line</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.HitTest(System.Windows.Point,System.Boolean)">
            <summary>
            Performs a hit-test at the specific mouse point (X,Y coordinate on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />) with the default HitTestRadius,
            returning a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo" /> struct with the results
            </summary>
            <param name="rawPoint">The mouse point on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" /></param>
            <param name="interpolate">If true, use interpolation to perform a hit-test between data-points, or on the area if a <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>, <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/> or <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/></param>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo" /> struct with the results
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.VerticalSliceHitTest(System.Windows.Point,System.Boolean)">
            <summary>
            Performs a hit-test at the specific mouse point with zero hit-test radius. 
            Method considers only X value and returns a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo" /> struct based on the data point with the closest X value
            </summary>
            <param name="rawPoint">The mouse point on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" /></param>
            <param name="interpolate">If true, use interpolation to perform a hit-test between data-points, or on the area if a <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>, <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/> or <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/></param>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo" /> struct with the results
            </returns>
            <remarks>
            Used by <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier"/> and <see cref="T:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier"/>
            </remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.HitTest(System.Windows.Point,System.Double,System.Boolean)">
            <summary>
            Performs a hit-test at the specific mouse point (X,Y coordinate on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />) using passed <paramref name="hitTestRadius"/>,
            returning a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo" /> struct with the results
            </summary>
            <param name="rawPoint">The mouse point on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" /></param>
            <param name="hitTestRadius">The radius in pixels to determine whether a mouse is over a data-point</param>
            <param name="interpolate">If true, use interpolation to perform a hit-test between data-points, or on the area if a <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>, <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/> or <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/></param>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo" /> struct with the results
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.NearestHitResult(System.Windows.Point,System.Double,Ecng.Xaml.Charting.Common.Extensions.SearchMode,System.Boolean)">
            <summary>
            Called by <see cref="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.HitTest(System.Windows.Point,System.Boolean)" /> to get the nearest (non-interpolated) <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo" /> to the mouse point
            </summary>
            <param name="mouseRawPoint">The mouse point</param>
            <param name="hitTestRadiusInPixels">The radius (in pixels) to use when determining if the <paramref name="mouseRawPoint" /> is over a data-point</param>
            <param name="searchMode">The search mode.</param>
            <param name="considerYCoordinateForDistanceCalculation">if set to <c>true</c> then perform a true euclidean distance to find the nearest hit result.</param>
            <returns>
            The <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo" /> result
            </returns>
            <exception cref="T:System.ArgumentException">hitTestRadiusInPixels is NAN</exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.GetHitTestInfo(System.Int32,System.Windows.Point,System.Double,System.IComparable)">
            <param name="hitTestRadius">is used to calculate HitTestInfo.IsHit</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.InterpolatePoint(System.Windows.Point,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo,System.Double)">
            <summary>
            Interpolation function called by <see cref="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.HitTest(System.Windows.Point,System.Boolean)"/> when the inpolate flag is true
            </summary>
            <param name="rawPoint">Mouse point</param>
            <param name="nearestHitResult">Non-interpolated <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/></param>
            <param name="hitTestRadius">The value, which indicates distance used to consider whether the series is hit or not</param>
            <returns>Intepolated <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.IsHitTest(System.Windows.Point,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo,System.Double,System.Windows.Point,System.Windows.Point)">
            <summary>
            When overridden in derived classes, performs hit test on series using interpolated values
            </summary>
            <param name="rawPoint"></param>
            <param name="nearestHitResult"></param>
            <param name="hitTestRadius"></param>
            <param name="previousDataPoint"> </param>
            <param name="nextDataPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.GetSeriesBodyWidth(Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            When overridden in derived classes, returns the width of a single bar, which is
            defined by the passed coordinate
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.GetSeriesBodyLowerDataBound(Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            When overridden in derived classes, returns the lower value of a compound data point, which is
            defined by the passed coordinate
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.GetSeriesBodyUpperDataBound(Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            When overridden in derived classes, returns the upper value of a compound data point, which is
            defined by the passed coordinate
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.IsBodyHit(System.Windows.Point,System.Windows.Rect,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            When overridden in derived classes, performs the hit-test check on the bounding rect of a single series bar
            </summary>
            <param name="pt"></param>
            <param name="boundaries"></param>
            <param name="nearestHitPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.CheckIsInBounds(System.Double,System.Double,System.Double)">
            <summary>
            Returns True if the coordinate is between the lower and upper bounds supplied
            </summary>
            <param name="coord"></param>
            <param name="lowerBound"></param>
            <param name="upperBound"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.GetSeriesInfo(Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            Converts the result of a Hit-Test operation (<see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/>) to a <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> class, which may be used as a
            ViewModel when outputting series values as bindings. <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> is used by the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier"/>, <see cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier"/>
            and <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartLegend"/> classes
            </summary>
            <param name="hitTestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.GetXRange">
            <summary>
            Returns the data range of the assosiated <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> on X direction
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.GetYRange(Ecng.Xaml.Charting.IRange)">
            <summary>
            Returns the data range of the assosiated <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> on Y direction
            <param name="xRange">The X-Axis Range currently in view</param>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.GetYRange(Ecng.Xaml.Charting.IRange,System.Boolean)">
            <summary>
            Returns the data range of the assosiated <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> on Y direction
            <param name="xRange">The X-Axis Range currently in view</param>
            <param name="getPositiveRange">Indicates whether to return positive YRange only</param>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.OnResamplingModeChanged">
            <summary>
            Called when resampling mode changes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.OnParentSurfaceViewportSizeChanged">
            <summary>
            Called when the parent surface viewport size changes, immediately before a draw pass
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.GetChartRotationAngle(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Used Internally: Gets the rotation angle of the chart, which is 0 degrees or 90 degrees depending on whether the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            has swapped X and Y Axes or not. 
            </summary>
            <param name="renderPassData">The current <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.TransformPoint(System.Single,System.Single,System.Boolean)">
            <summary>
            Transposes a point (swaps X, Y) if the <paramref name="isVerticalChart"/> flag is true
            </summary>
            <param name="x">The X-Value</param>
            <param name="y">The Y-Value</param>
            <param name="isVerticalChart">A flag indicating the orientation of the chart</param>
            <returns>The transposed point</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.TransformPoint(System.Windows.Point,System.Boolean)">
            <summary>
            Used internally: Transposes a <see cref="T:System.Windows.Point"/> depending on whether the current <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> is being drawn vertically or not
            </summary>
            <param name="point"></param>
            <param name="isVerticalChart"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.OnInvalidateParentSurface(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            When called, invalidates the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="d">The DependencyObject that raised the event.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.OnDataSeriesDependencyPropertyChanged(Ecng.Xaml.Charting.Model.DataSeries.IDataSeries,Ecng.Xaml.Charting.Model.DataSeries.IDataSeries)">
            <summary>
            Called when the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.DataSeries"/> property changes - i.e. a new <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> has been set
            </summary>
            <param name="oldDataSeries">The old <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/></param>
            <param name="newDataSeries">The new <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.GetParentSurface">
            <summary>
            Gets the parent <see cref="T:Ecng.Xaml.Charting.Visuals.IUltrachartSurface"/> for this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.CreateRolloverMarker">
            <summary>
            Creates a RolloverMarker from the RolloverMarkerTemplate property
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.GetSchema">
            <summary>
            Returns an XmlSchema that describes the XML representation of the object that is produced by the WriteXml method and consumed by the ReadXml method
            </summary>
            <remarks>
            This method is reserved by <see cref="T:System.Xml.Serialization.IXmlSerializable"/> and should not be used
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> from its XML representation.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> into its XML representation.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLinesHelper">
            <summary>
            Very fast implementation of DrawLines(IEnumerable)
             - handles NaN gaps/closed, vertical/horizontal chart, Digital or standard line
             - NOTE: Dashed line is handled inside the RenderContext. Dashes are performed per line-segment
            </summary>   
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainsWrapper.DrawStackedSeries(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D)">
            <summary>
            Draws the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedMountainRenderableSeries"/> using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> passed in
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedSeriesWrapperBase`1.GetStackedSeriesCount">
            <summary>
            Gets count if StackedSeriesCollection count
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedSeriesWrapperBase`1.CalculateYRange(`0,Ecng.Xaml.Charting.IndexRange)">
            <summary>
            Calculates YRange for passed in <see cref="!:series"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedSeriesWrapperBase`1.AccumulateYValueAtX(`0,System.Int32,System.Boolean)">
            <summary>
            Accumulate Y value at <see cref="!:index"/> for stacked series in PointSeries or in DataSeries accordint to <see cref="!:inPointSeries"/>
            Item1 - represents Top Accumulated value
            Item2 - represents Bottom Accumulated value
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedSeriesWrapperBase`1.IsOneHundredPercentGroup(System.String)">
            <summary>
            Gets a value whether all stacked series with the same StackedGroupId will appear 100% stacked
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedSeriesWrapperBase`1.ShiftHitTestInfo(System.Windows.Point,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo,System.Double,`0)">
            <summary>
            Returns shifted <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/> for horizontally / vertically stacked <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedSeriesWrapperBase`1.AddSeries(`0)">
            <summary>
            Add <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedRenderableSeries"/> to wrappers internal collection
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedSeriesWrapperBase`1.AddSeriesToGroup(`0,System.String)">
            <summary>
            Uses internally to add <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedRenderableSeries"/> to internal _seriesGroups dictionary
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedSeriesWrapperBase`1.RemoveSeries(`0)">
            <summary>
            Remove <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedRenderableSeries"/> from wrappers internal collection
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedSeriesWrapperBase`1.RemoveSeriesFromGroup(`0,System.String)">
            <summary>
            Uses internally to remove <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedRenderableSeries"/> from internal _seriesGroups dictionary
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedSeriesWrapperBase`1.MoveSeriesToAnotherGroup(`0,System.String,System.String)">
            <summary>
            Used internally to move a stacked series to a new group
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedSeriesWrapperBase`1.GetStackedSeriesFromSameGroup(System.String)">
            <summary>
            Returns all <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedRenderableSeries"/> with the same groupId 
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.AxisInfo">
            <summary>
            Provides information on an axis hit test operation, see <see cref="M:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.HitTest(System.Windows.Point)"/> for more information
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.AxisInfo.AxisId">
            <summary>
            Gets or sets the current Axis Id
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.AxisInfo.AxisTitle">
            <summary>
            Gets or sets the current Axis Title
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.AxisInfo.AxisAlignment">
            <summary>
            Gets or sets the current Axis alignment
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.AxisInfo.DataValue">
            <summary>
            Gets or sets the DataValue at the axis hit test point
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.AxisInfo.AxisFormattedDataValue">
            <summary>
            Gets or sets a Formatted data value using the Axis.FormatText method
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.AxisInfo.IsHorizontal">
            <summary>
            Gets or sets the current orientation, indicating whether <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> is horizontal or not
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.AxisInfo.IsXAxis">
            <summary>
            Gets or sets whether the current axis is an X-Axis or not
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.AxisInfo.CursorFormattedDataValue">
            <summary>
            Gets or sets a Cursor Formatted data value, using the Axis.FormatCursorText method
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.AxisInfo.IsMasterChartAxis">
            <summary>
            Gets or sets the value, indicating that the associated axis belongs to the surface,
            where a mouse event occured originally. See <see cref="P:Ecng.Xaml.Charting.ChartModifiers.ModifierEventArgsBase.IsMaster"/>
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries">
            <summary>
            An abstract base class which factors out many properties from the <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/>
            and <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/> types. 
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries._precalculatedPoints">
            <summary>
            contains precalculated resampled X and Y coordinated for bars, also column widths
            [columnCenterX][Y1][Y2=zeroLine][width].....
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.FillColorProperty">
            <summary>
            Defines the FillColor DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.FillBrushProperty">
            <summary>
            Defines the FillBrush DependencyProperty
            </summary>        
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.FillBrushMappingModeProperty">
            <summary>
            Defines the FillBrushMappingMode DependencyProperty
            </summary>     
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.UniformWidthProperty">
            <summary>
            Defines the DataPointWidth DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.DataPointWidthProperty">
            <summary>
            Defines the UniformWidth DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries._minColumnWidth">
            <summary>
            Minimum column width, used when UseUniformWidth is set
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.FillColor">
            <summary>
            Gets or sets the Fill Color for columns. The column outline is specified by <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SeriesColor"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.FillBrush">
            <summary>
            Gets or sets the Fill Brush for columns. The column outline is specified by <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SeriesColor"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.FillBrushMappingMode">
            <summary>
            Gets or sets a <see cref="T:Ecng.Xaml.Charting.Rendering.Common.TextureMappingMode"/> which defines how columns are filled when a gradient <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.FillBrush"/> is used.
            
              If <see cref="F:Ecng.Xaml.Charting.Rendering.Common.TextureMappingMode.PerScreen"/>, then a single texture is shared across multiple columns
              If <see cref="F:Ecng.Xaml.Charting.Rendering.Common.TextureMappingMode.PerPrimitive"/>, then a texture is created and scaled per-column fill area
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.DataPointWidth">
            <summary>
            Gets or sets the DataPointWidth, a value between 0.0 and 1.0 which defines the fraction of available space each column should occupy
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.UseUniformWidth">
            <summary>
            Gets or sets the DataPointWidth, a value between 0.0 and 1.0 which defines the fraction of available space each column should occupy
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.ZeroLineY">
            <summary>
            Gets or sets the value which determines the zero line in Y direction.
            Used to set the bottom of an area
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.HitTest(System.Windows.Point,System.Double,System.Boolean)">
            <summary>
            Performs a hit-test at the specific mouse point (X,Y coordinate on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />),
            returning a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo" /> struct with the results
            </summary>
            <param name="rawPoint">The mouse point on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" /></param>
            <param name="hitTestRadius">The radius in pixels to determine whether a mouse is over a data-point</param>
            <param name="interpolate">If true, use interpolation to perform a hit-test between data-points, or on the area if a <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries" />, <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries" /> or <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries" /></param>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo" /> struct with the results
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.InternalDraw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Draws the series using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> and the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> passed in
            </summary>
            <param name="renderContext">The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen</param>
            <param name="renderPassData">The render pass data. Contains a resampled <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/>, the <see cref="T:Ecng.Xaml.Charting.IndexRange"/> of points on the screen
            and the current YAxis and XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> to convert data-points to screen points</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.GetColumnWidth(Ecng.Xaml.Charting.Model.DataSeries.IPointSeries,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            When overriden in a derived class, computes the width of the columns, which depends on the input data, 
            any spacing and the current viewport dimensions
            </summary>
            <param name="points">The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> containing resampled data to render</param>
            <param name="renderPassData">The <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> containing information about the current render pass</param>
            <returns>The width of the column</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.GetColumnCenterTopAndBottom(System.Int32,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            When overrided in a derived class, returns the extents of a column as pixel coordinates
            </summary>
            <param name="dataPointIndex">The index to the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> for this column</param>
            <param name="renderPassData">The <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> valid for the current render pass</param>
            <param name="zeroY">The pixel coordinate of zero in the Y-direction</param>
            <param name="xCenter">[out] The X-Axis pixel coordinate</param>
            <param name="yTop">[out] The Left-edge Y-Axis pixel coordinate</param>
            <param name="yBottom">[out] The Right-edge Y-Axis pixel coordinate</param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseMountainRenderableSeries">
            <summary>
            An abstract base class which factors out many properties from the <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>
            and <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries"/> types. 
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries"/>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseMountainRenderableSeries.IsDigitalLineProperty">
            <summary>
            Defines the IsDigitalLine DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseMountainRenderableSeries.AreaBrushProperty">
            <summary>
            Defines the AreaBrush DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseMountainRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseMountainRenderableSeries.AreaBrush">
            <summary>
            Gets or sets the Area Brush for the <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>. The mountain chart outline is specified by <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SeriesColor"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseMountainRenderableSeries.AreaColor">
            <summary>
            Gets or sets the Area Color for the <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>. The mountain chart outline is specified by <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SeriesColor"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseMountainRenderableSeries.IsDigitalLine">
            <summary>
            Gets or sets a value indicating whether this mountain series has a digital (step) line
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.CustomRenderableSeries">
            <summary>
            Defines a Custom Renderable Series - override Draw() to define what is drawn to the screen at render time
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.CustomRenderableSeries.InternalDraw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Draws the series using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> and the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> passed in
            </summary>
            <param name="renderContext">The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen</param>
            <param name="renderPassData">The render pass data. Contains a resampled <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/>, the <see cref="T:Ecng.Xaml.Charting.IndexRange"/> of points on the screen
            and the current YAxis and XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> to convert data-points to screen points</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.CustomRenderableSeries.Draw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Draws the series using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> and the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> passed in
            </summary>
            <param name="renderContext">The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen</param>
            <param name="renderPassData">The render pass data. Contains a resampled <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/>, the <see cref="T:Ecng.Xaml.Charting.IndexRange"/> of points on the screen
            and the current YAxis and XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> to convert data-points to screen points</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries">
            <summary>
            A raster RenderableSeries type which displays two lines and shaded bands between them, where band-colors depend on whether one line is greater than the other
            For usage, bind to an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyyDataSeries`2"/> and set the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SeriesColor"/>, <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.Series1Color"/>, 
            <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.BandUpColor"/> and <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.BandDownColor"/> properties
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.IsDigitalLineProperty">
            <summary>
            Defines the IsDigitalLine DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.Series1ColorProperty">
            <summary>
            Defines the Series1Color DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.BandUpColorProperty">
            <summary>
            Defines the BandUpColor DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.BandDownColorProperty">
            <summary>
            Defines the BandDownColor DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.Series0StrokeDashArrayProperty">
            <summary>
            Defines the StrokeDashArray DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.Series1StrokeDashArrayProperty">
            <summary>
            Defines the StrokeDashArray DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.IsDigitalLine">
            <summary>
            Gets or sets a value indicating whether this line series is a digital (step) line
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.Series0StrokeDashArray">
            <summary>
            Gets or sets a StrokeDashArray property, used to define a dashed line. See the MSDN Documentation for 
            <see cref="P:System.Windows.Shapes.Shape.StrokeDashArray"/> as this property attempts to mimic the same behaviour
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.Series1StrokeDashArray">
            <summary>
            Gets or sets a StrokeDashArray property, used to define a dashed line. See the MSDN Documentation for 
            <see cref="P:System.Windows.Shapes.Shape.StrokeDashArray"/> as this property attempts to mimic the same behaviour
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.Series1Color">
            <summary>
            Gets or sets the SeriesColor of the Y1 line. For the Y0 line, use SeriesColor
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.BandDownColor">
            <summary>
            Gets or sets the Color of the shaded area when Y1 is less than Y0
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.BandUpColor">
            <summary>
            Gets or sets the Color of the shaded area when Y1 is greater than Y0
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.RolloverMarker1">
            <summary>
            Gets or sets the RolloverMarker for one of the series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.CreateRolloverMarker">
            <summary>
            Creates a RolloverMarker from the RolloverMarkerTemplate property
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.NearestHitResult(System.Windows.Point,System.Double,Ecng.Xaml.Charting.Common.Extensions.SearchMode,System.Boolean)">
            <summary>
            Called by <see cref="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.HitTest(System.Windows.Point,System.Boolean)" /> to get the nearest (non-interpolated) <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo" /> to the mouse point
            </summary>
            <param name="rawPoint">The mouse point</param>
            <param name="hitTestRadius">The radius (in pixels) to use when determining if the <paramref name="rawPoint" /> is over a data-point</param>
            <param name="searchMode">The search mode.</param>
            <param name="considerYCoordinateForDistanceCalculation">if set to <c>true</c> then perform a true euclidean distance to find the nearest hit result.</param>
            <returns>
            The <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo" /> result
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.GetIsValidForDrawing">
            <summary>
            Gets a value indicating whether this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> is valid for drawing.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.InternalDraw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Draws the series using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> and the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> passed in
            </summary>
            <param name="renderContext">The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen</param>
            <param name="renderPassData">The render pass data. Contains a resampled <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/>, the <see cref="T:Ecng.Xaml.Charting.IndexRange"/> of points on the screen
            and the current YAxis and XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> to convert data-points to screen points</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.CreateBandPolygons(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData,Ecng.Xaml.Charting.Model.DataSeries.IPointSeries,Ecng.Xaml.Charting.Rendering.Common.IBrush2D,Ecng.Xaml.Charting.Model.DataSeries.IPointSeries,Ecng.Xaml.Charting.Rendering.Common.IBrush2D)">
            <summary>
            Creates the band polygons given two <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> inputs 
            </summary>
            <param name="renderContext">The render context.</param>
            <param name="renderPassData">The render pass data.</param>
            <param name="yPointSeries">The y point series.</param>
            <param name="yBrush">The y brush.</param>
            <param name="y1PointSeries">The y1 point series.</param>
            <param name="y1Brush">The y1 brush.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.OnDataSeriesDependencyPropertyChanged(Ecng.Xaml.Charting.Model.DataSeries.IDataSeries,Ecng.Xaml.Charting.Model.DataSeries.IDataSeries)">
            <summary>
            Called when the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.DataSeries" /> property changes - i.e. a new <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries" /> has been set
            </summary>
            <param name="oldDataSeries">The old <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries" /></param>
            <param name="newDataSeries">The new <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries" /></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.Polygon">
            <summary>
            A struct to hold information about a Polygon drawn on a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.Polygon.#ctor(System.Windows.Point[],Ecng.Xaml.Charting.Rendering.Common.IBrush2D)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.Polygon"/> struct.
            </summary>
            <param name="points">The points.</param>
            <param name="brush2D">The brush2 d.</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.Polygon.Brush">
            <summary>
            Gets the brush for filling the polygon
            </summary>            
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.Polygon.Points">
            <summary>
            Gets the points that form the outline of the polygon
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries">
            <summary>
            Defines a Box Plot renderable series, supporting rendering of Lowest, Lower Quartile, Median, Upper Quartile, Maximum 
            statistical data onto a wicked (stroked-outline) box with solid color or gradient filled body. 
            </summary>
            <remarks>
            The FastBoxPlotRenderableSeries requires a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.BoxPlotDataSeries`2"/> data-source, 
            may have a <see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/> point-marker, and draws onto a specific <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>. 
            A given <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> may have 0..N <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>, each of which may map to, or share a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            </remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries.DataPointWidthProperty">
            <summary>
            Defines the DataPointWidth DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries.BodyBrushProperty">
            <summary>
            Defines the UpBodyBrush DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries.DataPointWidth">
            <summary>
            Gets or sets the DataPointWidth, a value between 0.0 and 1.0 which defines the fraction of available space each column should occupy
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries.BodyBrush">
            <summary>
            Gets or sets the Brush used for box-plot body 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries.GetSeriesInfo(Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            Converts the result of a Hit-Test operation (<see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/>) to a <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> struct, which may be used as a
            ViewModel when outputting series values as bindings. <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> is used by the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier"/>, <see cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier"/>
            and <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartLegend"/> classes
            </summary>
            <param name="hitTestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries.GetIsValidForDrawing">
            <summary>
            Gets a value indicating whether this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> is valid for drawing.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries.InternalDraw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Draws the series using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> and the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> passed in
            </summary>
            <param name="renderContext">The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen</param>
            <param name="renderPassData">The render pass data. Contains a resampled <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/>, the <see cref="T:Ecng.Xaml.Charting.IndexRange"/> of points on the screen
            and the current YAxis and XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> to convert data-points to screen points</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries">
            <summary>
            Defines a Bubble-chart renderable series, supporting rendering of bubbles using Z data, positioned using X-Y data.
            Bubbles are defined using the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries.BubbleColor"/> property, but rendered as a soft-edged circle 
            which fades to transparent in the centre. 
            </summary>
            <remarks>
            The FastBubbleRenderableSeries requires a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.XyzDataSeries`3"/> data-source, 
            may have a <see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/> point-marker, and draws onto a specific <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>. 
            A given <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> may have 0..N <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, each of which may map to, or share a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            </remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries"/>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries.BubbleColorProperty">
            <summary>
            Defines the BubbleColor DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries.AutoZRangeProperty">
            <summary>
            Defines the AutoZRange DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries.ZScaleFactorProperty">
            <summary>
            Defines the ZScaleFactor DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries.BubbleColor">
            <summary>
            Gets or sets the BubbleColor, a base colour used when rendering the bubbles as a soft-edged circle, centred on the X-Y point
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries.AutoZRange">
            <summary>
            Gets or sets whether Z-range should be automatically scaled. If True, then depending on the XYZ points in the
            viewport, the size of bubbles will be scaled to fit. Else, the size of bubbles will be absolute
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries.ZScaleFactor">
            <summary>
            Gets or sets a Z-scaling factor, equal to Pixels divided by Z-Unit
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries.InternalDraw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Draws the series using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> and the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> passed in
            </summary>
            <param name="renderContext">The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen</param>
            <param name="renderPassData">The render pass data. Contains a resampled <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/>, the <see cref="T:Ecng.Xaml.Charting.IndexRange"/> of points on the screen
            and the current YAxis and XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> to convert data-points to screen points</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries">
            <summary>
            Defines an Error Bars renderable series, supporting solid, stroked error bars and
            optional Point-markers <seealso cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.PointMarker"/>. 
            </summary>
            <remarks>
            A RenderableSeries has a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> data-source, 
            may have a <see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/> point-marker, and draws onto a specific <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>. 
            A given <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> may have 0..N <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, each of which may map to, or share a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            </remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries"/>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries.DataPointWidthProperty">
            <summary>
            Defines the DataPointWidth DependencyProperty
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries.DataPointWidth">
            <summary>
            Gets or sets the DataPointWidth, a value between 0.0 and 1.0 which defines the fraction of available space each column should occupy
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries.GetIsValidForDrawing">
            <summary>
            Gets a value indicating whether this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> is valid for drawing.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries.InternalDraw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Draws the series using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> and the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> passed in
            </summary>
            <param name="renderContext">The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen</param>
            <param name="renderPassData">The render pass data. Contains a resampled <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/>, the <see cref="T:Ecng.Xaml.Charting.IndexRange"/> of points on the screen
            and the current YAxis and XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> to convert data-points to screen points</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries">
            <summary>
            Displays 2D data as a heatmap
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries.DrawTextInCellProperty">
            <summary>
            Defines the DrawTextInCell DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries.CellTextForegroundProperty">
            <summary>
            Defines the CellTextForeground DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries.CellFontSizeProperty">
            <summary>
            Defines the CellFontSize DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries.ColorMapProperty">
            <summary>
            Defines the ColorMap DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries.MinimumProperty">
            <summary>
            Defines the Minimum DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries.MaximumProperty">
            <summary>
            Defines the Maximum DependencyProperty
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries.PropertyChanged">
            <summary>
            Is used to notify HeatmapColourMap
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries.ColorMap">
            <summary>
            Gets or sets the ColorMap which is used to calculate color from data value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries.Minimum">
            <summary>
            Gets or sets value which corresponds to min color
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries.Maximum">
            <summary>
            Gets or sets value which corresponds to max color
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries.DrawTextInCell">
            <summary>
            Gets or sets a flag to draw value in a cell
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries.CellTextForeground">
            <summary>
            Gets or sets foreground color to draw value in a cell
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries.CellFontSize">
            <summary>
            Gets or sets foreground color to draw value in a cell
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries.MiddleValue">
            <summary>
            Middle value to be displayed by HeatmapColourMap
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries.InternalDraw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Draws the series using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> and the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> passed in
            </summary>
            <param name="renderContext">The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen</param>
            <param name="renderPassData">The render pass data. Contains a resampled <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/>, the <see cref="T:Ecng.Xaml.Charting.IndexRange"/> of points on the screen
            and the current YAxis and XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> to convert data-points to screen points</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastImpulseRenderableSeries">
            <summary>
            Provides Impulse series rendering, which draws a vertical line from zero to with an optional point-marker at the end of the line
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastImpulseRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastImpulseRenderableSeries" /> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastImpulseRenderableSeries.GetYRange(Ecng.Xaml.Charting.IRange,System.Boolean)">
            <summary>
            Returns the data range of the assosiated <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> on Y direction
            <param name="xRange">The X-Axis Range currently in view</param>
            <param name="getPositiveRange">Indicates whether to return positive YRange only</param>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastImpulseRenderableSeries.GetIsValidForDrawing">
            <summary>
            Gets a value indicating whether this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> is valid for drawing.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastImpulseRenderableSeries.InternalDraw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Draws the series using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> and the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> passed in
            </summary>
            <param name="renderContext">The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen</param>
            <param name="renderPassData">The render pass data. Contains a resampled <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/>, the <see cref="T:Ecng.Xaml.Charting.IndexRange"/> of points on the screen
            and the current YAxis and XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> to convert data-points to screen points</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.PaletteProviderBase">
            <summary>
            Base class for custom Palette Providers, which may be used to override bar, candle or OHLC colors for individual points during rendering
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.PaletteProviderBase.GetColor(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries,System.Double,System.Double)">
            <summary>
            When called for an X,Y point, override the color on the attached <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries" />.
            Return null to keep the default series color
            Return a value to override the series color
            </summary>
            <param name="series">The source <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries" /></param>
            <param name="xValue">The X-value of the data-point</param>
            <param name="yValue">The Y-value of the data-point</param>
            <returns>
            The overriden color. Return null to keep the default
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.PaletteProviderBase.OverrideColor(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            When called for an OHLC point, override the color on the attached <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries" />.
            Return null to keep the default series color
            Return a value to override the series color
            </summary>
            <param name="series">The source <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries" /></param>
            <param name="xValue">The x value.</param>
            <param name="openValue">The open value.</param>
            <param name="highValue">The high value.</param>
            <param name="lowValue">The low value.</param>
            <param name="closeValue">The close value.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.PaletteProviderBase.OverrideColor(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries,System.Double,System.Double,System.Double)">
            <summary>
            When called for an bubble point, override the color on the attached <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries" />.
            Return null to keep the default series color
            Return a value to override the series color
            </summary>
            <param name="series">The source <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries" /></param>
            <param name="xValue">The x value.</param>
            <param name="yValue">The y value.</param>
            <param name="zValue">The z value.</param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries">
            <summary>
            Provides Fast Candlestick series rendering, however makes the assumption that all X-Data is evenly spaced. Gaps in the data are collapsed
            </summary>
            <remarks>In order to render data as a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/>, the input <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2"/> 
            must have OHLC data appended via the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2"/> Append method</remarks>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.UpWickColorProperty">
            <summary>
            Defines the UpWickColor DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.DownWickColorProperty">
            <summary>
            Defines the DownWickColor DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.UpBodyBrushProperty">
            <summary>
            Defines the UpBodyBrush DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.DownBodyBrushProperty">
            <summary>
            Defines the DownBodyBrush DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.DataPointWidthProperty">
            <summary>
            Defines the DataPointWidth DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.UpBodyColorProperty">
            <summary>
            Defines the UpBodyColor DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.DownBodyColorProperty">
            <summary>
            Defines the DownBodyColor DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.DataPointWidth">
            <summary>
            Gets or sets the DataPointWidth, a value between 0.0 and 1.0 which defines the fraction of available space each column should occupy
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.UpWickColor">
            <summary>
            Gets or sets the Color used for wicks and outlines on up-candles (close &gt; open)
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.DownWickColor">
            <summary>
            Gets or sets the Color used for wicks and outlines on down-candles (close &lt; open)
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.UpBodyColor">
            <summary>
            Gets or sets the Color used for candle body on up-candles (close &gt; open)
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.UpBodyBrush">
            <summary>
            Gets or sets the Brush used for candle body on up-candles (close &gt; open). If null, UpBodyColor property is used
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.DownBodyColor">
            <summary>
            Gets or sets the Color used for candle body on down-candles (close &lt; open)
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.DownBodyBrush">
            <summary>
            Gets or sets the Brush used for candle body on up-candles (close &gt; open). If null, UpBodyColor property is used
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.OnResamplingModeChanged">
            <summary>
            Called when resampling mode changes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.GetIsValidForDrawing">
            <summary>
            Gets a value indicating whether this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> is valid for drawing.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.InternalDraw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Draws the series using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> and the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> passed in
            </summary>
            <param name="renderContext">The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen</param>
            <param name="renderPassData">The render pass data. Contains a resampled <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/>, the <see cref="T:Ecng.Xaml.Charting.IndexRange"/> of points on the screen
            and the current YAxis and XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> to convert data-points to screen points</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.OnDataSeriesDependencyPropertyChanged(Ecng.Xaml.Charting.Model.DataSeries.IDataSeries,Ecng.Xaml.Charting.Model.DataSeries.IDataSeries)">
            <summary>
            Called when the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.DataSeries" /> property changes - i.e. a new <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries" /> has been set
            </summary>
            <param name="oldDataSeries">The old <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries" /></param>
            <param name="newDataSeries">The new <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries" /></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries">
            <summary>
            Provides Fast Column (Bar) series rendering
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries" /> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries.GetIsValidForDrawing">
            <summary>
            Gets a value indicating whether this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> is valid for drawing.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries.GetYRange(Ecng.Xaml.Charting.IRange,System.Boolean)">
            <summary>
            Returns the data range of the assosiated <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> on Y direction
            <param name="xRange">The X-Axis Range currently in view</param>
            <param name="getPositiveRange">Indicates whether to return positive YRange only</param>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries.GetColumnWidth(Ecng.Xaml.Charting.Model.DataSeries.IPointSeries,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            When overriden in a derived class, computes the width of the columns, which depends on the input data,
            any spacing and the current viewport dimensions
            </summary>
            <param name="points">The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries" /> containing resampled data to render</param>
            <param name="renderPassData">The <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData" /> containing information about the current render pass</param>
            <returns>
            The width of the column
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.LineDrawMode">
            <summary>
            Enumeration Constants to define how double.NaN is treated in the <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.LineDrawMode.ClosedLines">
            <summary>
            double.NaN gaps are treated as closed lines
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.LineDrawMode.Gaps">
            <summary>
            double.NaN gaps are rendered as gaps
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries">
            <summary>
            Defines a Line renderable series, supporting solid, stroked (thickness 1+) lines, dashed lines <seealso cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries.StrokeDashArray"/> and
            optional Point-markers <seealso cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.PointMarker"/>
            </summary>
            <remarks>
            A RenderableSeries has a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> data-source, 
            may have a <see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/> point-marker, and draws onto a specific <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>. 
            A given <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> may have 0..N <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, each of which may map to, or share a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            </remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries"/>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries.IsDigitalLineProperty">
            <summary>
            Defines the IsDigitalLine DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries.StrokeDashArrayProperty">
            <summary>
            Defines the StrokeDashArray DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries.IsDigitalLine">
            <summary>
            Gets or sets a value indicating whether this line series is a digital (step) line
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries.StrokeDashArray">
            <summary>
            Gets or sets a StrokeDashArray property, used to define a dashed line. See the MSDN Documentation for 
            <see cref="P:System.Windows.Shapes.Shape.StrokeDashArray"/> as this property attempts to mimic the same behaviour
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries.OnSeriesColorChanged">
            <summary>
            Called when the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SeriesColor"/> dependency property changes. Allows derived types to do caching 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries.GetIsValidForDrawing">
            <summary>
            Gets a value indicating whether this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> is valid for drawing.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries.InternalDraw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Draws the series using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> and the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> passed in
            </summary>
            <param name="renderContext">The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen</param>
            <param name="renderPassData">The render pass data. Contains a resampled <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/>, the <see cref="T:Ecng.Xaml.Charting.IndexRange"/> of points on the screen
            and the current YAxis and XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> to convert data-points to screen points</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries">
            <summary>
            Provides Fast Mountain (Area) series rendering, however makes the assumption that all X-Data is evenly spaced. Gaps in the data are collapsed
            </summary>
            <remarks>
            A RenderableSeries has a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> data-source, 
            may have a <see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/> point-marker, and draws onto a specific <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>. 
            A given <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> may have 0..N <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, each of which may map to, or share a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            </remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries" /> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries.GetIsValidForDrawing">
            <summary>
            Gets a value indicating whether this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> is valid for drawing.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries.InternalDraw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Draws the series using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D" /> and the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData" /> passed in
            </summary>
            <param name="renderContext">The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen</param>
            <param name="renderPassData">The render pass data. Contains a resampled 
            <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries" />, the 
            <see cref="T:Ecng.Xaml.Charting.IndexRange" /> of points on the screen
            and the current YAxis and XAxis 
            <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1" /> to convert data-points to screen points</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries.IsHitTest(System.Windows.Point,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo,System.Double,System.Windows.Point,System.Windows.Point)">
            <summary>
            When overridden in derived classes, performs hit test on series using interpolated values
            </summary>
            <param name="rawPoint"></param>
            <param name="nearestHitResult"></param>
            <param name="hitTestRadius"></param>
            <param name="yValues"></param>
            <param name="previousDataPoint"> </param>
            <param name="nextDataPoint"></param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries">
            <summary>
            Provides Fast Candlestick series rendering, however makes the assumption that all X-Data is evenly spaced. Gaps in the data are collapsed
            </summary>
            <remarks>In order to render data as a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/>, the input <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2"/> 
            must have OHLC data appended via the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries`2"/> Append method</remarks>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries.UpWickColorProperty">
            <summary>
            Defines the UpWickColor DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries.DownWickColorProperty">
            <summary>
            Defines the DownWickColor DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries.DataPointWidthProperty">
            <summary>
            Defines the DataPointWidth DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries.DataPointWidth">
            <summary>
            Gets or sets the DataPointWidth, a value between 0.0 and 1.0 which defines the fraction of available space each column should occupy
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries.UpWickColor">
            <summary>
            Gets or sets the Color used for wicks and outlines on up-candles (close &gt; open)
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries.DownWickColor">
            <summary>
            Gets or sets the Color used for wicks and outlines on down-candles (close &lt; open)
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries.OnResamplingModeChanged">
            <summary>
            Called when the resampling mode changes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries.GetIsValidForDrawing">
            <summary>
            Gets a value indicating whether this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> is valid for drawing.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries.InternalDraw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Draws the series using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> and the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> passed in
            </summary>
            <param name="renderContext">The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen</param>
            <param name="renderPassData">The render pass data. Contains a resampled <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/>, the <see cref="T:Ecng.Xaml.Charting.IndexRange"/> of points on the screen
            and the current YAxis and XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> to convert data-points to screen points</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries.OnDataSeriesDependencyPropertyChanged(Ecng.Xaml.Charting.Model.DataSeries.IDataSeries,Ecng.Xaml.Charting.Model.DataSeries.IDataSeries)">
            <summary>
            Called when the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.DataSeries" /> property changes - i.e. a new <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries" /> has been set
            </summary>
            <param name="oldDataSeries">The old <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries" /></param>
            <param name="newDataSeries">The new <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries" /></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo">
            <summary>
            Provides information on a series hit test operation, see <see cref="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.HitTest(System.Windows.Point,System.Boolean)"/> for more information
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.Empty">
            <summary>
            Gets special value which represents a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/> instance without data
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.DataSeriesName">
            <summary>
            Gets or sets the Name of the <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> which was hit
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.DataSeriesType">
            <summary>
            Provides information about the type of <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> that was hit tested
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.HitTestPoint">
            <summary>
            Gets or sets a point snapped to the X-Y value of the series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.Y1HitTestPoint">
            <summary>
            Gets or sets a point snapped to the X-Y1 series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.XValue">
            <summary>
            Gets or sets the X Value at the hit-test site
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.YValue">
            <summary>
            Gets or sets the Y-Value at the hit-test site
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.Y1Value">
            <summary>
            Gets or sets the Y1-Value at the hit-test site
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.ZValue">
            <summary>
            Gets or sets the Z-value at the hit-test site
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.DataSeriesIndex">
            <summary>
            Gets or sets the DataSeriesIndex a the hit-test site
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.IsHit">
            <summary>
            Gets or sets whether the HitTest operation was a hit or not
            </summary>
            <remarks>Defined as the input point being within a small distance of the output hittest point</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.IsVerticalHit">
            <summary>
            Gets or sets whether the HitTest operation was a hit at X or not
            </summary>
            <remarks>Defined as the input point being within a small distance of the output hittest point</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.IsWithinDataBounds">
            <summary>
            Gets or sets whether the input point is between first and last series point or not
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.ErrorHigh">
            <summary>
            Gets or sets the Error High value at the hit-test site
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.ErrorLow">
            <summary>
            Gets or sets the Error Low value at the hit-test site
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.OpenValue">
            <summary>
            Gets or sets the Open-Value at the hit-test site
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.HighValue">
            <summary>
            Gets or sets the High-Value at the hit-test site
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.LowValue">
            <summary>
            Gets or sets the Low-Value at the hit-test site
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.CloseValue">
            <summary>
            Gets or sets the Close-Value at the hit-test site
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.Minimum">
            <summary>
            Gets or sets the Minimum-Value at the hit-test site
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.Maximum">
            <summary>
            Gets or sets the Maximum-Value at the hit-test site
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.Median">
            <summary>
            Gets or sets the Median-Value at the hit-test site
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.LowerQuartile">
            <summary>
            Gets or sets the LowerQuartile-Value at the hit-test site
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.UpperQuartile">
            <summary>
            Gets or sets the UpperQuartile-Value at the hit-test site
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.Persentage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.IsEmpty">
            <summary>
            Returns the value, indicating whether current instance of <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/> is empty
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IPaletteProvider">
            <summary>
            Defines the interface to a PaletteProvider. By implementing this interface, you can override colors on a <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.PaletteProvider"/> by setting or binding to the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> property. 
            
            On each point, the GetColor or OverrideColor methods will be called, allowing you the chance to return a custom color for that point. 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IPaletteProvider.GetColor(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries,System.Double,System.Double)">
            <summary>
            When called for an X,Y point, override the color on the attached <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>. 
            
            Return null to keep the default series color
            
            Return a value to override the series color
            </summary>
            <param name="series">The source <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/></param>
            <param name="xValue">The X-value of the data-point</param>
            <param name="yValue">The Y-value of the data-point</param>
            <returns>The overriden color. Return null to keep the default</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IPaletteProvider.OverrideColor(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            When called for an OHLC point, override the color on the attached <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries" />.
            Return null to keep the default series color
            Return a value to override the series color
            </summary>
            <param name="series">The source <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries" /></param>
            <param name="xValue">The x value.</param>
            <param name="openValue">The open value.</param>
            <param name="highValue">The high value.</param>
            <param name="lowValue">The low value.</param>
            <param name="closeValue">The close value.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IPaletteProvider.OverrideColor(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries,System.Double,System.Double,System.Double)">
            <summary>
            When called for an bubble point, override the color on the attached <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries" />.
            Return null to keep the default series color
            Return a value to override the series color
            </summary>
            <param name="series">The source <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries" /></param>
            <param name="xValue">The x value.</param>
            <param name="yValue">The y value.</param>
            <param name="zValue">The z value.</param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeriesBase">
            <summary>
            Defines common properties to 2D and 3D RenderableSeries througout the Ultrachart SDK
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeriesBase.Services">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/> which provides access to services throughout Ultrachart. 
            ServiceContainers are created one per <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/>
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries">
            <summary>
            Defines the interface to all RenderableSeries within Ultrachart. A RenderableSeries is a Line series, or Scatter series or Candlestick series and provides the visual element in pair of <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> and <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries"/>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.SelectionChanged">
            <summary>
            Event raised whenever IsSelected property changed
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.IsVisibleChanged">
            <summary>
            Event raised whenever IsVisible property changed
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.IsVisible">
            <summary>
            Gets or sets whether the series is visible when drawn
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.AntiAliasing">
            <summary>
            Gets or sets whether this series uses AntiAliasing when drawn
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.SeriesColor">
            <summary>
            Gets or sets the SeriesColor. 
            </summary>
            <remarks>This is used by each series type in different ways. For instance:
            <list type="bullet">
                <item><see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries"/> and <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastImpulseRenderableSeries"/> uses the SeriesColor to draw the line series</item>
                <item><see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/> uses the SeriesColor to draw the line over the filled area</item>
                <item><see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries"/> uses the SeriesColor to draw the first line of the pair</item>
                <item><see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/> uses this property to draw the outline of the columns</item>
                <item><see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries"/> and <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries"/> all ignore this property</item>
            </list>
            </remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.IsSelected">
            <summary>
            Gets or sets value, indicates whether this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> is selected
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.StrokeThickness">
            <summary>
            Gets or sets the StrokeThickness in pixels for this series 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.ResamplingMode">
            <summary>
            Gets or sets the <see cref="T:Ecng.Xaml.Charting.Numerics.ResamplingMode"/> used when drawing this series
            </summary>
            <remarks>
            <list type="bullet">
                <item>
                    None: Do not use resampling when redrawing a series
                </item>
                    MinMax: Resample by taking the min-max of oversampled data. This results in the most visually accurate resampling, with the most performant rendering
                <item>
                    Mid: Resample by taking the median point of oversampled data
                </item>
                <item>
                    Max: Resample by taking the maximum point of oversampled data
                </item>
                <item>
                    Min: Resample by taking the minimum point of oversampled data
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.DataSeries">
            <summary>
            Gets or sets the DataSeries associated with this series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.XAxis">
            <summary>
            Gets or sets the XAxis that this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> is associated with
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.YAxis">
            <summary>
            Gets or sets the YAxis that this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> is associated with
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.SelectedSeriesStyle">
            <summary>
            Gets or sets style for selected series
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.Style">
            <summary>
            Gets or sets the style to apply to the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/>
            </summary>        
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.DataContext">
            <summary>
            Gets or sets the DataContext to apply to the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/>
            </summary>        
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.RolloverMarker">
            <summary>
            Gets a cached Framework Element which is used as a Rollover Marker. 
            This is generated from a ControlTemplate in xaml via the <see cref="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.RolloverMarkerTemplateProperty"/> DependencyProperty
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.YAxisId">
            <summary>
            Gets or sets the ID of the Y-Axis which this renderable series is measured against
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.XAxisId">
            <summary>
            Gets or sets the ID of the X-Axis which this renderable series is measured against
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.CurrentRenderPassData">
            <summary>
            Gets or sets the RenderPassData instance used for this render pass
            </summary>
            <value>The render data.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.PaletteProvider">
            <summary>
            Gets or Sets an optional <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IPaletteProvider"/> instance, which may be used to override specific data-point colors during rendering. 
            For more details, see the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IPaletteProvider"/> documentation
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.DisplaysDataAsXy">
            <summary>
            If true, the data is displayed as XY, e.g. like a Scatter plot, not a line (time) series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.HitTest(System.Windows.Point,System.Boolean)">
            <summary>
            Performs a hit-test at the specific mouse point (X,Y coordinate on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />),
            returning a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo" /> struct with the results
            </summary>
            <param name="rawPoint">The mouse point on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" /></param>
            <param name="interpolate">If true, use interpolation to perform a hit-test between data-points, or on the area if a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/> or <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/></param>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo" /> struct with the results
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.HitTest(System.Windows.Point,System.Double,System.Boolean)">
            <summary>
            Performs a hit-test at the specific mouse point (X,Y coordinate on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />),
            returning a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo" /> struct with the results
            </summary>
            <param name="rawPoint">The mouse point on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" /></param>
            <param name="hitTestRadius">The radius in pixels to determine whether a mouse is over a data-point</param>
            <param name="interpolate">If true, use interpolation to perform a hit-test between data-points, or on the area if a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/> or <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/></param>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo" /> struct with the results
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.VerticalSliceHitTest(System.Windows.Point,System.Boolean)">
            <summary>
            Performs a hit-test at the specific mouse point with zero hit-test radius. 
            Method considers only X values and returns a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo" /> struct with the closest X value
            </summary>
            <param name="rawPoint">The mouse point on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" /></param>
            <param name="interpolate">If true, use interpolation to perform a hit-test between data-points, or on the area if a <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>, <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/> or <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/></param>
            <returns>
            A <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo" /> struct with the results
            </returns>
            <remarks>
            Used by <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier"/> and <see cref="T:Ecng.Xaml.Charting.ChartModifiers.VerticalSliceModifier"/>
            </remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.GetSeriesInfo(Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            Converts a <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo"/> hit-test result into a <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/> viewmodel for use in the 
            <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartLegend"/>, <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier"/>, <see cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier"/>.
            </summary>
            <remarks>All the legend and tooltip
            types bind to <see cref="T:Ecng.Xaml.Charting.SeriesInfo"/>, so this is a useful API function to convert hit-test results into this useful type.</remarks>
            <param name="hitTestInfo">The hit-test result to convert</param>
            <returns></returns>
            <seealso cref="T:Ecng.Xaml.Charting.SeriesInfo"/>
            <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier"/>
            <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier"/>
            <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.LegendModifier"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.UltrachartLegend"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.GetXRange">
            <summary>
            Returns the data range of the assosiated <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> on X direction
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.GetYRange(Ecng.Xaml.Charting.IRange)">
            <summary>
            Returns the data range of the assosiated <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> on Y direction
            <param name="xRange">The X-Axis Range currently in view</param>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.GetYRange(Ecng.Xaml.Charting.IRange,System.Boolean)">
            <summary>
            Returns the data range of the assosiated <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> on Y direction
            <param name="xRange">The X-Axis Range currently in view</param>
            <param name="getPositiveRange">Indicates whether to return positive YRange only</param>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries.GetExtendedXRange(Ecng.Xaml.Charting.IndexRange)">
            <summary>
            Returns the data range of the assosiated <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> on X direction which is enough to render VisibleRange=xRange correctly.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData">
            <summary>
            Defines the interface to <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.RenderPassData"/>, the data used in a single render pass by <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> derived types
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData.PointRange">
            <summary>
            Gets the integer indices of the X-Data array that are currently in range.
            </summary>
            <returns>The indices to the X-Data that are currently in range</returns>
            <example>If the input X-data is 0...100 in steps of 1, the VisibleRange is 10, 30 then the PointRange will be 10, 30</example>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData.PointSeries">
            <summary>
            Gets the current point series.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData.IsVerticalChart">
            <summary>
            Gets a value, indicating whether current chart is vertical
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData.YCoordinateCalculator">
            <summary>
            Gets the current Y coordinate calculator.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData.XCoordinateCalculator">
            <summary>
            Gets the current X coordinate calculator.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData.TransformationStrategy">
            <summary>
            Gets the current pixel transformation strategy
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.RenderPassData">
            <summary>
            Provides data used in a single render pass by <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> derived types
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.RenderPassData.#ctor(Ecng.Xaml.Charting.IndexRange,Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator{System.Double},Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator{System.Double},Ecng.Xaml.Charting.Model.DataSeries.IPointSeries,Ecng.Xaml.Charting.StrategyManager.ITransformationStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.RenderPassData"/> class.
            </summary>
            <param name="pointRange">The integer indices to the X-data array that are currently in range.</param>
            <param name="xCoordinateCalculator">The current X Coordinate Calculator</param>
            <param name="yCoordinateCalculator">The current Y Coordinate Calculator</param>
            <param name="pointSeries">The resampled PointSeries to draw</param>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.RenderPassData.IsVerticalChart">
            <summary>
            Gets a value, indicating whether current chart is vertical
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.RenderPassData.YCoordinateCalculator">
            <summary>
            Gets the current Y coordinate calculator.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.RenderPassData.XCoordinateCalculator">
            <summary>
            Gets the current X coordinate calculator.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.RenderPassData.PointSeries">
            <summary>
            Gets the current point series.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.RenderPassData.PointRange">
            <summary>
            Gets the integer indices of the X-Data array that are currently in range.
            </summary>
            <returns>The indices to the X-Data that are currently in range</returns>
              
            <example>If the input X-data is 0...100 in steps of 1, the VisibleRange is 10, 30 then the PointRange will be 10, 30</example>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.RenderPassData.TransformationStrategy">
            <summary>
            Gets the current pixel transformation strategy
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries">
            <summary>
            Defines a Stacked-Column renderable series, supporting rendering of column bars which have accumulated Y-values for multiple series in a group.
            </summary>
            <remarks>
            The StackedColumnRenderableSeries may render data from any a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2"/> derived data-source, 
            may have a <see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/> point-marker, and draws onto a specific <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>. 
            A given <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> may have 0..N <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, each of which may map to, or share a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            </remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries"/>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.StackedGroupIdProperty">
            <summary>  
            Defines the StackedGroupId DependnecyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.IsOneHundredPercentProperty">
            <summary>  
            Defines the IsOneHundredPercent DependnecyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.SpacingProperty">
            <summary>  
            Defines the Spacing DependnecyProperty 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.SpacingModeProperty">
            <summary>  
            Defines the SpacingMode DependnecyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.ShowLabelProperty">
            <summary> 
            Defines the ShowLabel DependnecyProperty 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.LabelColorProperty">
            <summary>  
            Defines the LabelColor DependnecyProperty 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.LabelFontSizeProperty">
            <summary>  
            Defines the LabelFontSize DependnecyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.LabelTextFormattingProperty">
            <summary>  
            Defines the LabelTextFormatting DependnecyProperty 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.StackedGroupId">
            <summary>
            Gets or sets a string StackedGroupId. All series within the same group get stacked vertically.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.IsOneHundredPercent">
            <summary>
            Gets or sets the value which indicates whether the series are 100% stacked
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.Spacing">
            <summary>
            Gets or sets the value which specifies the width of the gap between horizontally stacked columns. 
            Can be set to either a relative or absolute value depending on the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.SpacingMode"/> used.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.SpacingMode">
            <summary>
            Gets or sets the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.SpacingMode"/> to use for the space between columns computations.
            E.g. the default of Absolute requires that <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.Spacing"/> is in pixels. The value
            of Relative requires that <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.Spacing"/> is a double value from 0.0 to 1.0.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.ShowLabel">
            <summary>
            Gets or sets the value indicating whether to show text labels over the columns.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.LabelColor">
            <summary>
            Gets or sets the foreground color for text labels.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.LabelFontSize">
            <summary>
            Gets or sets the font size for text labels.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.LabelTextFormatting">
            <summary>
            Gets or sets the formatting string for text labels.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.Wrapper">
            <summary>
            The <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IStackedColumnsWrapper"/> instance which wraps this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/>.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.GetXRange">
            <summary>
            Computes the full X data range which current <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/> occupies.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.GetYRange(Ecng.Xaml.Charting.IRange,System.Boolean)">
            <summary>
            Returns the data range of the assosiated <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> on Y direction
            <param name="xRange">The X-Axis Range currently in view</param>
            <param name="getPositiveRange">Indicates whether to return positive YRange only</param>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.InternalDraw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Draws the series using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> and the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> passed in.
            </summary>
            <param name="renderContext">The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen</param>
            <param name="renderPassData">The render pass data. Contains a resampled <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/>, the <see cref="T:Ecng.Xaml.Charting.IndexRange"/> of points on the screen
            and the current YAxis and XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> to convert data-points to screen points</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.GetChartRotationAngle">
            <summary>
            Used Internally: gets the rotation angle of the chart, which is 0 degrees or 90 degrees depending on whether the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            has swapped X and Y Axes or not. 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.GetSeriesBodyLowerDataBound(Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            Returns the series lower bound at nearest hit point
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.GetSeriesBodyUpperDataBound(Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            Returns the series upper bound at nearest hit point
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries.GetSeriesBodyWidth(Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo)">
            <summary>
            Returns the width of a single column at <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo.DataSeriesIndex"/>.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries">
            <summary>
            Defines a Stacked-Mountain renderable series, supporting rendering of mountain areas which have accumulated Y-values for multiple series in a group.
            </summary>
            <remarks>
            The StackedMountainRenderableSeries may render data from any a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IXyDataSeries`2"/> derived data-source, 
            may have a <see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/> point-marker, and draws onto a specific <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>. 
            A given <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> may have 0..N <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, each of which may map to, or share a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            </remarks>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.BasePointMarker"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastLineRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastOhlcRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastErrorBarsRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBoxPlotRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBubbleRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries"/>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries.StackedGroupIdProperty">
            <summary>
            Defines the StackedGroupId DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries.IsOneHundredPercentProperty">
            <summary>
            Defines the IsOneHundredPercent DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries.StackedGroupId">
            <summary>
            Gets or sets a string stacked-group Id, used to ensure columns are stacked together
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries.IsOneHundredPercent">
            <summary>
            Gets or sets a value whether all series with the same <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries.StackedGroupId"/> will appear 100% stacked
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries.GetYRange(Ecng.Xaml.Charting.IRange,System.Boolean)">
            <summary>
            Returns the data range of the assosiated <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> on Y direction
            <param name="xRange">The X-Axis Range currently in view</param>
            <param name="getPositiveRange">Indicates whether to return positive YRange only</param>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries.Ecng#Xaml#Charting#Visuals#RenderableSeries#IStackedMountainRenderableSeries#DrawMountain(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,System.Boolean)">
            <summary>
            Draws the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries"/> using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> and renderable series itself passed in
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries.IsHitTest(System.Windows.Point,Ecng.Xaml.Charting.Visuals.RenderableSeries.HitTestInfo,System.Double,System.Windows.Point,System.Windows.Point)">
            <summary>
            When overridden in derived classes, performs hit test on series using interpolated values
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.TemplatableControl">
            <summary>
            Placeholder class for an empty control. Should be styled via control template
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.PointMarker">
            <summary>
            Placeholder class for a PointMarker. Should be styled via control template
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.PointMarker.DeferredContentProperty">
            <summary>
            Defines the DeferredContent DependencyProperty
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.PointMarker.DeferredContent">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate"/> which content is going to be used as a Content
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.PointMarker.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.PointMarker.CreateFromTemplate(System.Windows.Controls.ControlTemplate,System.Object)">
            <summary>
            Returns new instance of <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.PointMarker"/>, which was created from the <paramref name="template"/>
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.LegendPlaceholder">
            <summary>
            Used as a helper class to place a Legend inside. Used by <see cref="T:Ecng.Xaml.Charting.ChartModifiers.LegendModifier"/>.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.LegendPlaceholder.#ctor">
            <summary>
            Initializes a new <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.LegendPlaceholder"/> instance.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.TooltipControl">
            <summary>
            Placeholder class for a <see cref="T:Ecng.Xaml.Charting.IDataTemplateSelector"/> instance
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.TooltipControl.SelectorProperty">
            <summary>
            Defines Selector DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.TooltipControl.SelectorContextProperty">
            <summary>
            Defines SelectorContext DependencyProperty
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.TooltipControl.Selector">
            <summary>
            Gest or sets instance of <see cref="T:Ecng.Xaml.Charting.IDataTemplateSelector"/> which selects data template for current content
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.TooltipControl.SelectorContext">
            <summary>
            Gets or sets context for <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.TooltipControl.Selector"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.TooltipControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.TooltipControl"/> class.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.ScrollbarResizeGrip">
            <summary>
            Used as a root element for <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar"/> resizing grip.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.ScrollbarViewport">
            <summary>
            Used as a root element for <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar"/> viewport which shows currently selected area.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries">
            <summary>
            Provides Scatter series rendering via the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.PointMarker"/> property. 
            </summary>
            <remarks><see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries"/> does not support resampling and so ignores the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.ResamplingMode"/> property</remarks>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries.DoClusterResamplingProperty">
            <summary>
            The DoClusterResampling property
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries.DoClusterResampling">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries"/> should use Cluster Resampling
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries.DisplaysDataAsXy">
            <summary>
            If true, the data is displayed as XY, e.g. like a Scatter plot, not a line (time) series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.RenderableSeries.XyScatterRenderableSeries.InternalDraw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Draws the series using the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> and the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData"/> passed in
            </summary>
            <param name="renderContext">The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen</param>
            <param name="renderPassData">The render pass data. Contains a resampled <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/>, the <see cref="T:Ecng.Xaml.Charting.IndexRange"/> of points on the screen
            and the current YAxis and XAxis <see cref="T:Ecng.Xaml.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/> to convert data-points to screen points</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.IChartModifierSurface">
            <summary>
            Defines the base interface to the Canvas that <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> instances interact with
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IChartModifierSurface.ClipToBounds">
            <summary>
            Gets or sets whether UIElements added to the ModifierSurface should clip to bounds or not
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IChartModifierSurface.Children">
            <summary>
            Gets the collection of UIElement children drawn on the canvas
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IChartModifierSurface.Clear">
            <summary>
            Clears all children off the <see cref="T:Ecng.Xaml.Charting.Visuals.IChartModifierSurface"/> 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IChartModifierSurface.CaptureMouse">
            <summary>
            Captures the mouse on the <see cref="T:Ecng.Xaml.Charting.Visuals.IChartModifierSurface"/> canvas
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IChartModifierSurface.ReleaseMouseCapture">
            <summary>
            Releases the mouse capture on the <see cref="T:Ecng.Xaml.Charting.Visuals.IChartModifierSurface"/> canvas
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.ChartModifierSurface">
            <summary>
            Defines the ChartModifierSurface, which acts as an overlay <see cref="T:System.Windows.Controls.Canvas"/> on top of the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> for drawing annotations, 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.ChartModifierSurface.ClipToBoundsProperty">
            <summary>
            Defines the ClipToBounds DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.ChartModifierSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.ChartModifierSurface"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.ChartModifierSurface.ClipToBounds">
            <summary>
            Gets or sets whether UIElements added to the ModifierSurface should clip to bounds or not
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.ChartModifierSurface.Children">
            <summary>
            Gets the collection of UIElement children drawn on the canvas over the top of the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.ChartModifierSurface.Clear">
            <summary>
            Clears all children off the <see cref="T:Ecng.Xaml.Charting.Visuals.IChartModifierSurface"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.ChartModifierSurface.TranslatePoint(System.Windows.Point,Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Translates the point relative to the other <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable"/> element
            </summary>
            <param name="point">The input point relative to this <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable"/></param>
            <param name="relativeTo">The other <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable"/> to use when transforming the point</param>
            <returns>The transformed Point</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.ChartModifierSurface.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable"/> element
            </summary>
            <param name="point">The point to test, translated relative to RootGrid</param>
            <returns>true if the Point is within the bounds</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.ChartModifierSurface.GetBoundsRelativeTo(Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Gets the bounds of the current <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable"/> element relative to another <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable"/> element
            </summary>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.HeatmapColourMap">
            <summary>
            A Legend Control for the <see cref="P:Ecng.Xaml.Charting.Visuals.HeatmapColourMap.FastHeatMapRenderableSeries"/>, which gives a visual representation of double-to-color mapping in the heatmap
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.HeatmapColourMap.FastHeatMapRenderableSeriesProperty">
            <summary>
            Defines the FastHeatMapRenderableSeries DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.HeatmapColourMap.OrientationProperty">
            <summary>
            Defines the Orientation DependencyProperty
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.HeatmapColourMap.FastHeatMapRenderableSeries">
            <summary>
            Gets or sets the associated <see cref="P:Ecng.Xaml.Charting.Visuals.HeatmapColourMap.FastHeatMapRenderableSeries"/> to derive color information from
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.HeatmapColourMap.Orientation">
            <summary>
            Gets or sets <see cref="P:Ecng.Xaml.Charting.Visuals.HeatmapColourMap.Orientation"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.HeatmapColourMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.HeatmapColourMap" /> class.
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.HeatmapColourMap.PropertyChanged">
            <summary>
            Is raised when a property is changed
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.IHitTestable">
            <summary>
            Defines the base interface for a type which can be hit-tested
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IHitTestable.ActualWidth">
            <summary>
            Gets the width of the <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IHitTestable.ActualHeight">
            <summary>
            Gets the height of the <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IHitTestable.TranslatePoint(System.Windows.Point,Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Translates the point relative to the other <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable"/> element
            </summary>
            <param name="point">The input point relative to this <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable"/></param>
            <param name="relativeTo">The other <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable"/> to use when transforming the point</param>
            <returns>The transformed Point</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IHitTestable.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable"/> element
            </summary>
            <param name="point">The point to test</param>
            <returns>true if the Point is within the bounds</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IHitTestable.GetBoundsRelativeTo(Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Gets the bounds of the current <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable"/> element relative to another <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable"/> element
            </summary>
            <param name="relativeTo"></param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.IInvalidatableElement">
            <summary>
            Types which implement IInvalidatableElement can be invalidated (redrawn)
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IInvalidatableElement.InvalidateElement">
            <summary>
            Asynchronously requests that the element redraws itself plus children. 
            Will be ignored if the element is ISuspendable and currently IsSuspended (within a SuspendUpdates/ResumeUpdates call)
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.ISuspendable">
            <summary>
            Types which implement ISuspendable can have updates suspended/resumed. Useful for batch operations 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.ISuspendable.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.ISuspendable.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>The disposable Update Suspender</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.ISuspendable.ResumeUpdates(Ecng.Xaml.Charting.Visuals.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by IUpdateSuspender
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.ISuspendable.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.IMainGrid">
            <summary>
            Defines the interface to the Maingrid, a root grid which hosts the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.MainGrid">
            <summary>
            Defines the Maingrid, a root grid which hosts the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.MainGrid.TouchDown">
            <summary>
            Occurs when an input device begins a manipulation on the <see cref="T:System.Windows.UIElement" />.
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.MainGrid.TouchMove">
            <summary>
            Occurs when an input device changes position during manipulation.
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.MainGrid.TouchUp">
            <summary>
            Occurs when a manipulation and inertia on the <see cref="T:System.Windows.UIElement" /> object is complete.
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.MainGrid.MouseMiddleButtonDown">
            <summary>
            Occurs when the middle mouse button is pressed while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.MainGrid.MouseMiddleButtonUp">
            <summary>
            Occurs when the middle mouse button is released while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>. However, this event will only be raised if a caller marks the preceding <see cref="E:System.Windows.UIElement.MouseRightButtonDown"/> event as handled; see Remarks.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.MainGrid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.MainGrid"/> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.MainGrid.TranslatePoint(System.Windows.Point,Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Translates the point relative to the other hittestable element
            </summary>
            <param name="point">The point.</param>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.MainGrid.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current HitTestable element
            </summary>
            <param name="point">The point to test</param>
            <returns>true if the Point is within the bounds</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.MainGrid.GetBoundsRelativeTo(Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Gets the bounds of the current HitTestable element relative to another HitTestable element
            </summary>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.IUltrachartSurface">
            <summary>
            Defines the interface to the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>, which contains a single <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> viewport 
            for rendering multiple <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/>, X and Y <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> instances, and where each <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> may have a <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> data source. 
            
            The <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> may have zero to many <see cref="T:System.Windows.UIElement"/> <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase">annotations</see> and may have a <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> to enable interaction with the chart.
            Where many <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase">ChartModifiers</see> are used, you may use a <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup"/> to group them.
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase"/>
            <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/>
            <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.ModifierGroup"/>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.AxisAlignmentChanged">
            <summary>
            Event raised when alignment of any axis changed
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.AnnotationsCollectionNewCollectionAssigned">
            <summary>
            Event raised when Annotations DependencyProperty is changed
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.YAxesCollectionNewCollectionAssigned">
            <summary>
            Event raised when YAxes DependnecyProperty is changed
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.XAxesCollectionNewCollectionAssigned">
            <summary>
            Event raised when XAxes DependnecyProperty is changed
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.ChartModifier">
            <summary>
            Gets or sets the current ChartModifier, which alters the behaviour of the chart
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.Annotations">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection"/> which provides renderable annotations over the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.XAxis">
            <summary>
            Gets or sets the XAxis control on the UltrachartSurface
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.YAxis">
            <summary>
            Gets or sets the primary YAxis control on the UltrachartSurface (default side=Right)
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.YAxes">
            <summary>
            Gets the collection of Y-Axis <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> that this UltrachartSurface measures against
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.XAxes">
            <summary>
            Gets the collection of X-Axis <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> that this UltrachartSurface measures against
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.GridLinesPanel">
            <summary>
            Gets the GridLinesPanel where gridlines are drawn
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.RenderableSeries">
            <summary>
            Gets the collection of RenderableSeries that this UltrachartSurface draws.        
            </summary>
            <remarks>A <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> is bound to an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> derived type.
            If a RenderableSeries.IsEnabled=false, then this series is skipped when evaluating the series to draw</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.SelectedRenderableSeries">
            <summary>
            Gets the collection of RenderableSeries that are selected.
            </summary>
            <value>The renderable series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.RootGrid">
            <summary>
            Gets the Root Grid that hosts the Ultrachart RenderSurface, GridLinesPanel, X-Axis and Y-Axes (Left and right)
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.ViewportManager">
            <summary>
            Gets or sets the current ViewportManager, which alters the behaviour of the viewport (X,Y range) when the chart is rendered
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.AnnotationOverlaySurface">
            <summary>
            Gets the Annotation Canvas over the chart
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.AnnotationUnderlaySurface">
            <summary>
            Gets the Annotation Canvas under the chart
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.AdornerLayerCanvas">
            <summary>
            Gets the Adorner Layer over the chart
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.LicenseDaysRemaining">
            <summary>
            Gets the number of license days remaining
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.SeriesSource">
            <summary>
            The SeriesSource property allows data-binding to a collection of <see cref="T:Ecng.Xaml.Charting.IChartSeriesViewModel"/> instances, 
            for pairing of <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/> with <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.ClearSeries">
            <summary>
            Removes all DataSeries from the Ultrachart
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.OnArrangeUltrachart">
            <summary>
            Preparations for a render pass, called internally, returns the viewport size
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current HitTestable element
            </summary>
            <param name="point">The point to test</param>
            <returns>true if the Point is within the bounds</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.GetBoundsRelativeTo(Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Gets the bounds of the current HitTestable element relative to another HitTestable element
            </summary>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.TranslatePoint(System.Windows.Point,Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Translates the point relative to the other hittestable element
            </summary>
            <param name="point">The point.</param>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.GetWindowedYRange(Ecng.Xaml.Charting.Visuals.Axes.IAxis,Ecng.Xaml.Charting.IRange)">
            <summary>
            Equivalent of calling YAxis.GetMaximumRange() however returns the max range only for that axis (by the data-series on it)
            </summary>
            <param name="yAxis"></param>
            <param name="xRange"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.OnAxisAlignmentChanged(Ecng.Xaml.Charting.Visuals.Axes.IAxis,Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment)">
            <summary>
            Called internally by Ultrachart when <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.AxisAlignment"/> changes. Allows the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to reposition the axis, e.g. at the top, left, bottom, right
            </summary>
            <param name="axis"></param>
            <param name="oldValue"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.OnIsCenterAxisChanged(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Called internally by Ultrachart when <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.IsCenterAxis"/> changes. Allows the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to place the axis in the center of chart
            </summary>
            <param name="axis"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.DetachDataSeries(Ecng.Xaml.Charting.Model.DataSeries.IDataSeries)">
            <summary>
            Detaches listeners for DataSeries.DataSeriesChanged
            </summary>
            <param name="dataSeries"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.AttachDataSeries(Ecng.Xaml.Charting.Model.DataSeries.IDataSeries)">
            <summary>
            Attaches listeners for DataSeries.DataSeriesChanged
            </summary>
            <param name="dataSeries"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartSurface.ExportToBitmapSource">
            <summary>
            Export snapshot of current <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.UltrachartLegend">
            <summary>
            Provides a Legend control to display series color and name
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartLegend.LegendDataProperty">
            <summary>
            Defines the LegendData Dependency property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartLegend.ShowVisibilityCheckboxesProperty">
            <summary>
            Defines the ShowVisibilityCheckboxes DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartLegend.ShowSeriesMarkersProperty">
            <summary>
            Defines the ShowPointMarkers DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartLegend.OrientationProperty">
            <summary>
            Defines the Orientation DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartLegend.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartLegend"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartLegend.LegendData">
            <summary>
            Gets or sets the <see cref="T:Ecng.Xaml.Charting.ChartDataObject"/> which provides SeriesInfo property
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartLegend.ShowVisibilityCheckboxes">
            <summary>
            Gets or sets whether a column of checkboxes bound to the Visibility of series is shown
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartLegend.ShowSeriesMarkers">
            <summary>
            Gets or sets the value indicating whether to show series markers defined by <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.LegendMarkerTemplate"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartLegend.Orientation">
            <summary>
            Gets or sets the value, which determines the orientation of legend items layout
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.UltrachartOverview">
            <summary>
            A slider that provides the a range
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartOverview.SeriesColorProperty">
            <summary>
            Provides the SeriesColor for IRenderableSeries
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartOverview.AreaBrushProperty">
            <summary>
            Provides the AreaBrush for FastMountainRenderableSeries
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartOverview.DataSeriesProperty">
            <summary>
            Provides the DataSeriesIndex for IRenderableSeries
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartOverview.ParentSurfaceProperty">
            <summary>
            Provides the ParentSurface which this overview control is associated with
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartOverview.XAxisIdProperty">
            <summary>
            Defines the XAxisId DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartOverview.SelectedRangeProperty">
            <summary>
            Selected range of the range slider
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartOverview.AxisProperty">
            <summary>
            Defines the Axis DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartOverview.ScrollbarStyleProperty">
            <summary>
            Defines the ScrollbarStyle
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartOverview.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartOverview.BackgroundChartSurface">
            <summary>
            Returns the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> instance that this Overview control hosts. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ecng.Xaml.Charting.Visuals.UltrachartOverview.RenderableSeriesStyle" -->
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartOverview.RenderableSeriesType">
            <summary>
            Gets or sets the type of the renderable series to display behind the UltrachartOverview
            </summary>        
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartOverview.SeriesColor">
            <summary>
            Gets or sets the SeriesColor.
            </summary>
            <value>The color of the series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartOverview.AreaBrush">
            <summary>
            Gets or sets the Area Brush for the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>. The mountain chart outline is specified by <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SeriesColor"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartOverview.DataSeries">
            <summary>
            Gets or sets the DataSeries used to draw the background chart
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartOverview.XAxisId">
            <summary>
            Gets or sets which XAxis to bind the UltrachartOverview to, matching by string Id
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartOverview.ParentSurface">
            <summary>
            Gets or sets the ParentSurface which this overview control is bound to
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartOverview.SelectedRange">
            <summary>
            Selected range of the range slider
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartOverview.Axis">
            <summary>
            Gets current axis which this control is bound to
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartOverview.ScrollbarStyle">
            <summary>
            Get or sets style for scrollbar which is used by this overview control
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartOverview.InvalidateElement">
            <summary>
            Asynchronously requests that the element redraws itself plus children.
            Will be ignored if the element is ISuspendable and currently IsSuspended (within a SuspendUpdates/ResumeUpdates call)
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartOverview.OnApplyTemplate">
            <summary>
            Overide to get the visuals from the control template
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar">
            <summary>
            A scrollbar which allows to scroll <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> content
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.AxisProperty">
            <summary>
            Provides the Axis which this scrollbar control is associated with
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.SelectedRangeProperty">
            <summary>
            Selected range of the range slider
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.SelectedRangePointProperty">
            <summary>
            Defines the SelectedRangePoint DependencyProperty, used internally for animations
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.GripsThicknessProperty">
            <summary>
            Defines the GripsThickness DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.GripsLengthProperty">
            <summary>
            Defines the GripsLength DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.GripsStyleProperty">
            <summary>
            Defines the GripsStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.ViewportStyleProperty">
            <summary>
            Defines the ViewportStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.NonSelectedAreaStyleProperty">
            <summary>
            Defines the NonSelectedArea DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.OrientationProperty">
            <summary>
            Defines The Orientation DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.ZoomLimitProperty">
            <summary>
            Defines the ZoomLimit DependencyProperty
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.SelectedRangeChanged">
            <summary>
            Raised when the <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.SelectedRange"/> changes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.SelectedRange">
            <summary>
            Selected range of the horizontal range slider
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.Axis">
            <summary>
            Gets or sets Axis which this scrollbar control is bound to
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.GripsThickness">
            <summary>
            Gets or sets thickness of grips
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.GripsLength">
            <summary>
            Gets or sets length of resizing grips
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.NonSelectedAreaStyle">
            <summary>
            Gets or sets style for non selected area of scrollbar
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.ViewportStyle">
            <summary>
            Gets or sets style for viewport area of scrollbar which contains <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.SelectedRange"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.GripsStyle">
            <summary>
            Gets or sets style for grips
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.Orientation">
            <summary>
            Get or set whether <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar"/> is displayed horizontally or vertically
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.ZoomLimit">
            <summary>
            Gets or sets minimal size of viewport in pixels
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.OnApplyTemplate">
            <summary>
            Overide to get the visuals from the control template
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.AnimateSelectedRangeTo(Ecng.Xaml.Charting.IRange,System.TimeSpan)">
            <summary>
            Animates the SelectedRange property from its current start position to the destination over the specified duration. 
            Use this to get a smooth animated effect from one position to the next
            </summary>
            <param name="to"></param>
            <param name="duration"></param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface">
            <summary>
            Provides a high performance chart surface with a single <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> viewport 
            for rendering multiple <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/>, multiple X and Y <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> instances, 
            with <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> bindings, mulitple <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> derived behaviour modifiers and 
            multiple <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase"/> UIElement Annotations
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase"/>
            <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ClipUnderlayAnnotationsProperty">
            <summary>
            Defines the ClipUnderlayAnnotations DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ClipOverlayAnnotationsProperty">
            <summary>
            Defines the ClipOverlayAnnotations DepedencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ZoomExtentsCommandProperty">
            <summary>
            Defines the ZoomExtentsCommand DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AnimateZoomExtentsCommandProperty">
            <summary>
            Defines the ZoomExtentsCommand DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.XAxisProperty">
            <summary>
            Defines the XAxis DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.YAxisProperty">
            <summary>
            Defines the YAxis DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.YAxesProperty">
            <summary>
            Defines the YAxes DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.XAxesProperty">
            <summary>
            Defines the YAxes DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AnnotationsProperty">
            <summary>
            Defines the Annotations DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AutoRangeOnStartupProperty">
            <summary>
            Defines the AutoRangeOnStartup DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ChartModifierProperty">
            <summary>
            Defines the ChartModifier DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.LeftAxesPanelTemplateProperty">
            <summary>
            Defines the LeftAxisPanelTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.RightAxesPanelTemplateProperty">
            <summary>
            Defines the RightAxisPanelTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.TopAxesPanelTemplateProperty">
            <summary>
            Defines the RightAxisPanelTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.BottomAxesPanelTemplateProperty">
            <summary>
            Defines the RightAxisPanelTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.GridLinesPanelStyleProperty">
            <summary>
            Defines the GridLinesPanelStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.RenderSurfaceStyleProperty">
            <summary>
            Defines the RenderSurfaceStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.RenderableSeriesProperty">
            <summary>
            Defines the RenderableSeries DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.SelectedRenderableSeriesProperty">
            <summary>
            Defines the SelectedRenderableSeries DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ViewportManagerProperty">
            <summary>
            Defines the ViewportManager DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.SeriesSourceProperty">
            <summary>
            Defines the SeriesSource DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurface.IsPolarChartProperty">
            <summary>
            Defines the IsPolarChart DependencyProperty
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AxisAlignmentChanged">
            <summary>
            Event raised when alignment of any axis changed
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.UltrachartSurface.XAxesCollectionNewCollectionAssigned">
            <summary>
            Event raised when XAxes DependnecyProperty is changed
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.UltrachartSurface.YAxesCollectionNewCollectionAssigned">
            <summary>
            Event raised when YAxes DependnecyProperty is changed
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AnnotationsCollectionNewCollectionAssigned">
            <summary>
            Event raised when Annotations DependencyProperty is changed
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.LicenseDaysRemaining">
            <summary>
            Gets the number of license days remaining
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.LeftAxesPanelTemplate">
            <summary>
            Gets or sets the template that defines the panel which controls the layout of left-aligned axes
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.RightAxesPanelTemplate">
            <summary>
            Gets or sets the template that defines the panel which controls the layout of right-aligned axes
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.BottomAxesPanelTemplate">
            <summary>
            Gets or sets the template that defines the panel which controls the layout of bottom-aligned axes
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.TopAxesPanelTemplate">
            <summary>
            Gets or sets the template that defines the panel which controls the layout of top-aligned axes
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ClipOverlayAnnotations">
            <summary>
            Gets or sets whether annotations over the chart should clip to bounds or not. Default value is True
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ClipUnderlayAnnotations">
            <summary>
            Gets or sets whether annotations under the chart should clip to bounds or not. Default value is true
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.RenderableSeries">
            <summary>
            Gets the collection of RenderableSeries that this UltrachartSurface draws.
            </summary>
            <value>The renderable series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.SelectedRenderableSeries">
            <summary>
            Gets the collection of RenderableSeries that are selected.
            </summary>
            <value>The renderable series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AutoRangeOnStartup">
            <summary>
            Gets or sets a value indicating whether Ultrachart will attempt to perform a one-time AutoRange on startup
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ZoomExtentsCommand">
            <summary>
            Gets or sets the zoom extents command, which when invoked, causes the UltrachartSurface to zoom to extents
            </summary>
            <value>The zoom extents command.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AnimateZoomExtentsCommand">
            <summary>
            Gets or sets the Animate zoom extents command, which when invoked, causes the UltrachartSurface to zoom to extents using animation
            </summary>
            <value>The zoom extents command.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.XAxis">
            <summary>
            Gets or sets the primary XAxis on the UltrachartSurface (default side=Bottom)
            </summary>
            <value>The X axis.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.YAxis">
            <summary>
            Gets or sets the primary YAxis on the UltrachartSurface (default side=Right)
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.YAxes">
            <summary>
            Gets the collection of Y-Axis <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> that this UltrachartSurface measures against
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.XAxes">
            <summary>
            Gets the collection of X-Axis <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/> that this UltrachartSurface measures against
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.Annotations">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCollection"/> which provides renderable annotations over the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ViewportManager">
            <summary>
            Gets or sets the ViewportManager instance on the chart, which handles behavior of the viewport on render
            </summary>
            <value>The renderable series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AnnotationOverlaySurface">
            <summary>
            Gets the Annotation Canvas over the chart
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AnnotationUnderlaySurface">
            <summary>
            Gets the Annotation Canvas under the chart
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AdornerLayerCanvas">
            <summary>
            Gets the Adorner Layer over the chart
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ChartModifier">
            <summary>
            Gets or sets the current ChartModifier, which alters the behaviour of the chart
            </summary>
            <value>The chart modifier.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.GridLinesPanel">
            <summary>
            Gets the GridLinesPanel where gridlines are drawn
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.GridLinesPanelStyle">
            <summary>
            Gets or sets the GridLinesPanel style.
            </summary>
            <value>The grid lines panel style.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.RenderSurfaceStyle">
            <summary>
            Gets or sets the RenderSurface style.
            </summary>
            <value>The render surface style.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.SeriesSource">
            <summary>
            The SeriesSource property allows data-binding to a collection of <see cref="T:Ecng.Xaml.Charting.IChartSeriesViewModel"/> instances, 
            for pairing of <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.DataSeries`2"/> with <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.IsPolarChart">
            <summary>
            Gets whether this <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> is a polar chart or not
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>. In simplest terms, this means the method is called just before a UI element displays in an application. For more information, see Remarks.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.OnUltrachartRendered">
            <summary>
            Raises the <see cref="E:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.Rendered"/> event, fired at the end of a render pass immediately before presentation to the screen 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.MeasureOverride(System.Windows.Size)">
            <summary>
            Called to remeasure a control.
            </summary>
            <param name="constraint">The maximum size that the method can return.</param>
            <returns>
            The size of the control, up to the maximum specified by <paramref name="constraint" />.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ZoomExtents">
            <summary>
            Zooms the chart to the extents of the data, plus any X or Y Grow By fraction set on the X and Y Axes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AnimateZoomExtents(System.TimeSpan)">
            <summary>
            Zooms to extents with the specified animation duration
            </summary>
            <param name="duration">The duration of animation when zooming to extents</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ZoomExtentsY">
            <summary>
            Zooms the chart to the extents of the data in the Y-Direction, accounting for the current data in view in the X-direction
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AnimateZoomExtentsY(System.TimeSpan)">
            <summary>
            Zooms the chart to the extents of the data in the Y-Direction, accounting for the current data in view in the X-direction
            </summary>
            <param name="duration"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ZoomExtentsX">
            <summary>
            Zooms the chart to the extents of the data in the X-Direction
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AnimateZoomExtentsX(System.TimeSpan)">
            <summary>
            Zooms the chart to the extents of the data in the X-Direction, using animation with the specified duration
            </summary>
            <param name="duration">The duration of the animation</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>The disposable Update Suspender</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ResumeUpdates(Ecng.Xaml.Charting.Visuals.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by IUpdateSuspender
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ClearSeries">
            <summary>
            Removes all DataSeries from the Ultrachart
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.VersionAndLicenseInfo">
            <summary>
            Returns version and license info as a formatted string
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.SetLicenseKey(System.String)">
            <summary>
            Manually applies a license key, in case automatic discovery fails
            </summary>
            <param name="key">The license key string</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.TranslatePoint(System.Windows.Point,Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Translates the point relative to the other hittestable element
            </summary>
            <param name="point">The point.</param>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current HitTestable element
            </summary>
            <param name="point">The point to test</param>
            <returns>true if the Point is within the bounds</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.GetBoundsRelativeTo(Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Gets the bounds of the current HitTestable element relative to another HitTestable element
            </summary>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AttachDataSeries(Ecng.Xaml.Charting.Model.DataSeries.IDataSeries)">
            <summary>
            Attaches listeners for DataSeries.DataSeriesChanged
            </summary>remote
            
            <param name="dataSeries"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.DetachDataSeries(Ecng.Xaml.Charting.Model.DataSeries.IDataSeries)">
            <summary>
            Detaches listeners for DataSeries.DataSeriesChanged
            </summary>
            <param name="dataSeries"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.OnUltrachartSurfaceLoaded">
            <summary>
            Called when the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase" /> is loaded. Perform initialization operations here.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.OnUltrachartSurfaceUnloaded">
            <summary>
            Called when the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase" /> is Unloaded and removed from the visual tree. Perform cleanup operations here
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.OnArrangeUltrachart">
            <summary>
            Preparations for a render pass, called internally, returns the viewport size
            </summary>
            <returns>The required Viewport Size</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.GetWindowedYRange(Ecng.Xaml.Charting.Visuals.Axes.IAxis,Ecng.Xaml.Charting.IRange)">
            <summary>
            Equivalent of calling YAxis.GetMaximumRange() however returns the max range only for that axis (by the data-series on it)
            "windowed" = "displayed in current viewport"
            uses GrowBy()
            </summary>
            <param name="yAxis"></param>
            <param name="xRange"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.OnIsCenterAxisChanged(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Called internally by Ultrachart when <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.IsCenterAxis"/> changes. Allows the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to place the axis in the center of chart
            </summary>
            <param name="axis"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.OnAxisAlignmentChanged(Ecng.Xaml.Charting.Visuals.Axes.IAxis,Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment)">
            <summary>
            Called internally by Ultrachart when <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.AxisAlignment" /> changes. Allows the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" /> to reposition the axis, args.g. at the top, left, bottom, right
            </summary>
            <param name="axis"></param>
            <param name="oldValue"> </param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.GetSchema">
            <summary>
            Returns an XmlSchema that describes the XML representation of the object that is produced by the WriteXml method and consumed by the ReadXml method
            </summary>
            <remarks>
            This method is reserved by <see cref="T:System.Xml.Serialization.IXmlSerializable"/> and should not be used
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> from its XML representation.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> into its XML representation.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ExportToBitmapSource">
            <summary>
            Export snapshot of current <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.ExportToFile(System.String,Ecng.Xaml.Charting.Visuals.ExportType)">
            <summary>
            Saves snapshot of current <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to file
            </summary>
            <param name="fileName"></param>
            <param name="exportType">Defines format of file to export</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.Print(System.String)">
            <summary>
            Outputs current <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to printer
            </summary>
            <param name="description">Description of printing job</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.OnUltrachartSurfaceSizeChanged">
            <summary>
            Called when the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase"/> Size changes. Perform render surface resize or redraw operations here
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.OnDataContextChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase" /> DataContext changes.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.RegisterServices(Ecng.Xaml.Charting.IServiceContainer)">
            <summary>
            Called in the constructor of <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase" />, gives derived classes the opportunity to register services per <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase" /> instance
            </summary>
            <returns>
            The populated <see cref="T:Ecng.Xaml.Charting.IServiceContainer" />. Must not return null. Return at least an empty <see cref="T:Ecng.Xaml.Charting.ServiceContainer" />
            </returns>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AxisAreaBottom">
            <summary>
            Gets the Bottom AxisArea, which contains the Axes which have <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AxisAlignment"/> set to <see cref="F:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment.Bottom"/> 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AxisAreaRight">
            <summary>
            Gets the Right AxisArea, which contains the Axes which have <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AxisAlignment"/> set to <see cref="F:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment.Right"/> 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AxisAreaTop">
            <summary>
            Gets the Top AxisArea, which contains the Axes which have <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AxisAlignment"/> set to <see cref="F:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment.Top"/> 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.AxisAreaLeft">
            <summary>
            Gets the Left AxisArea, which contains the Axes which have <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.AxisAlignment"/> set to <see cref="F:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment.Left"/> 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.CenterXAxisArea">
            <summary>
            Gets the center AxisArea which contains XAxes with <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.IsCenterAxis"/> flag equals to true
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.CenterYAxisArea">
            <summary>
            Gets the center AxisArea which contains YAxes with <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxis.IsCenterAxis"/> flag equals to true
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.StackedColumnsWrapper">
            <summary>
            Gets <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.StackedColumnsWrapper"/> that allows user to customize drawing of <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedColumnRenderableSeries"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.StackedMountainsWrapper">
            <summary>
            Gets <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.StackedMountainsWrapper"/> that allows user to customize drawing of <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.StackedMountainRenderableSeries"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurface.#ctor(Ecng.Xaml.Charting.IServiceContainer)">
            <summary>
            Internal Ctor used for tests
            </summary>
            <param name="mockServices"></param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.RenderPriority">
            <summary>
            Enumeration constants to define the render priority for series rendering on the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderPriority.Immediate">
            <summary>
            Renders immediately on data update, as opposed to waiting for the CompositionTarget.Rendering event
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderPriority.Normal">
            <summary>
            Ultrachart renders whenever there is new data and the CompositionTarget.Rendering event has fired.
            This is the default option
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderPriority.Low">
            <summary>
            Ultrachart renders whenever there is new data and the CompositionTarget.Rendering event has fired, 
            but with a lower priority than input (mouse) events
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.RenderPriority.Manual">
            <summary>
            Never redraws automatically. You must manually call InvalidateElement() or ZoomExtents() on the UltrachartSurface in order to get it to redraw
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.ExportType">
            <summary>
            Provides values for exporting snapshot of <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to file.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.ExportType.Png">
            <summary>
            Export <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> in PNG format
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.ExportType.Jpeg">
            <summary>
            Export <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> in JPEG format
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.ExportType.Bmp">
            <summary>
            Export <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> in BMP format
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.IDrawable">
            <summary>
            Defines the base interface for an object that can be drawn
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IDrawable.Width">
            <summary>
            Gets or sets the width of the <see cref="T:Ecng.Xaml.Charting.Visuals.IDrawable"/> in pixels
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IDrawable.Height">
            <summary>
            Gets or sets the height of the <see cref="T:Ecng.Xaml.Charting.Visuals.IDrawable"/> in pixels
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IDrawable.OnDraw(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderPassData)">
            <summary>
            Called when the instance is drawn
            </summary>
            <param name="renderContext">The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> used for drawing</param>
            <param name="renderPassData">Contains arguments and parameters for this render pass</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.IUltrachartSurfaceBase">
            <summary>
            Common base interface for <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase"/> derived classes
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurfaceBase.IsVisible">
            <summary>
            Gets whether the UltrachartSurface is currently visible
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurfaceBase.DebugWhyDoesntUltrachartRender">
            <summary>
            Gets or sets a flag whether Ultrachart should output rendering exceptions and 'Why Ultrachart Doesn't Render' reasons to the Debug Console. 
            Default is True. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurfaceBase.Services">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/> which provides access to services throughout Ultrachart. 
            ServiceContainers are created one per <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurfaceBase.SyncRoot">
            <summary>
            A synchronization object which is locked during a render pass. If you lock this Ultrachart will not render and will be blocked on the UI thread until the lock is released. 
            
            This is used internally by DataSeries to lock the UltrachartSurface when bulk updates are done. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurfaceBase.ChartTitle">
            <summary>
            Gets or sets an optional Chart Title, displayed above the chart surface
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurfaceBase.ClipModifierSurface">
            <summary>
            Gets or sets a value whether to clip the ChartModifierSurface property to bounds. Fefault false
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurfaceBase.ModifierSurface">
            <summary>
            Gets the ModifierSurface, which is used to draw primitives for the Chart Modifiers
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurfaceBase.RenderPriority">
            <summary>
            Gets or sets the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderPriority"/>. The default is <see cref="F:Ecng.Xaml.Charting.Visuals.RenderPriority.Normal"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUltrachartSurfaceBase.RenderSurface">
            <summary>
            Gets or sets the RenderSurface implementation that this <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase"/> uses. Default implementation for a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            is a <see cref="T:Ecng.Xaml.Charting.Rendering.HighSpeedRasterizer.HighSpeedRenderSurface"/>, however Ultrachart supports 
            additional render surfaces, providing high quality software and high speed hardware accelerated or 3D renderers. 
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.IUltrachartSurfaceBase.Rendered">
            <summary>
            Event raised at the end of a single render pass
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartSurfaceBase.OnUltrachartRendered">
            <summary>
            Raises the <see cref="E:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.Rendered"/> event, fired at the end of a render pass immediately before presentation to the screen 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.IUltrachartSurfaceBase.SetMouseCursor(System.Windows.Input.Cursor)">
            <summary>
            Sets a Cursor on the UltrachartSurface
            </summary>
            <param name="cursor">The new Cursor</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase">
            <summary>
            An abstract base class containing shared code between different implementations of <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.ClipModifierSurfaceProperty">
            <summary>Defines the ClipModifierSurface DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.ChartTitleProperty">
            <summary>Defines the ChartTitle DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.RenderSurfaceProperty">
            <summary>Defines the RenderSurface DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.MaxFrameRateProperty">
            <summary>Defines the MaxFrameRate DependencyProperty</summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.Rendered">
            <summary>
            Event raised at the end of a single render pass
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase"/> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.DebugWhyDoesntUltrachartRender">
            <summary>
            Gets or sets a flag whether Ultrachart should output rendering exceptions and 'Why Ultrachart Doesn't Render' reasons to the Debug Console. 
            Default is True. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.MaxFrameRate">
            <summary>
            Gets or sets the Maximum Framerate of this UltrachartSurface in Hertz (Frames per Second). Default is 100.0
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.Services">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/> which provides access to services throughout Ultrachart. 
            ServiceContainers are created one per <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.IsDisposed">
            <summary>
            True if the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase"/> has been disposed. If so do not draw!
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.IsUltrachartSurfaceLoaded">
            <summary>
            True if the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase"/> has been Loaded
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.SyncRoot">
            <summary>
            A synchronization object which is locked during a render pass. If you lock this Ultrachart will not render and will be blocked on the UI thread until the lock is released. 
            
            This is used internally by DataSeries to lock the UltrachartSurface when bulk updates are done. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.ChartTitle">
            <summary>
            Gets or sets an optional Chart Title, displayed above the chart surface
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.ClipModifierSurface">
            <summary>
            Gets or sets a value whether to clip the ChartModifierSurface property to bounds. Fefault false
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.ModifierSurface">
            <summary>
            Gets the ModifierSurface, which is used to draw primitives for the Chart Modifiers
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.RenderPriority">
            <summary>
            Gets or sets the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderPriority"/>. The default is <see cref="F:Ecng.Xaml.Charting.Visuals.RenderPriority.Normal"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.RenderSurface">
            <summary>
            Gets or sets the RenderSurface implementation that this <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase"/> uses. Default implementation for a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            is a <see cref="T:Ecng.Xaml.Charting.Rendering.HighSpeedRasterizer.HighSpeedRenderSurface"/>, however Ultrachart supports 
            additional render surfaces, providing high quality software and high speed hardware accelerated or 3D renderers. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.RootGrid">
            <summary>
            Gets the Root Grid that hosts the Ultrachart RenderSurface, GridLinesPanel, X-Axis and Y-Axes (Left and right)
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.OnLoad">
            <summary>
            Forces initialization of the UltrachartSurface in the case it is being used to render off-screen (on server)
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>
            The disposable Update Suspender
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.ResumeUpdates(Ecng.Xaml.Charting.Visuals.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by IUpdateSuspender
            </summary>
            <param name="suspender"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.InvalidateElement">
            <summary>
            Asynchronously requests that the element redraws itself plus children.
            Will be ignored if the element is ISuspendable and currently IsSuspended (within a SuspendUpdates/ResumeUpdates call)
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.OnUltrachartRendered">
            <summary>
            Raises the <see cref="E:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.Rendered"/> event, fired at the end of a render pass immediately before presentation to the screen 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.SetMouseCursor(System.Windows.Input.Cursor)">
            <summary>
            Sets a Cursor on the UltrachartSurface
            </summary>
            <param name="cursor">The new Cursor</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.OnInvalidateUltrachartSurface(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls InvalidateElement on the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase"/>, should be used as the callback for Dependency Properties in <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> that should trigger a redraw
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.GetAndAssertTemplateChild``1(System.String)">
            <summary>
            Gets the TemplateChild by the specified name and casts to type <typeparamref name="T" />, asserting that the result is not null
            </summary>
            <typeparam name="T">The Type of the templated part</typeparam>
            <param name="childName">Name of the templated part.</param>
            <returns>The template part instance</returns>
            <exception cref="T:System.InvalidOperationException">Unable to Apply the Control Template. Child is missing or of the wrong type</exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.OnUltrachartSurfaceUnloaded">
            <summary>
            Called when the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase"/> is Unloaded and removed from the visual tree. Perform cleanup operations here
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.OnUltrachartSurfaceLoaded">
            <summary>
            Called when the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase"/> is loaded. Perform initialization operations here. 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.OnUltrachartSurfaceSizeChanged">
            <summary>
            Called when the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase"/> Size changes. Perform render surface resize or redraw operations here
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.OnDataContextChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase" /> DataContext changes.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.OnRenderSurfaceDependencyPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called with the <see cref="F:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.RenderSurfaceProperty" /> changes.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.RegisterServices(Ecng.Xaml.Charting.IServiceContainer)">
            <summary>
            Called in the constructor of <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase" />, gives derived classes the opportunity to register services per <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase" /> instance
            </summary>
            <param name="serviceContainer">The service container instance.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltrachartSurfaceBase.DoDrawingLoop">
            <summary>
            The inner drawing loop. Called once per frame. Do your drawing here. 
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.UltraThumb">
            <summary>
            Custom simple commom Thumb implementation
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Visuals.UltraThumb.UltraDragDelta">
            <summary>
            Occurs one or more times as the mouse changes position when a <see cref="T:Ecng.Xaml.Charting.Visuals.UltraThumb"/> control has mouse capture. 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Visuals.UltraThumb.#ctor">
            <summary>
            Default constructor initialize <see cref="T:Ecng.Xaml.Charting.Visuals.UltraThumb"/>
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Visuals.IUpdateSuspender">
            <summary>
            Defines the interface to an <see cref="T:Ecng.Xaml.Charting.Visuals.UpdateSuspender"/>, a disposable class which allows nested suspend/resume operations on an <see cref="T:Ecng.Xaml.Charting.Visuals.ISuspendable"/> target
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUpdateSuspender.IsSuspended">
            <summary>
            Gets a value indicating whether updates for this instance are currently suspended
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUpdateSuspender.ResumeTargetOnDispose">
            <summary>
            Gets or sets a value indicating whether the target will resume when the IUpdateSuspender is disposed. Default is True
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Visuals.IUpdateSuspender.Tag">
            <summary>
            Gets or sets an associated Tab for this <see cref="T:Ecng.Xaml.Charting.Visuals.IUpdateSuspender"/> instance
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.DrawEventArgs">
            <summary>
            EventArgs raised when the <see cref="!:IRenderSurface2D.Draw"/> event is raised, which occurs at the start of the render pass
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.HighQualityRasterizer.HighQualityRenderSurface"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.HighSpeedRasterizer.HighSpeedRenderSurface"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.DrawEventArgs.#ctor(Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.DrawEventArgs" /> class.
            </summary>
            <param name="renderSurface">The render surface.</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.DrawEventArgs.RenderSurface2D">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/> instance which raised the Draw event
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D">
            <summary>
            Defines the interface to a 2D Brush used to paint fills on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.IBrush2D.AlphaBlend">
            <summary>
            Gets whether fills painted with this brush should be alpha blended or not
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.IPathColor">
            <summary>
            A base interface for <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D"/> and <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D"/>. Used by the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext"/> to draw fills and lines
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.IPathColor.Color">
            <summary>
            Gets the color of the pen. Supports transparency
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.IPathColor.ColorCode">
            <summary>
            Used internally by the renderer, gets the integer color-code that represents the Pen color
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.IPathColor.IsTransparent">
            <summary>
            Gets a value indicating whether this pen is transparent.
            </summary>
            <value>
            <c>true</c> if this instance is transparent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.IPathContextFactory">
            <summary>
            Creates <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext"/> instances, e.g. to draw lines, points, polygon outlines depending on the final implementation. 
            
            The <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> which has method BeginLine to draw lines, but other types such as <see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.IPointMarker"/> implement <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathContextFactory"/>
            implement it to draw point-markers
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IPathContextFactory.Begin(Ecng.Xaml.Charting.Rendering.Common.IPathColor,System.Double,System.Double)">
            <summary>
            Begins drawing at the specified X,Y pixel coordinate, with the specified color
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext">
            <summary>
            Returns an <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext"/> to draw a polyline, or collection of PointMarkers 
            </summary>
            <example>
            <code>
            var lineContext = renderContext.BeginLine(pen, 0, 0);
            lineContext.LineTo(1, 2);
            lineContext.LineTo(3, 4);
            lineContext.Dispose();
            </code>
            </example>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext.Begin(Ecng.Xaml.Charting.Rendering.Common.IPathColor,System.Double,System.Double)">
            <summary>
            Starts the context at the specified X,Y coordinate with a specified Pen
            </summary>
            <param name="color">The pen or brush for the drawing operation</param>
            <param name="x">The x-coordinate in pixels</param>
            <param name="y">The y-coordinate in pixels</param>
            <returns>The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext"/> instance, to allow fluent API</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext.MoveTo(System.Double,System.Double)">
            <summary>
            Moves the Context to the specified X,Y coordinate. 
            </summary>
            <param name="x">The x-coordinate in pixels</param>
            <param name="y">The y-coordinate in pixels</param>
            <returns>The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext"/> instance, to allow fluent API</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext.End">
            <summary>
            Ends the segment, flushing to render target
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.ISprite2D">
            <summary>
            Defines the interface to a 2D Sprite, a small fixed-size bitmap which is rendered repeatedly to the viewport
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase"/>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.ISprite2D.Width">
            <summary>
            Gets the width of the Spite in pixels
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.ISprite2D.Height">
            <summary>
            Gets the height of the Sprite in pixels
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D">
            <summary>
            Defines the interface to a 2D pen, used to draw lines on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.IPen2D.StrokeThickness">
            <summary>
            Gets the stroke thickness
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.IPen2D.Antialiased">
            <summary>
            Gets if antialiasing should be used
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.IPen2D.StrokeEndLineCap">
            <summary>
            Gets a value that describes a shape at the end of line
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.IDashSplittingContext">
            <summary>
            Defines interface to context of splitting line into dashes
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.IDashSplittingContext.StrokeDashArray">
            <summary>
            Optional array with lengths of dash pattern items
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.IDashSplittingContext.StrokeDashArrayIndex">
            <summary>
            Current index in StrokeDashArray
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.IDashSplittingContext.StrokeDashArrayItemPassedLength">
            <summary>
            Already passed length of current item in StrokeDashArray
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D">
            <summary>
            Defines the interface to a 2D RenderContext, allowing drawing, blitting and creation of pens and brushes on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>
            </summary>
            <remarks>The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> is a graphics context valid for the current render pass. Any class which implements <see cref="T:Ecng.Xaml.Charting.Visuals.IDrawable"/> has an OnDraw method
            in which an <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> is passed in. Use this to draw penned lines, fills, rectangles, ellipses and blit graphics to the screen.</remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.Layers">
            <summary>
            Gets a collection of <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderOperationLayers"/>, which allow rendering operations to be posted to a layered queue for later
            execution in order (and correct Z-ordering). 
            </summary>
            <example>
            	<code title="RenderOperationLayers Example" description="Demonstrates how to enqueue operations to the RenderOperationLayers collection and later flush to ensure rendering operations get processed in the correct Z-order" lang="C#">
            RenderOperationLayers layers = renderContext.Layers;
             
            // Enqueue some operations in the layers in any order
            layers[RenderLayer.AxisMajorGridlines].Enqueue(() =&gt; renderContext.DrawLine(/* .. */));
            layers[RenderLayer.AxisBands].Enqueue(() =&gt; renderContext.DrawRectangle(/* .. */));
            layers[RenderLayer.AxisMinorGridlines].Enqueue(() =&gt; renderContext.DrawLine(/* .. */));
             
            // Processes all layers by executing enqueued operations in order of adding, 
            // and in Z-order of layers
            layers.Flush();</code>
            </example>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.ViewportSize">
            <summary>
            Gets the current size of the viewport.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.SetPrimitvesCachingEnabled(System.Boolean)">
            <summary>
            enables/disables primitves chaching optimization ( Direct3D renderer only )
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.CreateBrush(System.Windows.Media.Color,System.Double,System.Nullable{System.Boolean})">
            <summary>
            Creates a <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D"/> valid for the current render pass. Use this to draw rectangles, polygons and shaded areas 
            </summary>
            <param name="color">The color of the brush, supports transparency</param>
            <param name="opacity">The opacity of the brush</param>
            <param name="alphaBlend">If true, use alphablending when shading. If null, auto-detect</param>
            <returns>The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D"/> instance</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.CreateBrush(System.Windows.Media.Brush,System.Double,Ecng.Xaml.Charting.Rendering.Common.TextureMappingMode)">
            <summary>
            Creates a <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D"/> from WPF Brush valid for the current render pass. Use this to draw rectangles, polygons and shaded areas 
            </summary>
            <param name="brush">The WPF Brush to use as a source, e.g. this can be a <seealso cref="T:System.Windows.Media.SolidColorBrush"/>, or it can be a <seealso cref="T:System.Windows.Media.LinearGradientBrush"/>. Note that solid colors support transparency and are faster than gradient brushes</param>
            <param name="opacity">The opacity of the brush</param>
            <param name="textureMappingMode">Defines a <see cref="T:Ecng.Xaml.Charting.Rendering.Common.TextureMappingMode"/>, e.g. brushes share a texture per viewport or a new texture per primitive drawn</param>
            <returns>The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D"/> instance</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.CreatePen(System.Windows.Media.Color,System.Boolean,System.Single,System.Double,System.Double[],System.Windows.Media.PenLineCap)">
            <summary>
            Creates a <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D"/> valid for the current render pass. Use this to draw outlines, quads and lines
            </summary>
            <param name="color">The color of the pen, supports transparency</param>
            <param name="antiAliasing">If true, use antialiasing</param>
            <param name="strokeThickness">The strokethickness, default=1.0</param>
            <param name="opacity">The opecity of the pen</param>
            <param name="strokeDashArray"> </param>
            <param name="strokeEndLineCap"> </param>
            <returns>The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D"/> instance</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.CreateSprite(System.Windows.FrameworkElement)">
            <summary>
            Creates a Sprite from FrameworkElement by rendering to bitmap. This may be used in the <see cref="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.DrawSprite(Ecng.Xaml.Charting.Rendering.Common.ISprite2D,System.Windows.Rect,System.Windows.Point)"/> method
            to draw to the screen repeatedly
            </summary>
            <param name="fe"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.Clear">
            <summary>
            Clears the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.DrawSprite(Ecng.Xaml.Charting.Rendering.Common.ISprite2D,System.Windows.Rect,System.Windows.Point)">
            <summary>
            Blits the source image onto the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/>
            </summary>
            <param name="srcSprite">The source sprite to render</param>
            <param name="srcRect">The source rectangle</param>
            <param name="destPoint">The destination point, which will be the top-left coordinate of the sprite after blitting</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.DrawSprites(Ecng.Xaml.Charting.Rendering.Common.ISprite2D,System.Windows.Rect,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Batch draw of the source sprite onto the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/>
            </summary>
            <param name="sprite2D">The sprite to render</param>
            <param name="srcRect">The source rectangle</param>
            <param name="points">The points to draw sprites at</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.DrawSprites(Ecng.Xaml.Charting.Rendering.Common.ISprite2D,System.Collections.Generic.IEnumerable{System.Windows.Rect})">
            <summary>
            Batch draw of the source sprite onto the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/>
            </summary>
            <param name="sprite2D">The sprite to render</param>
            <param name="dstRects">The destination rectangles to draw sprites at</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.FillRectangle(Ecng.Xaml.Charting.Rendering.Common.IBrush2D,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Fills a rectangle on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/> using the specified <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D"/>
            </summary>
            <param name="brush">The brush</param>
            <param name="pt2">The top-left point of the rectangle</param>
            <param name="pt1">The bottom-right point of the rectangle</param>
            <param name="gradientRotationAngle">The angle which the brush is rotated by, default is zero</param>        
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.FillPolygon(Ecng.Xaml.Charting.Rendering.Common.IBrush2D,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Fills a polygon on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/> using the specifie <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D"/>
            </summary>
            <param name="brush">The brush</param>
            <param name="points">The list of points defining the closed polygon, where X,Y coordinates in clockwise direction</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.FillArea(Ecng.Xaml.Charting.Rendering.Common.IBrush2D,System.Collections.Generic.IEnumerable{System.Tuple{System.Windows.Point,System.Windows.Point}},System.Boolean,System.Double)">
            <summary>
            Fills an area defined the the Points and Heights, e.g. as in a mountain chart, using the specifie <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D"/>
            </summary>
            <param name="brush">The brush</param>
            <param name="lines"></param>
            <param name="isVerticalChart">Value, indicates whether chart is vertical</param>
            <param name="gradientRotationAngle">The angle which the brush is rotated by</param>
            <param name="liness"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.DrawQuad(Ecng.Xaml.Charting.Rendering.Common.IPen2D,System.Windows.Point,System.Windows.Point)">
            <summary>
            Draws a Quad on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/> using the specified <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D"/>
            </summary>
            <param name="pen">The Pen</param>
            <param name="pt1">Left-top point in the quad</param>
            <param name="pt2">Bottom-right point in the quad</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.DrawEllipse(Ecng.Xaml.Charting.Rendering.Common.IPen2D,Ecng.Xaml.Charting.Rendering.Common.IBrush2D,System.Windows.Point,System.Double,System.Double)">
            <summary>
            Draws an Ellipse on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/> using the specified outline <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D">Pen</see> and fill <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D">Brush</see>
            </summary>
            <param name="strokePen">The stroke pen</param>
            <param name="fillBrush">The fill brush</param>
            <param name="center">The center of the ellipse in pixels</param>
            <param name="width">The width of the ellipse in pixels</param>
            <param name="height">The height of the ellipse in pixels</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.DrawEllipses(Ecng.Xaml.Charting.Rendering.Common.IPen2D,Ecng.Xaml.Charting.Rendering.Common.IBrush2D,System.Collections.Generic.IEnumerable{System.Windows.Point},System.Double,System.Double)">
            <summary>
            Draws 0..N Ellipses at the points passed in with the same width, height, pen and brush
            </summary>
            <param name="strokePen"></param>
            <param name="fillBrush"></param>
            <param name="centres">The points to draw ellipses at</param>
            <param name="width">The common width for all ellipses</param>
            <param name="height">The common height for all ellipses</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.DrawLine(Ecng.Xaml.Charting.Rendering.Common.IPen2D,System.Windows.Point,System.Windows.Point)">
            <summary>
            Draws a single line on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/> using the specified <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D"/>. 
            Note for a faster implementation in some rasterizers, use DrawLines passing in an IEnumerable
            </summary>
            <param name="pen">The pen</param>
            <param name="pt1">The start of the line in pixels</param>
            <param name="pt2">The end of the line in pixels</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.DrawLines(Ecng.Xaml.Charting.Rendering.Common.IPen2D,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Draws a multi-point line on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/> using the specified <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D"/>
            </summary>
            <param name="pen">The pen</param>
            <param name="points">The points </param>
            <returns>The last point in the polyline drawn</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.DisposeResourceAfterDraw(System.IDisposable)">
            <summary>
            Call this method, passing in <see cref="T:System.IDisposable"/> instance to dispose after the render pass completes. 
            Called internally by Ultrachart to lazy-dispose of Direct2D and Direct3D brushes and textures
            </summary>
            <param name="disposable"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.DrawPixelsVertically(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Int32},System.Double,System.Boolean)">
            <summary>
            Draws vertical scan line for heatmap
            from bottom to top, from yStart to yEnd
            </summary>
            <param name="x">Screen X coordinate where to draw pixels</param>
            <param name="yStartBottom">Screen Y coordinate of vertical scan line's bottom.
            Can be located outdide of visible area, in this case not all pixels in list are rendered</param>
            <param name="yEndTop">Screen Y coordinate of vertical scan line's top.
            Can be located outdide of visible area, in this case not all pixels in list are rendered</param>
            <param name="pixelColorsArgb">The list of pixel colors to draw</param>
            <param name="opacity">The Opacity of the line from 0.0 to 1.0</param>
            <param name="yAxisIsFlipped">if set to <c>true</c> then y axis is flipped.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.TextDrawDimensions(System.String,System.Single,System.Windows.Media.Color,System.Single@,System.Single@,System.String,System.Windows.FontWeight)">
            <summary>
            Calculate space needed to draw text
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.DigitMaxSize(System.Single,System.String,System.Windows.FontWeight)">
            <summary>
            max digit size in pixels
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.DrawText(System.String,System.Windows.Rect,System.Windows.Media.AlignmentX,System.Windows.Media.AlignmentY,System.Windows.Media.Color,System.Single,System.String,System.Windows.FontWeight)">
            <summary>
            Draws text if it does not go outside 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.DrawText(System.String,System.Windows.Point,System.Windows.Media.AlignmentX,System.Windows.Media.AlignmentY,System.Windows.Media.Color,System.Single,System.String,System.Windows.FontWeight)">
            <summary>
            Draws text relative to base point 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.BeginLine(Ecng.Xaml.Charting.Rendering.Common.IPen2D,System.Double,System.Double)">
            <summary>
            Begins a Polyline segment, returning the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext"/>. This is the fastest way to draw lines and simply a proxy to <see cref="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.DrawLines(Ecng.Xaml.Charting.Rendering.Common.IPen2D,System.Collections.Generic.IEnumerable{System.Windows.Point})"/> method. 
            </summary>
            <param name="pen">The pen for the line segment</param>
            <param name="startX">The start X coordinate (pixel coord)</param>
            <param name="startY">The start Y coordinate (pixel coord)</param>
            <returns>The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext"/> to continue the line</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.BeginPolygon(Ecng.Xaml.Charting.Rendering.Common.IBrush2D,System.Double,System.Double,System.Double)">
            <summary>
            Begins a filled Polygon segment, returning the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext"/>. This is the fastest way to draw polygon and simply a proxy to <see cref="M:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D.FillArea(Ecng.Xaml.Charting.Rendering.Common.IBrush2D,System.Collections.Generic.IEnumerable{System.Tuple{System.Windows.Point,System.Windows.Point}},System.Boolean,System.Double)"/> method. 
            </summary>
            <param name="brush">The brush for the polygon fill</param>
            <param name="startX">The start X coordinate (pixel coord)</param>
            <param name="startY">The start Y coordinate (pixel coord)</param>
            <param name="gradientRotationAngle">The angle which the <param name="brush"></param> is rotated by</param>
            <returns>The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext"/> to continue the polygon</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.TextureMappingMode">
            <summary>
            Defines enumeration constants to describe how textures are mapped. 
            If textures are mapped <see cref="F:Ecng.Xaml.Charting.Rendering.Common.TextureMappingMode.PerScreen"/>, then a single
            large texture is shared for all elements that use this texture. Else, if <see cref="F:Ecng.Xaml.Charting.Rendering.Common.TextureMappingMode.PerPrimitive"/>
            then individual primitives have separate textures. 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Rendering.Common.TextureMappingMode.PerScreen">
            <summary>
            with this mode texture coordinates equal to screen coordinates
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Rendering.Common.TextureMappingMode.PerPrimitive">
            <summary>
            with this mode entire texture is fit into single primitive
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface">
            <summary>
            Common interface for a RenderSurface, <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface.Draw">
            <summary>
            Raised each time the render surface is to be drawn. Handle this event to paint to the surface
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface.Rendered">
            <summary>
            Raised immediately after a render operation has completed
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface.NeedsResizing">
            <summary>
            Returns True if the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> size has changed and the viewport needs resizing
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface.IsSizeValidForDrawing">
            <summary>
            Returns true if the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> size is valid for drawing
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface.Style">
            <summary>
            Gets or sets a <see cref="P:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface.Style"/> to apply to the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface.Services">
            <summary>
            Gets or sets the <see cref="T:Ecng.Xaml.Charting.IServiceContainer"/> instance
            </summary>
            <value>The services.</value>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface.ClearSeries">
            <summary>
            Clears all <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface.Clear">
            <summary>
            Clears the viewport
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface.RecreateSurface">
            <summary>
            Recreates the elements required by the Viewport, called once at startup and when the surface is resized
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D">
            <summary>
            Defines the interface to a RenderSurface, which is a viewport used within the <seealso cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to 
            render <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> types in a fast manner. The renderer architecture is plugin based, meaning we have
            build multiple implementations of <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>. 
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.HighQualityRasterizer.HighQualityRenderSurface"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.HighSpeedRasterizer.HighSpeedRenderSurface"/>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D.ChildSeries">
            <summary>
            Gets the child RenderableSeries in this <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/> instance
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D.GetRenderContext">
            <summary>
            Creates an <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> instance to perform drawing operations. Note this is only valid for the current render pass
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D.ContainsSeries(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries)">
            <summary>
            Returns True if the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> contains the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> instance
            </summary>
            <param name="renderableSeries">the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> instance</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D.AddSeries(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries)">
            <summary>
            Adds the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> instance to the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/>
            </summary>
            <param name="renderableSeries"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D.AddSeries(System.Collections.Generic.IEnumerable{Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries})">
            <summary>
            Adds the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> instance to the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/>
            </summary>
            <param name="renderableSeries"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D.RemoveSeries(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries)">
            <summary>
            Removes the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> from the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/>
            </summary>
            <param name="renderableSeries"></param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.NullRenderContext">
            <summary>
            Defines a <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> that does nothing, used to prevent charts drawing where the RenderSurface implemenation is unlicensed.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase">
            <summary>
            Defines the base class for <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/> implementors, allowing drawing, blitting and creation of pens and brushes on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.Layers">
            <summary>
            Gets a collection of <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderOperationLayer"/> layers, which allow rendering operations to be posted to a layered queue for later
            execution in order (and correct Z-ordering). 
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderLayer"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderOperationLayer"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"></seealso>
            <example>
            	<code title="RenderOperationLayers Example" description="Demonstrates how to enqueue operations to the RenderOperationLayers collection and later flush to ensure rendering operations get processed in the correct Z-order" lang="C#">
            RenderOperationLayers layers = renderContext.Layers;
             
            // Enqueue some operations in the layers in any order
            layers[RenderLayer.AxisMajorGridlines].Enqueue(() =&gt; renderContext.DrawLine(/* .. */));
            layers[RenderLayer.AxisBands].Enqueue(() =&gt; renderContext.DrawRectangle(/* .. */));
            layers[RenderLayer.AxisMinorGridlines].Enqueue(() =&gt; renderContext.DrawLine(/* .. */));
             
            // Processes all layers by executing enqueued operations in order of adding, 
            // and in Z-order of layers
            layers.Flush();</code>
            </example>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.ViewportSize">
            <summary>
            Gets the size of the current viewport for this render operation
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.SetPrimitvesCachingEnabled(System.Boolean)">
            <summary>
            enables/disables primitves chaching optimization ( Direct3D renderer only )
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.CreateBrush(System.Windows.Media.Color,System.Double,System.Nullable{System.Boolean})">
            <summary>
            Creates a <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D" /> valid for the current render pass. Use this to draw rectangles, polygons and shaded areas
            </summary>
            <param name="color">The color of the brush, supports transparency</param>
            <param name="opacity">The opacity of the brush</param>
            <param name="alphaBlend">If true, use alphablending when shading. If null, auto-detect from the Color</param>
            <returns>
            The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D" /> instance
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.CreateBrush(System.Windows.Media.Brush,System.Double,Ecng.Xaml.Charting.Rendering.Common.TextureMappingMode)">
            <summary>
            Creates a <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D" /> from WPF Brush valid for the current render pass. Use this to draw rectangles, polygons and shaded areas
            </summary>
            <param name="brush">The WPF Brush to use as a source, e.g. this can be a <seealso cref="T:System.Windows.Media.SolidColorBrush" />, or it can be a <seealso cref="T:System.Windows.Media.LinearGradientBrush" />. Note that solid colors support transparency and are faster than gradient brushes</param>
            <param name="opacity">The opacity of the brush</param>
            <param name="textureMappingMode"></param>
            <returns>
            The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D" /> instance
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.CreatePen(System.Windows.Media.Color,System.Boolean,System.Single,System.Double,System.Double[],System.Windows.Media.PenLineCap)">
            <summary>
            Creates a <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D" /> valid for the current render pass. Use this to draw outlines, quads and lines
            </summary>
            <param name="color">The color of the pen, supports transparency</param>
            <param name="antiAliasing">If true, use antialiasing</param>
            <param name="strokeThickness">The strokethickness, default=1.0</param>
            <param name="opacity">The opecity of the pen</param>
            <param name="strokeDashArray"></param>
            <param name="strokeEndLineCap"></param>
            <returns>
            The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D" /> instance
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.CreateSprite(System.Windows.FrameworkElement)">
            <summary>
            Creates a Sprite from FrameworkElement by rendering to bitmap. This may be used in the <see cref="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.DrawSprite(Ecng.Xaml.Charting.Rendering.Common.ISprite2D,System.Windows.Rect,System.Windows.Point)" /> method
            to draw to the screen repeatedly
            </summary>
            <param name="fe"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.Clear">
            <summary>
            Clears the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D" />
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.DrawSprite(Ecng.Xaml.Charting.Rendering.Common.ISprite2D,System.Windows.Rect,System.Windows.Point)">
            <summary>
            Blits the source image onto the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D" />
            </summary>
            <param name="srcSprite">The source sprite to render</param>
            <param name="srcRect">The source rectangle</param>
            <param name="destPoint">The destination point, which will be the top-left coordinate of the sprite after blitting</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.DrawSprites(Ecng.Xaml.Charting.Rendering.Common.ISprite2D,System.Windows.Rect,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Batch draw of the source sprite onto the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D" />
            </summary>
            <param name="sprite2D">The sprite to render</param>
            <param name="srcRect">The source rectangle</param>
            <param name="points">The points to draw sprites at</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.DrawSprites(Ecng.Xaml.Charting.Rendering.Common.ISprite2D,System.Collections.Generic.IEnumerable{System.Windows.Rect})">
            <summary>
            Batch draw of the source sprite onto the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D" />
            </summary>
            <param name="sprite2D">The sprite to render</param>
            <param name="dstRects">The destination rectangles to draw sprites at</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.FillRectangle(Ecng.Xaml.Charting.Rendering.Common.IBrush2D,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Fills a rectangle on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D" /> using the specified <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D" />
            </summary>
            <param name="brush">The brush</param>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="gradientRotationAngle">The angle which the brush is rotated by</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.FillArea(Ecng.Xaml.Charting.Rendering.Common.IBrush2D,System.Collections.Generic.IEnumerable{System.Tuple{System.Windows.Point,System.Windows.Point}},System.Boolean,System.Double)">
            <summary>
            Fills an area, limited by two line segments, e.g. as in a stacked mountain chart, using the specified <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D" />
            </summary>
            <param name="brush">The brush</param>
            <param name="lines">The list of lines representing polygon segments</param>
            <param name="isVerticalChart">Value, indicates whether chart is vertical</param>
            <param name="gradientRotationAngle">The angle which the brush is rotated by</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.DrawEllipse(Ecng.Xaml.Charting.Rendering.Common.IPen2D,Ecng.Xaml.Charting.Rendering.Common.IBrush2D,System.Windows.Point,System.Double,System.Double)">
            <summary>
            Draws an Ellipse on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D" /> using the specified outline <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D">Pen</see> and fill <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D">Brush</see>
            </summary>
            <param name="strokePen">The stroke pen</param>
            <param name="fillBrush">The fill brush</param>
            <param name="center">The center of the ellipse in pixels</param>
            <param name="width">The width of the ellipse in pixels</param>
            <param name="height">The height of the ellipse in pixels</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.DrawEllipses(Ecng.Xaml.Charting.Rendering.Common.IPen2D,Ecng.Xaml.Charting.Rendering.Common.IBrush2D,System.Collections.Generic.IEnumerable{System.Windows.Point},System.Double,System.Double)">
            <summary>
            Draws 0..N Ellipses at the points passed in with the same width, height, pen and brush
            </summary>
            <param name="strokePen"></param>
            <param name="fillBrush"></param>
            <param name="centres">The points to draw ellipses at</param>
            <param name="width">The common width for all ellipses</param>
            <param name="height">The common height for all ellipses</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.DisposeResourceAfterDraw(System.IDisposable)">
            <summary>
            Call this method, passing in <see cref="T:System.IDisposable" /> instance to dispose after the render pass completes.
            Called internally by Ultrachart to lazy-dispose of Direct2D and Direct3D brushes and textures
            </summary>
            <param name="disposable"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.DrawPixelsVertically(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Int32},System.Double,System.Boolean)">
            <summary>
            Draws vertical scan line for heatmap
            from bottom to top, from yStart to yEnd
            </summary>
            <param name="x">Screen X coordinate where to draw pixels</param>
            <param name="yStartBottom">Screen Y coordinate of vertical scan line's bottom.
            Can be located outdide of visible area, in this case not all pixels in list are rendered</param>
            <param name="yEndTop">Screen Y coordinate of vertical scan line's top.
            Can be located outdide of visible area, in this case not all pixels in list are rendered</param>
            <param name="pixelColorsArgb">The colors to apply to the vertical scanline</param>
            <param name="opacity">The opacity of the vertical scaline, from 0.0 to 1.0</param>
            <param name="yAxisIsFlipped">if set to <c>true</c> then y axis is flipped.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.DrawQuad(Ecng.Xaml.Charting.Rendering.Common.IPen2D,System.Windows.Point,System.Windows.Point)">
            <summary>
            Draws a Quad on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D" /> using the specified <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D" />
            </summary>
            <param name="pen">The Pen</param>
            <param name="pt1"></param>
            <param name="pt2"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.DrawLine(Ecng.Xaml.Charting.Rendering.Common.IPen2D,System.Windows.Point,System.Windows.Point)">
            <summary>
            Draws a single line on the 
            <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D" /> using the specified 
            <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D" />.
            Note for a faster implementation in some rasterizers, use DrawLines
            </summary>
            <param name="pen">The pen</param>
            <param name="pt1">The start of the line in pixels</param>
            <param name="pt2">The end of the line in pixels</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.DrawLines(Ecng.Xaml.Charting.Rendering.Common.IPen2D,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Draws a multi-point line on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D" /> using the specified <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D" />
            </summary>
            <param name="pen">The pen</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.FillPolygon(Ecng.Xaml.Charting.Rendering.Common.IBrush2D,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Fills a polygon on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D" /> using the specifie <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IBrush2D" />
            </summary>
            <param name="brush">The brush</param>
            <param name="points">The list of points defining the closed polygon, where X,Y coordinates in clockwise direction</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.DrawText(System.String,System.Windows.Rect,System.Windows.Media.AlignmentX,System.Windows.Media.AlignmentY,System.Windows.Media.Color,System.Single,System.String,System.Windows.FontWeight)">
            <summary>
            Draws text if it does not go outside
            </summary>
            <param name="dstBoundingRect"></param>
            <param name="alignY"></param>
            <param name="foreColor"></param>
            <param name="fontSize"></param>
            <param name="text"></param>
            <param name="fontFamily"></param>
            <param name="fontWeight"></param>
            <param name="alignX"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.DrawText(System.String,System.Windows.Point,System.Windows.Media.AlignmentX,System.Windows.Media.AlignmentY,System.Windows.Media.Color,System.Single,System.String,System.Windows.FontWeight)">
            <summary>
            Draws text relative to base point 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.BeginLine(Ecng.Xaml.Charting.Rendering.Common.IPen2D,System.Double,System.Double)">
            <summary>
            Begins a Polyline segment, returning the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext" />. This is the fastest way to draw lines and simply a proxy to <see cref="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.DrawLines(Ecng.Xaml.Charting.Rendering.Common.IPen2D,System.Collections.Generic.IEnumerable{System.Windows.Point})" /> method.
            </summary>
            <param name="pen">The pen for the line segment</param>
            <param name="startX">The start X coordinate (pixel coord)</param>
            <param name="startY">The start Y coordinate (pixel coord)</param>
            <returns>
            The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext" /> to continue the line
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.BeginPolygon(Ecng.Xaml.Charting.Rendering.Common.IBrush2D,System.Double,System.Double,System.Double)">
            <summary>
            Begins a filled Polygon segment, returning the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext" />. This is the fastest way to draw polygon and simply a proxy to <see cref="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.FillArea(Ecng.Xaml.Charting.Rendering.Common.IBrush2D,System.Collections.Generic.IEnumerable{System.Tuple{System.Windows.Point,System.Windows.Point}},System.Boolean,System.Double)" /> method.
            </summary>
            <param name="brush">The brush for the polygon fill</param>
            <param name="startX">The start X coordinate (pixel coord)</param>
            <param name="startY">The start Y coordinate (pixel coord)</param>
            <param name="gradientRotationAngle">The angle which the <param name="brush"></param> is rotated by</param>
            <returns>
            The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext" /> to continue the polygon
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.ClipLine(System.Windows.Point@,System.Windows.Point@,System.Windows.Size)">
            <returns>false if line is outside of visible area</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.ClipZeroLineForArea(System.Double,System.Boolean)">
            <summary>
            Used internally: Clips the zero line (e.g. in mountain fills) to the viewport
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.ClipArea(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Used internally to clip a polygon or line-segment to the viewport
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.IsInBounds(System.Windows.Point)">
            <summary>
            Returns true if the point is inside the viewport
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderContextBase.ClipArea(System.Collections.Generic.IEnumerable{System.Tuple{System.Windows.Point,System.Windows.Point}})">
            <summary>
            Used internally to clip the area of a StackedMountainSeries to the viewport
            </summary>
            <param name="lines">Collection of lines, which represent bounds of a polygon segment</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.RenderedEventArgs">
            <summary>
            Event args used when the <see cref="!:IRenderSurface2D.Rendered"/> event is raised
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.HighQualityRasterizer.HighQualityRenderSurface"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.HighSpeedRasterizer.HighSpeedRenderSurface"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderedEventArgs.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderedEventArgs" /> class.
            </summary>
            <param name="duration">The duration of the last render operation in milliseconds</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.RenderedEventArgs.Duration">
            <summary>
            Gets the duration of the last render operation in milliseconds
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.RenderOperationLayer">
            <summary>
            Stores a queue of <see cref="T:System.Action"/> operations to perform, intended to be used to queue rendering operations and re-arrange Z-order
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderLayer"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderOperationLayer"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>
            <example>
            	<code title="RenderOperationLayers Example" description="Demonstrates how to enqueue operations to the RenderOperationLayers collection and later flush to ensure rendering operations get processed in the correct Z-order" lang="C#">
            RenderOperationLayers layers = renderContext.Layers;
             
            // Enqueue some operations in the layers in any order
            layers[RenderLayer.AxisMajorGridlines].Enqueue(() =&gt; renderContext.DrawLine(/* .. */));
            layers[RenderLayer.AxisBands].Enqueue(() =&gt; renderContext.DrawRectangle(/* .. */));
            layers[RenderLayer.AxisMinorGridlines].Enqueue(() =&gt; renderContext.DrawLine(/* .. */));
             
            // Processes all layers by executing enqueued operations in order of adding, 
            // and in Z-order of layers
            layers.Flush();</code>
            </example>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderOperationLayer.Enqueue(System.Action)">
            <summary>
            Enqueues an operation to the layer
            </summary>
            <param name="operation">The operation to queue</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderOperationLayer.Flush">
            <summary>
            Flushes, the layer, which processes all operations and clears the queue
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.RenderLayer">
            <summary>
            Enumeration Constants to define the layers in <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderOperationLayers"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Rendering.Common.RenderLayer.AxisBands">
            <summary>
            The Axis Bands render layer, Z-order = 0
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Rendering.Common.RenderLayer.AxisMinorGridlines">
            <summary>
            The Axis Minor Gridlines render layer, Z-order = 1
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Rendering.Common.RenderLayer.AxisMajorGridlines">
            <summary>
            The Axis Major Gridlines render layer, Z-order = 2
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Rendering.Common.RenderLayer.RenderableSeries">
            <summary>
            The RenderableSeries render layer, Z-order = 3
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.RenderOperationLayers">
            <summary>
            A collection of <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderOperationLayer"/> layers, which allow rendering operations to be posted to a layered queue for later
            execution in order (and correct Z-ordering). 
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderLayer"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderOperationLayer"></seealso>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"></seealso>
            <example>
            	<code title="RenderOperationLayers Example" description="Demonstrates how to enqueue operations to the RenderOperationLayers collection and later flush to ensure rendering operations get processed in the correct Z-order" lang="C#">
            RenderOperationLayers layers = renderContext.Layers;
             
            // Enqueue some operations in the layers in any order
            layers[RenderLayer.AxisMajorGridlines].Enqueue(() =&gt; renderContext.DrawLine(/* .. */));
            layers[RenderLayer.AxisBands].Enqueue(() =&gt; renderContext.DrawRectangle(/* .. */));
            layers[RenderLayer.AxisMinorGridlines].Enqueue(() =&gt; renderContext.DrawLine(/* .. */));
             
            // Processes all layers by executing enqueued operations in order of adding, 
            // and in Z-order of layers
            layers.Flush();</code>
            </example>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.RenderOperationLayers.Item(Ecng.Xaml.Charting.Rendering.Common.RenderLayer)">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderOperationLayer" /> with the specified <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderLayer"/>.
            </summary>
            <value>
            The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderOperationLayer" />.
            </value>
            <param name="layer">The layer to get.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderOperationLayers.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderOperationLayers.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderOperationLayers.Flush">
            <summary>
            Flushes the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderOperationLayer"/> collection, processing and executing all render operations according to the
            Z-order defined by the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderLayer"/> enumeration
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase">
            <summary>
            An abstract base class for the RenderSurface, which is a viewport used within the <seealso cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> to 
            render <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/> types in a fast manner. The renderer architecture is plugin based, meaning we have
            build multiple implementations of <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>. 
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D"/>
            <seealso cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.HighQualityRasterizer.HighQualityRenderSurface"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.HighSpeedRasterizer.HighSpeedRenderSurface"/>
        </member>
        <member name="F:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.MaxFrameRateProperty">
            <summary>
            Defines the MaxFrameRate DependencyProperty 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.UseResizeThrottleProperty">
            <summary>
            Defines the UseResizeThrottle DependencyProperty 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.ResizeThrottleMsProperty">
            <summary>
            Defines the ResizeThrottleMs DependencyProperty 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.RenderSurfaceTypeProperty">
            <summary>
            Defines the RenderSurfaceType attached property
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.SetRenderSurfaceType(System.Windows.UIElement,System.String)">
            <summary>
            Sets the RenderSurfaceType attached property
            </summary>
            <param name="element">The element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.GetRenderSurfaceType(System.Windows.UIElement)">
            <summary>
            Gets the RenderSurfaceType attached property
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="E:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.Draw">
            <summary>
            Raised each time the render surface is to be drawn. Handle this event to paint to the surface
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.Rendered">
            <summary>
            Raised immediately after a render operation has completed
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase" /> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.Services">
            <summary>
            Gets or sets the <see cref="T:Ecng.Xaml.Charting.IServiceContainer"/> instance
            </summary>
            <value>The services.</value>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.Grid">
            <summary>
            Gets the root element <see cref="P:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.Grid"/> which hosts components in the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.MaxFrameRate">
            <summary>
            Gets or sets the Maximum Framerate of this RenderSurface. By default this is bound to the parent UltrachartSurface.MaxFrameRate 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.ResizeThrottleMs">
            <summary>
            Gets or sets a timeout for resizing, e.g. 100ms means that the RenderSurface will batch up all Resize events received within a 100ms window. This reduces the CPU usage on resize. Also see <see cref="P:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.UseResizeThrottle"/> dependency property, which must be true
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.UseResizeThrottle">
            <summary>
            If true, uses the <see cref="P:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.ResizeThrottleMs"/> value to batch up Resize Events received within a certain time window, reducing the CPU load on resize
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.NeedsResizing">
            <summary>
            Returns True if the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> size has changed and the viewport needs resizing
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.IsSizeValidForDrawing">
            <summary>
            Returns true if the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> size is valid for drawing
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.ChildSeries">
            <summary>
            Gets the child RenderableSeries in this <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D" /> instance
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.InvalidateElement">
            <summary>
            Invalidates the RenderSurface, causing a repaint to occur
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.Clear">
            <summary>
            Clears the viewport
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.ContainsSeries(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries)">
            <summary>
            Returns True if the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> contains the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> instance
            </summary>
            <param name="renderableSeries">the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> instance</param>
            <returns><c>true</c> if the specified renderable series contains series; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.AddSeries(System.Collections.Generic.IEnumerable{Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries})">
            <summary>
            Adds the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries" /> instance to the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderSurface2D" />
            </summary>
            <param name="renderableSeries"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.AddSeries(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries)">
            <summary>
            Adds the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> instance to the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>
            </summary>
            <param name="renderableSeries">The renderable series.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.RemoveSeries(Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries)">
            <summary>
            Removes the <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> from the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>
            </summary>
            <param name="renderableSeries">The renderable series.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.ClearSeries">
            <summary>
            Clears all <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/> on the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.RecreateSurface">
            <summary>
            Recreates the elements required by the Viewport, called once at startup and when the surface is resized
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.PublishResizedMessage(System.Int32,System.Int32)">
            <summary>
            Publishes <see cref="T:Ecng.Xaml.Charting.Common.Messaging.RenderSurfaceResizedMessage"/> with actual viewport size
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.GetRenderContext">
            <summary>
            When overridden in a derived class, returns a RenderContext valid for the current render pass
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.DisposeUnmanagedResources">
            <summary>
            Derived classes may override this method to be notified when to dispose of unmanaged resources. Called when the
            <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> is disposed
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.OnRenderTimeElapsed">
            <summary>
            Called when the <see cref="E:System.Windows.Media.CompositionTarget.Rendering" /> event is raised
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.OnDraw">
            <summary>
            Raises the <see cref="!:IRenderSurface2D.Draw">Draw</see> event which preceeds the render operation
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.OnRendered(System.Double)">
            <summary>
            Raises the Rendered event with the specified duration
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.OnRenderSurfaceBaseLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase" /> is loaded into the visual tree 
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.OnRenderSurfaceBaseUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase" /> is Unloaded from the visual tree
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.TranslatePoint(System.Windows.Point,Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Translates the point relative to the other <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /> element
            </summary>
            <param name="point">The input point relative to this <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /></param>
            <param name="relativeTo">The other <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /> to use when transforming the point</param>
            <returns>
            The transformed Point
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /> element
            </summary>
            <param name="point">The point to test</param>
            <returns>
            true if the Point is within the bounds
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase.GetBoundsRelativeTo(Ecng.Xaml.Charting.Visuals.IHitTestable)">
            <summary>
            Gets the bounds of the current <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /> element relative to another <see cref="T:Ecng.Xaml.Charting.Visuals.IHitTestable" /> element
            </summary>
            <param name="relativeTo"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.HighQualityRasterizer.HqRenderContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.HighQualityRasterizer.HqRenderContext.BeginLine(Ecng.Xaml.Charting.Rendering.Common.IPen2D,System.Double,System.Double)">
            <summary>
            Begins a Polyline segment, returning the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext" />. This is the fastest way to draw lines and simply a proxy to <see cref="!:DrawLines" /> method.
            </summary>
            <param name="pen">The pen for the line segment</param>
            <param name="startX">The start X coordinate (pixel coord)</param>
            <param name="startY">The start Y coordinate (pixel coord)</param>
            <returns>
            The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext" /> to continue the line
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.HighQualityRasterizer.HqRenderContext.BeginPolygon(Ecng.Xaml.Charting.Rendering.Common.IBrush2D,System.Double,System.Double,System.Double)">
            <summary>
            Begins a filled Polygon segment, returning the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext" />. This is the fastest way to draw polygon and simply a proxy to <see cref="M:Ecng.Xaml.Charting.Rendering.HighQualityRasterizer.HqRenderContext.FillArea(Ecng.Xaml.Charting.Rendering.Common.IBrush2D,System.Collections.Generic.IEnumerable{System.Tuple{System.Windows.Point,System.Windows.Point}},System.Boolean,System.Double)" /> method.
            </summary>
            <param name="brush">The brush for the polygon fill</param>
            <param name="startX">The start X coordinate (pixel coord)</param>
            <param name="startY">The start Y coordinate (pixel coord)</param>
            <returns>
            The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext" /> to continue the polygon
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.HighQualityRasterizer.HighQualityRenderSurface">
            <summary>
            Provides a <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> implementation that uses a High-Quality software rasterizer, capable of rendering with sub-pixel accuracy. 
            The downside is, the <see cref="T:Ecng.Xaml.Charting.Rendering.HighQualityRasterizer.HighQualityRenderSurface"/> uses a more accurate floating-point math rendering engine which is slower than the <see cref="T:Ecng.Xaml.Charting.Rendering.HighSpeedRasterizer.HighSpeedRenderSurface"/> counterpart
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.HighSpeedRasterizer.HighSpeedRenderSurface"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.HighQualityRasterizer.HighQualityRenderSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Rendering.HighQualityRasterizer.HighQualityRenderSurface"/> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.HighQualityRasterizer.HighQualityRenderSurface.RecreateSurface">
            <summary>
            Recreates the WriteableBitmap used by the Viewport
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.HighQualityRasterizer.HighQualityRenderSurface.GetRenderContext">
            <summary>
            When overridden in a derived class, returns a RenderContext valid for the current render pass
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.TextureCache">
            <summary>
            The TextureCache is used by the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> to cache frequently used textures. Textures are used by 
            <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastMountainRenderableSeries"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastColumnRenderableSeries"/> where <see cref="T:System.Windows.Media.LinearGradientBrush"/> is used and <see cref="T:Ecng.Xaml.Charting.Visuals.PointMarkers.SpritePointMarker"/>
            
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.CharSpriteKey">
            <summary>
            identifies cached rendered character
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Rendering.HighSpeedRasterizer.HighSpeedRenderSurface">
            <summary>
            Provides a <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> implementation that uses a High-Speed software rasterizer, capable of outputting many millions of points (line-series) 
            at interactive framerates. The downside is, the <see cref="T:Ecng.Xaml.Charting.Rendering.HighSpeedRasterizer.HighSpeedRenderSurface"/> uses integer fixed-point math which results in jagged lines. 
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.HighQualityRasterizer.HighQualityRenderSurface"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/>
            <seealso cref="T:Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.HighSpeedRasterizer.HighSpeedRenderSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Rendering.HighSpeedRasterizer.HighSpeedRenderSurface"/> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.HighSpeedRasterizer.HighSpeedRenderSurface.GetRenderContext">
            <summary>
            When overridden in a derived class, returns a RenderContext valid for the current render pass
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.HighSpeedRasterizer.HsRenderContext.BeginLine(Ecng.Xaml.Charting.Rendering.Common.IPen2D,System.Double,System.Double)">
            <summary>
            Begins a Polyline segment, returning the <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext" />. This is the fastest way to draw lines and simply a proxy to <see cref="!:DrawLines" /> method.
            </summary>
            <param name="pen">The pen for the line segment</param>
            <param name="startX">The start X coordinate (pixel coord)</param>
            <param name="startY">The start Y coordinate (pixel coord)</param>
            <returns>
            The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext" /> to continue the line
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.HighSpeedRasterizer.HsRenderContext.BeginPolygon(Ecng.Xaml.Charting.Rendering.Common.IBrush2D,System.Double,System.Double,System.Double)">
            <summary>
            Begins a filled Polygon segment, returning the <see cref="!:IFillDrawingContext" />. This is the fastest way to draw polygon and simply a proxy to <see cref="M:Ecng.Xaml.Charting.Rendering.HighSpeedRasterizer.HsRenderContext.FillArea(Ecng.Xaml.Charting.Rendering.Common.IBrush2D,System.Collections.Generic.IEnumerable{System.Tuple{System.Windows.Point,System.Windows.Point}},System.Boolean,System.Double)" /> method.
            </summary>
            <param name="brush">The brush for the polygon fill</param>
            <param name="startX">The start X coordinate (pixel coord)</param>
            <param name="startY">The start Y coordinate (pixel coord)</param>
            /// <param name="gradientRotationAngle">The angle which the <param name="brush"></param> is rotated by</param>
            <returns>
            The <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPathDrawingContext" /> to continue the polygon
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.TextureBrush.GetIntTexture(System.Windows.Size)">
            <returns>int32 array for WriteableBitmap renderer</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.TextureBrush.GetByteTexture(System.Windows.Size)">
            <returns>BGRA byte array for AggSharp renderer</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Rendering.TextureBrush.GetIntOffsetNotConsideringMappingMode(System.Int32,System.Int32,System.Double)">
            <summary>
            Used for the mountain area filling.
            </summary>
            <param name="screenX"></param>
            <param name="screenY"></param>
            <param name="gradiendRotationAngle"></param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Services.RendererErrorCode">
            <summary>
            Error code returned by the Renderer in 2D or 3D
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Services.RendererErrorCode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Services.RendererErrorCode"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.StrategyManager.IAnnotationPlacementStrategy">
            <summary>
            Defines the interface for methods which allows to place annotation
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.StrategyManager.IAnnotationPlacementStrategy.PlaceAnnotation(Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates)">
            <summary>
            Places annotation with specific annotation coordinates
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.StrategyManager.IAnnotationPlacementStrategy.GetBasePoints(Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates)">
            <summary>
            Gets base points for annotation instance
            </summary>
            <param name="coordinates"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.StrategyManager.IAnnotationPlacementStrategy.SetBasePoint(System.Windows.Point,System.Int32)">
            <summary>
            Sets base point for annotation
            </summary>
            <param name="newPoint"></param>
            <param name="index"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.StrategyManager.IAnnotationPlacementStrategy.IsInBounds(Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates,Ecng.Xaml.Charting.Visuals.Annotations.IAnnotationCanvas)">
            <summary>
            Checks whether coordinates are within canvas bounds
            </summary>
            <param name="coordinates"></param>
            <param name="annotationCanvas"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.StrategyManager.IAnnotationPlacementStrategy.MoveAnnotationTo(Ecng.Xaml.Charting.Visuals.Annotations.AnnotationCoordinates,System.Double,System.Double,Ecng.Xaml.Charting.Visuals.Annotations.IAnnotationCanvas)">
            <summary>
             Moves the annotation to a specific horizontal and vertical offset
            </summary>
            <param name="coordinates"></param>
            <param name="horizontalOffset"></param>
            <param name="verticalOffset"></param>
            <param name="annotationCanvas"></param>
        </member>
        <member name="T:Ecng.Xaml.Charting.StrategyManager.ITransformationStrategy">
            <summary>
            Defines interface for pixel transformation strategy
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.StrategyManager.ITransformationStrategy.Transform(System.Windows.Point)">
            <summary>
            Peform transform of point according to current strategy
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.StrategyManager.ITransformationStrategy.ReverseTransform(System.Windows.Point)">
            <summary>
            Perform reverse transform of point according to current strategy
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="P:Ecng.Xaml.Charting.StrategyManager.ITransformationStrategy.ViewportSize">
            <summary>
            Current viewport size
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.StrategyManager.IStrategyManager">
            <summary>
            Provides access to different strategies for polar/cartesian chart
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.StrategyManager.IStrategyManager.GetTransformationStrategy">
            <summary>
            Gets current transformation strategy
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Themes.RadialPanel">
            <summary>
            The RadialPanel provdes panel which rotates its children with specified angle relative to center of panel
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.RadialPanel.AngleProperty">
            <summary>
            Defines the Angle AttachedProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.RadialPanel.IsHorizontalProperty">
            <summary>
            Defines the IsHorizontal AttachedProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.RadialPanel.OriginPointProperty">
            <summary>
            Defines the OriginPoint AttachedProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.RadialPanel.GetAngle(System.Windows.UIElement)">
            <summary>
            Gets the value of the Angle attached property for a specified UIElement.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.RadialPanel.SetAngle(System.Windows.UIElement,System.Double)">
            <summary>
            Sets the value of the Angle attached property for a specified UIElement.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.RadialPanel.SetOriginPoint(System.Windows.UIElement,System.Windows.Point)">
            <summary>
            Sets the value of the OriginPoint attached property for a specified UIElement.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.RadialPanel.GetOriginPoint(System.Windows.UIElement)">
            <summary>
            Gets the value of the OriginPoint attached property for a specified UIElement.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.RadialPanel.SetIsHorizontal(System.Windows.UIElement,System.Boolean)">
            <summary>
            Sets the value of the IsHorizontal attached property for a specified UIElement.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.RadialPanel.GetIsHorizontal(System.Windows.UIElement)">
            <summary>
            Gets the value of the IsHorizontal attached property for a specified UIElement.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Themes.AxisCanvas">
            <summary>
            The AxisCanvas provides an auto-sizing canvas for the axis labels
            </summary>
            <remarks>
            Under MS-PL from http://themechanicalbride.blogspot.com/2008/11/auto-sizing-canvas-for-silverlight-and.html.
            </remarks>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisCanvas.ClipToBoundsProperty">
            <summary>
            Identifies the SizeWidthToContent dependency property.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisCanvas.SizeWidthToContentProperty">
            <summary>
            Identifies the SizeWidthToContent dependency property.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisCanvas.SizeHeightToContentProperty">
            <summary>
            Identifies the SizeHeightToContent dependency property.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisCanvas.LeftProperty">
            <summary>
            Identifies the Left dependency property.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisCanvas.RightProperty">
            <summary>
            Identifies the Right dependency property.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisCanvas.TopProperty">
            <summary>
            Identifies the Top dependency property.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisCanvas.BottomProperty">
            <summary>
            Identifies the Bottom dependency property.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisCanvas.CenterLeftProperty">
            <summary>
            Identifies the CenterLeft dependency property.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisCanvas.CenterRightProperty">
            <summary>
            Identifies the CenterRight dependency property.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisCanvas.CenterTopProperty">
            <summary>
            Identifies the CenterTop dependency property.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisCanvas.CenterBottomProperty">
            <summary>
            Identifies the CenterBottom dependency property.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.GetLeft(System.Windows.UIElement)">
            <summary>
            Gets the value of the Left attached property for a specified UIElement.
            </summary>
            <param name="element">The UIElement from which the property value is read.</param>
            <returns>The Left property value for the UIElement.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.SetLeft(System.Windows.UIElement,System.Double)">
            <summary>
            Sets the value of the Left attached property to a specified UIElement.
            </summary>
            <param name="element">The UIElement to which the attached property is written.</param>
            <param name="value">The needed Left value.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.GetRight(System.Windows.UIElement)">
            <summary>
            Gets the value of the Right attached property for a specified UIElement.
            </summary>
            <param name="element">The UIElement from which the property value is read.</param>
            <returns>The Right property value for the UIElement.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.SetRight(System.Windows.UIElement,System.Double)">
            <summary>
            Sets the value of the Right attached property to a specified UIElement.
            </summary>
            <param name="element">The UIElement to which the attached property is written.</param>
            <param name="value">The needed Right value.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.GetTop(System.Windows.UIElement)">
            <summary>
            Gets the value of the Top attached property for a specified UIElement.
            </summary>
            <param name="element">The UIElement from which the property value is read.</param>
            <returns>The Top property value for the UIElement.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.SetTop(System.Windows.UIElement,System.Double)">
            <summary>
            Sets the value of the Top attached property to a specified UIElement.
            </summary>
            <param name="element">The UIElement to which the attached property is written.</param>
            <param name="value">The needed Top value.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.GetBottom(System.Windows.UIElement)">
            <summary>
            Gets the value of the Bottom attached property for a specified UIElement.
            </summary>
            <param name="element">The UIElement from which the property value is read.</param>
            <returns>The Bottom property value for the UIElement.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.SetBottom(System.Windows.UIElement,System.Double)">
            <summary>
            Sets the value of the Bottom attached property to a specified UIElement.
            </summary>
            <param name="element">The UIElement to which the attached property is written.</param>
            <param name="value">The needed Bottom value.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.GetCenterLeft(System.Windows.UIElement)">
            <summary>
            Gets the value of the CenterLeft attached property for a specified UIElement.
            </summary>
            <param name="element">The UIElement from which the property value is read.</param>
            <returns>The CenterLeft property value for the UIElement.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.SetCenterLeft(System.Windows.UIElement,System.Double)">
            <summary>
            Sets the value of the CenterLeft attached property to a specified UIElement.
            </summary>
            <param name="element">The UIElement to which the attached property is written.</param>
            <param name="value">The needed CenterLeft value.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.GetCenterRight(System.Windows.UIElement)">
            <summary>
            Gets the value of the CenterRight attached property for a specified UIElement.
            </summary>
            <param name="element">The UIElement from which the property value is read.</param>
            <returns>The CenterRight property value for the UIElement.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.SetCenterRight(System.Windows.UIElement,System.Double)">
            <summary>
            Sets the value of the CenterRight attached property to a specified UIElement.
            </summary>
            <param name="element">The UIElement to which the attached property is written.</param>
            <param name="value">The needed CenterRight value.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.GetCenterTop(System.Windows.UIElement)">
            <summary>
            Gets the value of the CenterTop attached property for a specified UIElement.
            </summary>
            <param name="element">The UIElement from which the property value is read.</param>
            <returns>The CenterTop property value for the UIElement.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.SetCenterTop(System.Windows.UIElement,System.Double)">
            <summary>
            Sets the value of the CenterTop attached property to a specified UIElement.
            </summary>
            <param name="element">The UIElement to which the attached property is written.</param>
            <param name="value">The needed CenterTop value.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.GetCenterBottom(System.Windows.UIElement)">
            <summary>
            Gets the value of the CenterBottom attached property for a specified UIElement.
            </summary>
            <param name="element">The UIElement from which the property value is read.</param>
            <returns>The CenterBottom property value for the UIElement.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.SetCenterBottom(System.Windows.UIElement,System.Double)">
            <summary>
            Sets the value of the CenterBottom attached property to a specified UIElement.
            </summary>
            <param name="element">The UIElement to which the attached property is written.</param>
            <param name="value">The needed CenterBottom value.</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.AxisCanvas.SizeWidthToContent">
            <summary>
            Gets or sets a value indicating whether the dynamic canvas should
            size its width to its content.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.AxisCanvas.SizeHeightToContent">
            <summary>
            Gets or sets a value indicating whether the canvas should size its
            height to its content.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.AxisCanvas.ClipToBounds">
            <summary>
            Gets or sets the value which indicates whether to clip the content of this element.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.GetLayoutClip(System.Windows.Size)">
            <summary>
            Returns a geometry for a clipping mask. The mask applies if the layout system attempts to arrange an element that is larger than the available display space.
            </summary>
            <param name="layoutSlotSize">The size of the part of the element that does visual presentation.</param>
            <returns>
            The clipping geometry.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.Invalidate">
            <summary>
            Invalidates the position of child elements.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures all the children and returns their size.
            </summary>
            <param name="constraint">The available size.</param>
            <returns>The desired size.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges all children in the correct position.
            </summary>
            <param name="arrangeSize">The size to arrange element's within.
            </param>
            <returns>The size that element's were arranged in.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.GetArrangedRect(System.Windows.Size,System.Windows.UIElement)">
            <summary>
            Get arranged rectangle of element
            </summary>
            <param name="arrangeSize">The size to arrange element within</param>
            <param name="element">The element which need to be arranged</param>
            <returns>Arranged Rect of element</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.AdjustArrangedRectPosition(System.Windows.Rect,System.Windows.Size)">
            <summary>
            Adjust position of element before arranging
            </summary>
            <param name="arrangedRect">Rect of current element</param>
            <param name="arrangeSize">The size to arrange element within</param>
            <returns></returns>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.AxisCanvas.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>
            The disposable Update Suspender
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisCanvas.ResumeUpdates(Ecng.Xaml.Charting.Visuals.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by IUpdateSuspender
            </summary>
            <param name="suspender"></param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Themes.IAxisPanel">
            <summary>
            Provides drawing capabilities for labels and ticks on an Axis within Ultrachart
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.IAxisPanel.ClearLabels">
            <summary>
            Removes all the labels from an axis.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.IAxisPanel.Invalidate">
            <summary>
            Forces the layout pass on this panel.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.IAxisPanel.DrawTicks(Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates,System.Single)">
            <summary>
            Draws ticks on an axis at the given coordinates.
            </summary>
            <param name="tickCoords"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.IAxisPanel.AddTickLabels(System.Action{Ecng.Xaml.Charting.Themes.AxisCanvas})">
            <summary>
            Draws labels on an axis using 
            </summary>
            <param name="addOnCanvas"></param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Themes.AxisPanel">
            <summary>
            A panel providing a Bitmap and Labels Canvas for use on Axis within Ultrachart
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisPanel.DrawLabelsProperty">
            <summary>
            The draw labels property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisPanel.DrawMinorTicksProperty">
            <summary>
            The draw minor ticks property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisPanel.DrawMajorTicksProperty">
            <summary>
            The draw major ticks property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisPanel.MajorTickLineStyleProperty">
            <summary>
            The major tick line style property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisPanel.MinorTickLineStyleProperty">
            <summary>
            The minor tick line style property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisPanel.AxisAlignmentProperty">
            <summary>
            The axis alignment property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisPanel.AxisLabelToTickIndentProperty">
            <summary>
            The AxisLabelToTickIndent property
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.AxisPanel.IsLabelCullingEnabledProperty">
            <summary>
            The IsLabelCullingEnabled DependencyProperty
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Themes.AxisPanel.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.AxisPanel.IsLabelCullingEnabled">
            <summary>
            Gets or sets a value indicating whether Label Culling is enabled (when labels overlap) on this AxisPanel instance
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.AxisPanel.AxisAlignment">
            <summary>
            Gets or sets the axis alignment.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.AxisPanel.MajorTickLineStyle">
            <summary>
            Gets or sets the major tick line style.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.AxisPanel.MinorTickLineStyle">
            <summary>
            Gets or sets the minor tick line style.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.AxisPanel.DrawMajorTicks">
            <summary>
            Gets or sets a value indicating whether this panel draws Major ticks
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.AxisPanel.DrawMinorTicks">
            <summary>
            Gets or sets a value indicating whether this panel draws Minor ticks
            </summary>        
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.AxisPanel.DrawLabels">
            <summary>
            Gets or sets a value indicating whether this panel draws labels
            </summary>        
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.AxisPanel.IsHorizontalAxis">
            <summary>
            Gets a value indicating whether this pabel is horizontal axis.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.AxisPanel.LabelToTickIndent">
            <summary>
            Gets the label to tick indent.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.AxisPanel.MajorTickSize">
            <summary>
            Gets the size of a major tick.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.AxisPanel.MinorTickSize">
            <summary>
            Gets the size of a minor tick.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.AxisPanel.AddLabels">
            <summary>
            Used internally. Specifies a method which is used to fill the panel with tick labels.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Performs the measure pass on AxisPanel.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Performs the arrange pass on AxisPanel.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisPanel.AddTickLabels(System.Action{Ecng.Xaml.Charting.Themes.AxisCanvas})">
            <summary>
            Draws the tick labels.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisPanel.DrawTicks(Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates,System.Single)">
            <summary>
            Draws ticks on axis
            </summary>
            <param name="tickCoords"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisPanel.GetRenderContextSize">
            <summary>
            Gets size of image for ticks drawing
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisPanel.DrawTicks(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,System.Windows.Style,System.Double,System.Single[],System.Single)">
            <summary>
            Draws ticks on axis bitmap
            </summary>
            <param name="renderContext"></param>
            <param name="tickStyle"></param>
            <param name="tickSize"></param>
            <param name="tickCoords"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisPanel.DrawTick(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,Ecng.Xaml.Charting.Rendering.Common.IPen2D,System.Single,System.Single,System.Double)">
            <summary>
            Draws a single tick on the axis, using the specified pen (TargetType <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D" />), <see cref="T:Ecng.Xaml.Charting.XyDirection" /> and integer coordinate.
            </summary>
            <param name="renderContext">The canvas to draw on.</param>
            <param name="tickPen">The pen (TargetType <see cref="T:Ecng.Xaml.Charting.Rendering.Common.IPen2D" />) to apply to the tick line</param>
            <param name="coord">The integer coordinate to draw at. If direction is <see cref="F:Ecng.Xaml.Charting.XyDirection.XDirection" />, the coodinate is an X-coordinate, else it is a Y-coordinate</param>
            <param name="offset"></param>
            <param name="tickSize">The size of the tick</param>
            <remarks>
            If direction is <see cref="F:Ecng.Xaml.Charting.XyDirection.XDirection" />, the coodinate is an X-coordinate, else it is a Y-coordinate
            </remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisPanel.ClearLabels">
            <summary>
            Clears the <see cref="T:Ecng.Xaml.Charting.Themes.AxisPanel"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisPanel.OnPropertyChanged(System.String)">
            <summary>
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.AxisPanel.MeasureTickSize(System.Windows.Style)">
            <summary>
            Measures the size required to draw tick marks on the axis
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Themes.ModifierAxisCanvas">
            <summary>
            A canvas which overlays an axis and is used to place annotations, such as cursor labels and <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation"/>
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Themes.PolarAxisPanel">
            <summary>
            A panel providing a Bitmap and Labels Canvas for use on <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.PolarXAxis"/> within Ultrachart
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.PolarAxisPanel.DrawTicks(Ecng.Xaml.Charting.Numerics.TickCoordinateProviders.TickCoordinates,System.Single)">
            <summary>
            Draws ticks on axis
            </summary>
            <param name="tickCoords"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.PolarAxisPanel.DrawTicks(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D,System.Windows.Style,System.Double,System.Single[],System.Single)">
            <summary>
            Draws ticks on axis bitmap
            </summary>
            <param name="renderContext"></param>
            <param name="tickStyle"></param>
            <param name="tickSize"></param>
            <param name="tickCoords"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.PolarAxisPanel.GetRenderContextSize">
            <summary>
            Gets size of image for ticks drawing
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Themes.PolarPanel">
            <summary>
            The PolarPanel provides the panel which arranges items from center of panel to outer bounds
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.PolarPanel.StretchToSizeProperty">
            <summary>
            Defines the StretchToSize DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.PolarPanel.IsReversedOrderProperty">
            <summary>
            Defines the IsReversedOrder DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.PolarPanel.MinimimalItemSizeProperty">
            <summary>
            Defines the MinimalItemSize DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.PolarPanel.ShouldCopyThicknessToParentProperty">
            <summary>
            Defines the ShouldCopyThicknessToParent AttachedProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.PolarPanel.ThicknessProperty">
            <summary>
            Defines the Thicknes AttachedProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.PolarPanel.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Ecng.Xaml.Charting.Themes.PolarPanel"/> class
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.PolarPanel.StretchToSize">
            <summary>
            Gets or sets whether panel should stretch children to its size or not
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.PolarPanel.IsReversedOrder">
            <summary>
            Gets or sets whether panel should arrange child elements in reverse order
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.PolarPanel.MinimimalItemSize">
            <summary>
            Gets or sets minimal child size of panel
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.PolarPanel.SetThickness(System.Windows.UIElement,System.Double)">
            <summary>
            Sets the value of the Thickness attached property for a specified UIElement.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.PolarPanel.GetThickness(System.Windows.UIElement)">
            <summary>
            Gets the value of the Thickness attached property for a specified UIElement.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.PolarPanel.SetShouldCopyThicknessToParent(System.Windows.UIElement,System.Boolean)">
            <summary>
            Sets the value of the ShouldCopyThicknessToParent attached property for a specified UIElement.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.PolarPanel.GetShouldCopyThicknessToParent(System.Windows.UIElement)">
            <summary>
            Gets the value of the ShouldCopyThicknessToParent attached property for a specified UIElement.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Themes.TickLabelAxisCanvas">
            <summary>
            A canvas which overlays an axis and is used to place Tick Labels
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Themes.TickLabelAxisCanvas.IsLabelCullingEnabledProperty">
            <summary>Defines the IsLabelCullingEnabled DependendencyProperty</summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.TickLabelAxisCanvas.IsLabelCullingEnabled">
            <summary>
            Gets or sets whether Label Culling is enabled on this Axis Canvas
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.TickLabelAxisCanvas.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures all the children and returns their size.
            </summary>
            <param name="constraint">The available size.</param>
            <returns>The desired size.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.TickLabelAxisCanvas.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges all children in the correct position.
            </summary>
            <param name="arrangeSize">The size to arrange element's within.
            </param>
            <returns>The size that element's were arranged in.</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Themes.IThemeProvider">
            <summary>
            Defines the interface to a Ultrachart Theme, which provides Brushes and Colors for the XAML control templates.
            You may implement IThemeProvider yourself and pass to ThemeManager to set the global theme for all <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            controls.
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.ThemeManager"/>
            <seealso cref="T:Ecng.Xaml.Charting.Themes.ThemeColorProvider"/>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.GridBorderBrush">
            <summary>
            Gets or sets the brush used for Gridlines area border
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.GridBackgroundBrush">
            <summary>
            Gets or sets the background of the Gridlines area
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.UltrachartBackground">
            <summary>
            Gets or sets the background of the entire <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.TickTextBrush">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/> tick labels
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.MajorGridLinesBrush">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/> Major Grid lines. Expects a <see cref="T:System.Windows.Media.SolidColorBrush"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.MinorGridLinesBrush">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/> Minor Grid lines. Expects a <see cref="T:System.Windows.Media.SolidColorBrush"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.RolloverLineStroke">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier"/> vertical line
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.RolloverLabelBorderBrush">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier"/> label border
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.RolloverLabelBackgroundBrush">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier"/> label background
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.DefaultCandleUpWickColor">
            <summary>
            Gets or sets the default color for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.UpWickColor"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.DefaultCandleDownWickColor">
            <summary>
            Gets or sets the default color for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.DownWickColor"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.DefaultCandleUpBodyBrush">
            <summary>
            Gets or sets the default brush for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.UpBodyBrush"/>. 
            Accepts <see cref="T:System.Windows.Media.SolidColorBrush"/> and <see cref="T:System.Windows.Media.LinearGradientBrush"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.DefaultCandleDownBodyBrush">
            <summary>
            Gets or sets the default brush for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.DownBodyBrush"/>. 
            Accepts <see cref="T:System.Windows.Media.SolidColorBrush"/> and <see cref="T:System.Windows.Media.LinearGradientBrush"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.DefaultColumnOutlineColor">
            <summary>
            Gets or sets the default color for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SeriesColor"/>, which is used
            to style the column outline. 
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.DefaultColumnFillBrush">
            <summary>
            Gets or sets the default brush for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.FillBrush"/>. 
            Accepts <see cref="T:System.Windows.Media.SolidColorBrush"/> and <see cref="T:System.Windows.Media.LinearGradientBrush"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.DefaultLineSeriesColor">
            <summary>
            Gets or sets the default color for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SeriesColor"/>. 
            which is used to define the line color
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.DefaultMountainLineColor">
            <summary>
            Gets or sets the default color for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SeriesColor"/>. 
            which defines the mountain line color
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.DefaultDownBandFillColor">
            <summary>
            Gets or sets the default color for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.BandDownColor"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.DefaultUpBandFillColor">
            <summary>
            Gets or sets the default color for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.BandUpColor"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.DefaultUpBandLineColor">
            <summary>
            Gets or sets the default color for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SeriesColor"/>, 
            which defines the up band line color
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.DefaultDownBandLineColor">
            <summary>
            Gets or sets the default color for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.Series1Color"/>, 
            which defines the down band line color
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.DefaultMountainAreaBrush">
            <summary>
            Gets or sets the default brush for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseMountainRenderableSeries.AreaBrush"/>. 
            Accepts <seealso cref="T:System.Windows.Media.SolidColorBrush"/> and <seealso cref="T:System.Windows.Media.LinearGradientBrush"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.DefaultColorMapBrush">
            <summary>
            Gets or sets the default brush for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries.ColorMap"/>. 
            Accepts <seealso cref="T:System.Windows.Media.LinearGradientBrush"/>. Gradient Stops are used to compute colors of the final heat signature
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.CursorLabelForeground">
            <summary>
            Gets or sets the brush for the <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier"/> label text foreground
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.CursorLabelBackgroundBrush">
            <summary>
            Gets or sets the brush for the <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier"/> label background
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.CursorLabelBorderBrush">
            <summary>
            Gets or sets the brush for the <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier"/> label border
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.RubberBandFillBrush">
            <summary>
            Gets or sets the brush for the <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier"/> drag reticule fill
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.RubberBandStrokeBrush">
            <summary>
            Gets or sets the brush for the <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier"/> drag reticule border
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.CursorLineBrush">
            <summary>
            Gets or sets the brush for the <seealso cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier"/> line stroke
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.OverviewFillBrush">
            <summary>
            Gets or sets the brush (fill) for the <seealso cref="T:Ecng.Xaml.Charting.Visuals.UltrachartOverview"/> non-selected area
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.ScrollbarFillBrush">
            <summary>
            Gets or sets the brush (fill) for the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar"/> viewport area
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.LegendBackgroundBrush">
            <summary>
            Gets or sets the brush for the <seealso cref="T:Ecng.Xaml.Charting.Visuals.UltrachartLegend"/> background
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.DefaultTextAnnotationBackground">
            <summary>
            Gets or sets the default brush for the <seealso cref="T:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation"/> background
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.DefaultTextAnnotationForeground">
            <summary>
            Gets or sets the default brush for the <seealso cref="T:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation"/> text foreground
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.DefaultAxisMarkerAnnotationBackground">
            <summary>
            Gets or sets the default brush for the <seealso cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation"/> background
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.DefaultAxisMarkerAnnotationForeground">
            <summary>
            Gets or sets the default brush for the <seealso cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation"/> text-foreground
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.AxisBandsFill">
            <summary>
            Gets or sets the color for the <seealso cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/> axis bands fill
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.BoxVolumeTimeframe2Color">
            <summary>
            Gets or sets the color for the <seealso cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BoxVolumeRenderableSeries.Timeframe2Color"/>.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.BoxVolumeTimeframe2FrameColor">
            <summary>
            Gets or sets the color for the <seealso cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BoxVolumeRenderableSeries.Timeframe2FrameColor"/>.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.BoxVolumeTimeframe3Color">
            <summary>
            Gets or sets the color for the <seealso cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BoxVolumeRenderableSeries.Timeframe3Color"/>.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.BoxVolumeCellFontColor">
            <summary>
            Gets or sets the color for the <seealso cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BoxVolumeRenderableSeries.CellFontColor"/>.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.BoxVolumeHighVolColor">
            <summary>
            Gets or sets the color for the <seealso cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BoxVolumeRenderableSeries.HighVolColor"/>.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.ClusterProfileLineColor">
            <summary>
            Gets or sets the color for the <seealso cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.ClusterProfileRenderableSeries.LineColor"/>.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.ClusterProfileTextColor">
            <summary>
            Gets or sets the color for the <seealso cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.ClusterProfileRenderableSeries.TextColor"/>.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.ClusterProfileClusterColor">
            <summary>
            Gets or sets the color for the <seealso cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.ClusterProfileRenderableSeries.ClusterColor"/>.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.IThemeProvider.ClusterProfileClusterMaxColor">
            <summary>
            Gets or sets the color for the <seealso cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.ClusterProfileRenderableSeries.ClusterMaxColor"/>.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.IThemeProvider.ApplyTheme(Ecng.Xaml.Charting.Themes.IThemeProvider)">
            <summary>
            Applies a <see cref="T:Ecng.Xaml.Charting.Themes.IThemeProvider"/> instance to this instance, by overwriting all properties and raising 
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> where necessary
            </summary>
            <param name="newTheme">The new theme instance</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.IThemeProvider.ApplyTheme(System.Windows.ResourceDictionary)">
            <summary>
            Applies a <see cref="T:System.Windows.ResourceDictionary"/> to this <see cref="T:Ecng.Xaml.Charting.Themes.IThemeProvider"/> instance, by searching for the resources
            with the same keys (Names) as the property names in the <see cref="T:Ecng.Xaml.Charting.Themes.IThemeProvider"/> instance
            </summary>
            <param name="dictionary">The <seealso cref="T:System.Windows.ResourceDictionary"/> source</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Themes.ThemeColorProvider">
            <summary>
            Defines a Ultrachart Theme color provider, which provides Brushes and Colors for the XAML control templates.
            You may implement IThemeProvider yourself and pass to ThemeManager to set the global theme for all <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            controls.
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.ThemeManager"/>
            <seealso cref="T:Ecng.Xaml.Charting.Themes.ThemeColorProvider"/>
            <seealso cref="T:Ecng.Xaml.Charting.Themes.IThemeProvider"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.ThemeColorProvider.ApplyTheme(Ecng.Xaml.Charting.Themes.IThemeProvider)">
            <summary>
            Applies a <see cref="T:Ecng.Xaml.Charting.Themes.IThemeProvider" /> instance to this instance, by overwriting all properties and raising
            <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> where necessary
            </summary>
            <param name="newTheme">The new theme instance</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Themes.ThemeColorProvider.ApplyTheme(System.Windows.ResourceDictionary)">
            <summary>
            Applies a <see cref="T:System.Windows.ResourceDictionary" /> to this <see cref="T:Ecng.Xaml.Charting.Themes.IThemeProvider" /> instance, by searching for the resources
            with the same keys (Names) as the property names in the <see cref="T:Ecng.Xaml.Charting.Themes.IThemeProvider" /> instance
            </summary>
            <param name="dictionary">The <see cref="T:System.Windows.ResourceDictionary" /> source</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.GridBorderBrush">
            <summary>
            Gets or sets the brush used for Gridlines area border
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.GridBackgroundBrush">
            <summary>
            Gets or sets the background of the Gridlines area
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.UltrachartBackground">
            <summary>
            Gets or sets the background of the entire <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" />
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.TickTextBrush">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase" /> tick labels
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.MajorGridLinesBrush">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase" /> Major Grid lines. Expects a <see cref="T:System.Windows.Media.SolidColorBrush" />
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.MinorGridLinesBrush">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase" /> Minor Grid lines. Expects a <see cref="T:System.Windows.Media.SolidColorBrush" />
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.RolloverLineStroke">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier" /> vertical line
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.RolloverLabelBorderBrush">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier" /> label border
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.RolloverLabelBackgroundBrush">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RolloverModifier" /> label background
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.DefaultCandleUpWickColor">
            <summary>
            Gets or sets the default color for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.UpWickColor" />
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.DefaultCandleDownWickColor">
            <summary>
            Gets or sets the default color for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.DownWickColor" />
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.DefaultCandleUpBodyBrush">
            <summary>
            Gets or sets the default brush for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.UpBodyBrush" />.
            Accepts <see cref="T:System.Windows.Media.SolidColorBrush" /> and <see cref="T:System.Windows.Media.LinearGradientBrush" />
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.DefaultCandleDownBodyBrush">
            <summary>
            Gets or sets the default brush for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastCandlestickRenderableSeries.DownBodyBrush" />.
            Accepts <see cref="T:System.Windows.Media.SolidColorBrush" /> and <see cref="T:System.Windows.Media.LinearGradientBrush" />
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.DefaultColumnOutlineColor">
            <summary>
            Gets or sets the default color for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SeriesColor" />, which is used
            to style the column outline.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.DefaultColumnFillBrush">
            <summary>
            Gets or sets the default brush for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseColumnRenderableSeries.FillBrush" />.
            Accepts <see cref="T:System.Windows.Media.SolidColorBrush" /> and <see cref="T:System.Windows.Media.LinearGradientBrush" />
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.DefaultLineSeriesColor">
            <summary>
            Gets or sets the default color for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SeriesColor" />.
            which is used to define the line color
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.DefaultMountainLineColor">
            <summary>
            Gets or sets the default color for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SeriesColor" />.
            which defines the mountain line color
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.DefaultMountainAreaBrush">
            <summary>
            Gets or sets the default brush for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseMountainRenderableSeries.AreaBrush" />.
            Accepts <see cref="T:System.Windows.Media.SolidColorBrush" /> and <see cref="T:System.Windows.Media.LinearGradientBrush" />
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.DefaultColorMapBrush">
            <summary>
            Gets or sets the default brush for the 
            <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastHeatMapRenderableSeries.ColorMap" />. 
            Accepts 
            <seealso cref="T:System.Windows.Media.LinearGradientBrush" />. Gradient Stops are used to compute colors of the final heat signature
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.DefaultDownBandFillColor">
            <summary>
            Gets or sets the default color for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.BandDownColor" />
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.DefaultUpBandFillColor">
            <summary>
            Gets or sets the default color for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.BandUpColor" />
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.DefaultUpBandLineColor">
            <summary>
            Gets or sets the default color for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries.SeriesColor" />,
            which defines the up band line color
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.DefaultDownBandLineColor">
            <summary>
            Gets or sets the default color for the <see cref="P:Ecng.Xaml.Charting.Visuals.RenderableSeries.FastBandRenderableSeries.Series1Color" />,
            which defines the down band line color
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.CursorLabelForeground">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier" /> label text foreground
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.CursorLabelBackgroundBrush">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier" /> label background
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.CursorLabelBorderBrush">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier" /> label border
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.RubberBandFillBrush">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier" /> drag reticule fill
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.RubberBandStrokeBrush">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.RubberBandXyZoomModifier" /> drag reticule border
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.CursorLineBrush">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.CursorModifier" /> line stroke
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.OverviewFillBrush">
            <summary>
            Gets or sets the brush (fill) for the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartOverview" /> non-selected area
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.ScrollbarFillBrush">
            <summary>
            Gets or sets the brush (fill) for the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar"/> viewport area
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.LegendBackgroundBrush">
            <summary>
            Gets or sets the brush for the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartLegend" /> background
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.DefaultTextAnnotationBackground">
            <summary>
            Gets or sets the default brush for the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation" /> background
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.DefaultTextAnnotationForeground">
            <summary>
            Gets or sets the default brush for the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.TextAnnotation" /> text foreground
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.DefaultAxisMarkerAnnotationBackground">
            <summary>
            Gets or sets the default brush for the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation" /> background
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.DefaultAxisMarkerAnnotationForeground">
            <summary>
            Gets or sets the default brush for the <see cref="T:Ecng.Xaml.Charting.Visuals.Annotations.AxisMarkerAnnotation" /> text-foreground
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Themes.ThemeColorProvider.AxisBandsFill">
            <summary>
            Gets or sets the color for the <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase" /> axis bands fill
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Utility.UltrachartDebugLogger">
            <summary>
            Provides a debug logger which can be used to pipe debug messages from Ultrachart to your own code, by setting the <see cref="T:Ecng.Xaml.Charting.IUltrachartLoggerFacade"/> via SetLogger
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Utility.UltrachartDebugLogger.Instance">
            <summary>
            Gets the singleton <see cref="T:Ecng.Xaml.Charting.Utility.UltrachartDebugLogger"/> instance
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.UltrachartDebugLogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes a line to the <see cref="T:Ecng.Xaml.Charting.IUltrachartLoggerFacade"/>. By default, the facade instance is null. In this case nothing happens
            </summary>
            <remarks>Logging is performance intensive and will drastically slow down the chart.</remarks>
            <param name="formatString">The format string</param>
            <param name="args">Optional args for the format string</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.UltrachartDebugLogger.SetLogger(Ecng.Xaml.Charting.IUltrachartLoggerFacade)">
            <summary>
            Sets the <see cref="T:Ecng.Xaml.Charting.IUltrachartLoggerFacade"/> to write to. By default this is null, but after being set, the <see cref="T:Ecng.Xaml.Charting.Utility.UltrachartDebugLogger"/> will write all output to this instance
            </summary>
            <param name="loggerFacade">The <see cref="T:Ecng.Xaml.Charting.IUltrachartLoggerFacade"/> instance.</param>
            <remarks>Logging is performance intensive and will drastically slow down the chart. Enable only when necessary</remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.Utility.Guard">
            <summary>
            Allows assertions to be built with the following syntax: 
            <code>
            Guard.Assert(123).IsLessThan(456);
            </code>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Guard.ArgumentIsRealNumber(System.Double)">
            <summary>
            Asserts that the argument is a real number
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="doubleValue">The double value.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Guard.DateTimeArgumentIsDefined(System.DateTime,System.String)">
            <summary>
            Asserts that the DateTime is defined, i.e. is not <see cref="F:System.DateTime.MinValue"/> or <see cref="F:System.DateTime.MaxValue"/>
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="value">The value.</param>
            <param name="argName">Name of the arg.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Guard.Assert(System.IComparable,System.String)">
            <summary>
            Builds an assertion in conjunction with <see cref="T:Ecng.Xaml.Charting.Utility.GuardConstraint"/>
            </summary>
            <param name="value">The value.</param>
            <param name="argName">Name of the arg.</param>
            <example>
            <code>
            Guard.Assert(123).IsLessThan(456);
            </code>
            </example>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.Utility.GuardConstraint">
            <summary>
            Allows assertions to be built with the following syntax: 
            <code>
            Guard.Assert(123).IsLessThan(456);
            </code>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.GuardConstraint.#ctor(System.IComparable,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Utility.GuardConstraint"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="argName">Name of the arg.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.GuardConstraint.IsLessThan(System.IComparable,System.String)">
            <summary>
            Asserts that the current value is less than the specified other value
            </summary>
            <param name="other">The other value.</param>
            <param name="otherArgName">Name of the other arg.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.GuardConstraint.IsNotEqualTo(System.IComparable,System.String)">
            <summary>
            Asserts that the current value is not equal to the specified other value
            </summary>
            <param name="other">The other value.</param>
            <param name="otherArgName">Name of the other arg.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.GuardConstraint.IsEqualTo(System.IComparable,System.String)">
            <summary>
            Asserts that the current value is equal to the specified other value
            </summary>
            <param name="other">The other value.</param>
            <param name="otherArgName">Name of the other arg.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.GuardConstraint.IsNotEqualTo(System.IComparable)">
            <summary>
            Asserts that the current value is not equal to the specified other value
            </summary>
            <param name="other">The other value.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.GuardConstraint.IsLessThanOrEqualTo(System.IComparable,System.String)">
            <summary>
            Asserts that the current value is less than or equal to the specified other value
            </summary>
            <param name="other">The other value.</param>
            <param name="otherArgName">Name of the other arg.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.GuardConstraint.IsGreaterThanOrEqualTo(System.IComparable)">
            <summary>
            Asserts that the current value is greater than or equal to the specified other value
            </summary>
            <param name="other">The other value.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.GuardConstraint.IsGreaterThan(System.IComparable)">
            <summary>
            Asserts that the current value is greater to the specified other value
            </summary>
            <param name="other">The other value.</param>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents">
            <summary>
            Defines the interface to a class which publishes mouse events. 
            Used in conjunction with <see cref="T:Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents"/> and <see cref="T:Ecng.Xaml.Charting.Utility.Mouse.MouseManager"/> 
            to provide cross-platform WPF and Silverlight mouse eventing
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents.MouseLeftButtonDown">
            <summary>
            Occurs when the left mouse button is pressed (or when the tip of the stylus touches the tablet) while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents.MouseLeftButtonUp">
            <summary>
            Occurs when the left mouse button is released (or the tip of the stylus is removed from the tablet) while the mouse (or the stylus) is over a <see cref="T:System.Windows.UIElement"/> (or while a <see cref="T:System.Windows.UIElement"/> holds mouse capture).
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents.MouseRightButtonDown">
            <summary>
            Occurs when the right mouse button is pressed while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents.MouseRightButtonUp">
            <summary>
            Occurs when the right mouse button is released while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>. However, this event will only be raised if a caller marks the preceding <see cref="E:System.Windows.UIElement.MouseRightButtonDown"/> event as handled; see Remarks.
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents.MouseMove">
            <summary>
            Occurs when the coordinate position of the mouse (or stylus) changes while over a <see cref="T:System.Windows.UIElement"/> (or while a <see cref="T:System.Windows.UIElement"/> holds mouse capture).
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents.MouseWheel">
            <summary>
            Occurs when the user rotates the mouse wheel while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>, or the <see cref="T:System.Windows.UIElement"/> has focus.
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents.MouseLeave">
            <summary>
            Occurs when the mouse pointer leaves the bounds of this element
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents.MouseMiddleButtonDown">
            <summary>
            Occurs when the middle mouse button is pressed while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents.MouseMiddleButtonUp">
            <summary>
            Occurs when the middle mouse button is released while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>. However, this event will only be raised if a caller marks the preceding <see cref="E:System.Windows.UIElement.MouseRightButtonDown"/> event as handled; see Remarks.
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents.TouchDown">
            <summary>
            Occurs when an input device begins a manipulation on the <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents.TouchMove">
            <summary>
            Occurs when an input device changes position during manipulation.
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents.TouchUp">
            <summary>
            Occurs when a manipulation and inertia on the <see cref="T:System.Windows.UIElement"/> object is complete.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents">
            <summary>
            Defines the interface to a type which receives unified Mouse Events (cross-platform WPF and Silverlight).
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents.IsEnabled">
            <summary>
            Gets or sets whether the mouse target is enabled.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents.MouseEventGroup">
            <summary>
            Gets or sets a Mouse Event Group, an ID used to share mouse events across multiple targets.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents.CanReceiveMouseEvents">
            <summary>
            Returns a value indicating whether mouse events should be propagated to the mouse target.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents.OnModifierDoubleClick(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse DoubleClick occurs.
            </summary>
            <param name="e">Arguments detailing the mouse button operation.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents.OnModifierMouseDown(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed.
            </summary>
            <param name="e">Arguments detailing the mouse button operation.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents.OnModifierMouseMove(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved.
            </summary>
            <param name="e">Arguments detailing the mouse move operation.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents.OnModifierMouseUp(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released.
            </summary>
            <param name="e">Arguments detailing the mouse button operation.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents.OnModifierMouseWheel(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse Wheel is scrolled.
            </summary>
            <param name="e">Arguments detailing the mouse wheel operation.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents.OnModifierTouchDown(Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a manipulation is started.
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents.OnModifierTouchMove(Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called after each touch position change during a manipulation.
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents.OnModifierTouchUp(Ecng.Xaml.Charting.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a manipulation is complete.
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents.OnMasterMouseLeave(Ecng.Xaml.Charting.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the MouseLeave event is fired for a Master of current <see cref="P:Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents.MouseEventGroup"/>.
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Utility.Mouse.MouseDelegates">
            <summary>
            Proxy class to handle mouse-events between a type which implements <see cref="T:Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents"/> and <see cref="T:Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Utility.Mouse.MouseDelegates.Target">
            <summary>
            The target element which will receive the notifications
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Utility.Mouse.MouseDelegates.MouseLeftUpDelegate">
            <summary>
            A proxy delegate for Mouse Left Up events
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Utility.Mouse.MouseDelegates.MouseLeftDownDelegate">
            <summary>
            A proxy delegate for Mouse Left Down events
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Utility.Mouse.MouseDelegates.MouseMoveDelegate">
            <summary>
            A proxy delegate for Mouse Move events
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Utility.Mouse.MouseDelegates.MouseRightUpDelegate">
            <summary>
            A proxy delegate for Mouse Right Up events
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Utility.Mouse.MouseDelegates.MouseRightDownDelegate">
            <summary>
            A proxy delegate for Mouse Right Down events
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Utility.Mouse.MouseDelegates.MouseMiddleDownDelegate">
            <summary>
            A proxy delegate for Mouse Middle Down events
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Utility.Mouse.MouseDelegates.MouseMiddleUpDelegate">
            <summary>
            A proxy delegate for Mouse Middle Up events
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Utility.Mouse.MouseDelegates.MouseWheelDelegate">
            <summary>
            A proxy delegate for Mouse Wheel events
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Utility.Mouse.MouseDelegates.MouseLeaveDelegate">
            <summary>
             A proxy delegate for Mouse Leave events
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Utility.Mouse.MouseDelegates.TouchDownDelegate">
            <summary>
            A proxy delegate for Touch Down events
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Utility.Mouse.MouseDelegates.TouchMoveDelegate">
            <summary>
            A proxy delegate for Touch Move events
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.Utility.Mouse.MouseDelegates.TouchUpDelegate">
            <summary>
            A proxy delegate for Touch Up events
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Utility.Mouse.IMouseManager">
            <summary>
            Defines the interface to the MouseManager, a cross-platform helper class to propagate mouse events in both Silverlight and WPF 
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.IMouseManager.Subscribe(Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents,Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Subscribes to mouse events on the Source, propagating handlers to the Target
            </summary>
            <param name="source">The source of mouse events</param>
            <param name="target">The target to receive mouse event handlers</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.IMouseManager.Unsubscribe(Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents)">
            <summary>
            Unsubscribes the source from mouse events
            </summary>
            <param name="element">The source to unsubscribe</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.IMouseManager.Unsubscribe(Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Unsubscribes the element from mouse events
            </summary>
            <param name="element">The element to unsubscribe</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Utility.Mouse.MouseManager">
            <summary>
            A cross-platform helper class to propagate mouse events in both Silverlight and WPF 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Utility.Mouse.MouseManager.MouseEventGroupProperty">
            <summary>
            Defines the MouseEventGroup Attached Property
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.MouseManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.Utility.Mouse.MouseManager" /> class.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.MouseManager.SetMouseEventGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the MouseEventGroup Attached Property
            </summary>
            <param name="element">The element.</param>
            <param name="modifierGroup">The modifier group.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.MouseManager.GetMouseEventGroup(System.Windows.DependencyObject)">
            <summary>
            Gets the MouseEventGroup Attached Property
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.MouseManager.Subscribe(Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents,Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Subscribes to mouse events on the Source, propagating handlers to the Target
            </summary>
            <param name="source">The source of mouse events</param>
            <param name="target">The target to receive mouse event handlers</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.MouseManager.Unsubscribe(Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents)">
            <summary>
            Unsubscribes the source from subscribers
            </summary>
            <param name="source">The source to unsubscribe</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.MouseManager.Unsubscribe(Ecng.Xaml.Charting.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Unsubscribes the element from mouse events
            </summary>
            <param name="element">The element to unsubscribe</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Utility.Mouse.ITouchPositionProvider">
            <summary>
            Provides <see cref="T:System.Windows.Input.TouchPointCollection"/> information from an <see cref="T:Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents"/> source
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.ITouchPositionProvider.GetPosition(Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents,System.Windows.Input.TouchFrameEventArgs)">
            <summary>
            Provides <see cref="T:System.Windows.Input.TouchPointCollection" /> information from an <see cref="T:Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents" /> source
            </summary>
            <param name="source">The source.</param>
            <param name="e">The <see cref="T:System.Windows.Input.TouchFrameEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.TouchPositionProvider.GetPosition(Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents,System.Windows.Input.TouchFrameEventArgs)">
            <summary>
            Provides <see cref="T:System.Windows.Input.TouchPointCollection" /> information from an <see cref="T:Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents" /> source
            </summary>
            <param name="source">The source.</param>
            <param name="e">The <see cref="T:System.Windows.Input.TouchFrameEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Utility.Mouse.IMousePositionProvider">
            <summary>
            An interface to a provider which converts <see cref="T:System.Windows.Input.MouseEventArgs"/> into <see cref="T:System.Windows.Point"/> coordinates. Used
            internally to Ultrachart and implemented with interface to enable mocking and testing
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.Mouse.IMousePositionProvider.GetPosition(Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents,System.Windows.Input.MouseEventArgs)">
            <summary>
            Gets the mouse position from the <see cref="T:System.Windows.Input.MouseEventArgs"/> as a <see cref="T:System.Windows.Point"/> (pixel coordinates relative to <see cref="T:Ecng.Xaml.Charting.Utility.Mouse.IPublishMouseEvents">source</see>
            </summary>
            <param name="source"></param>
            <param name="e"></param>
            <returns>The mouse position as a <see cref="T:System.Windows.Point"/></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Utility.Mouse.RenderSynchronizedMouseMove">
            <summary>
            Creates a 'throttled' MouseMove event which ensures that the UI
            rendering is not starved.
            </summary>    
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.NumberUtil.SortedSwap(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Swaps X1,X2 and Y1,Y2 so that the first coordinate pair is always to the left of the second coordinate pair
            </summary>
            <param name="xCoord1"></param>
            <param name="xCoord2"></param>
            <param name="yCoord1"></param>
            <param name="yCoord2"></param>
        </member>
        <member name="T:Ecng.Xaml.Charting.Utility.PointUtil">
            <summary>
            Provides helper methods for manipulations with points
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.Utility.PointUtil.Line">
            <summary>
            Represents a straight line between two points
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Utility.PointUtil.Line.X1">
            <summary>
            The X coord of the first point
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Utility.PointUtil.Line.Y1">
            <summary>
            The Y coord of the first point
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Utility.PointUtil.Line.X2">
            <summary>
            The X coord of the second point
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.Utility.PointUtil.Line.Y2">
            <summary>
            The Y coord of the second point
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.PointUtil.Line.#ctor(System.Windows.Point,System.Windows.Point)">
            <summary>
            Creates a new instance of the <see cref="T:Ecng.Xaml.Charting.Utility.PointUtil.Line"/> type
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.PointUtil.Line.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Ecng.Xaml.Charting.Utility.PointUtil.Line"/> type
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.PointUtil.LineSegmentsIntersection2D(Ecng.Xaml.Charting.Utility.PointUtil.Line,Ecng.Xaml.Charting.Utility.PointUtil.Line,System.Windows.Point@)">
            <summary>
            Looks for the intersection point for the two lines passed in
            </summary>
            <param name="firstLine">The first line</param>
            <param name="secondLine">The second line</param>
            <param name="intersectionPoint">If the lines intersect, holds the intersection point</param>
            <returns>The value indicating whether an intersection occurs</returns>
            <remarks>See http://paulbourke.net/geometry/lineline2d/Helpers.cs </remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Utility.PointUtil.LineIntersection2D(Ecng.Xaml.Charting.Utility.PointUtil.Line,Ecng.Xaml.Charting.Utility.PointUtil.Line,System.Windows.Point@)">
            <summary>
            Looks for the intersection point for the two lines passed in
            </summary>
            <param name="firstLine">The first line</param>
            <param name="secondLine">The second line</param>
            <param name="intersectionPoint">If the lines intersect, holds the intersection point</param>
            <returns>The value indicating whether an intersection occurs</returns>
            <remarks>See http://paulbourke.net/geometry/lineline2d/Helpers.cs </remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Threading.TaskEx.FromResult``1(``0)">
            <summary>
            Returns a completed task wrapping the Result passed in
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.Threading.ImmediateScheduler">
            <summary>Provides a task scheduler that runs tasks on the current thread.</summary>
            <remarks>See http://blogs.msdn.com/b/pfxteam/archive/2010/04/09/9990424.aspx for more info </remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.Threading.ImmediateScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Runs the provided Task synchronously on the current thread.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.Threading.ImmediateScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Runs the provided Task synchronously on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Whether the Task was previously queued to the scheduler.</param>
            <returns>True if the Task was successfully executed; otherwise, false.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.Threading.ImmediateScheduler.GetScheduledTasks">
            <summary>Gets the Tasks currently scheduled to this scheduler.</summary>
            <returns>An empty enumerable, as Tasks are never queued, only executed.</returns>
        </member>
        <member name="P:Ecng.Xaml.Charting.Threading.ImmediateScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum degree of parallelism for this scheduler.</summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.Threading.MultiThreaded.For(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Parallel for loop. Invokes given action, passing arguments
            fromInclusive - toExclusive on multiple threads.
            Returns when loop finished.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.AnnotationDragDeltaEventArgs">
            <summary>
            Event Args used by the <see cref="E:Ecng.Xaml.Charting.Visuals.Annotations.AnnotationBase.DragDelta"/> event
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.AnnotationDragDeltaEventArgs.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.AnnotationDragDeltaEventArgs" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.AnnotationDragDeltaEventArgs.HorizontalOffset">
            <summary>
            Gets / Sets HorizontalOffset property
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.AnnotationDragDeltaEventArgs.VerticalOffset">
            <summary>
            Gets / Sets VerticalOffset property
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.RenderPassInfo">
            <summary>
            Defines data for the current render pass
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.RenderPassInfo.ViewportSize">
            <summary>
            Gets or sets the current Viewport Size
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.RenderPassInfo.RenderableSeries">
            <summary>
            Gets or sets an array of RenderableSeries to draw
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.RenderPassInfo.PointSeries">
            <summary>
            Gets or sets an array of <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IPointSeries"/> which provide data
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.RenderPassInfo.DataSeries">
            <summary>
            Gets or sets an array of <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> which source data
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.RenderPassInfo.IndicesRanges">
            <summary>
            Gets or sets an array of <see cref="T:Ecng.Xaml.Charting.IntegerRange"/> which provide indices to the source data-series in view
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.RenderPassInfo.XCoordinateCalculators">
            <summary>
            Gets or sets a keyed dictionary of XAxis CoordinateCalculators
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.RenderPassInfo.YCoordinateCalculators">
            <summary>
            Gets or sets a keyed dictionary of YAxis CoordinateCalculators
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.RenderPassInfo.TransformationStrategy">
            <summary>
            Gets or sets the current pixel transformation strategy
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.IUltrachartRenderer">
            <summary>
            Defines the interface to the <see cref="T:Ecng.Xaml.Charting.UltrachartRenderer"/>, which handles the render pass on the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.IUltrachartRenderer.RenderLoop(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D)">
            <summary>
            Executes a single render pass
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.UltrachartRenderer">
            <summary>
            Handles the render pass on the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartRenderer.#ctor(Ecng.Xaml.Charting.Visuals.UltrachartSurface)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.UltrachartRenderer"/> class.
            </summary>
            <param name="ultraChartSurface">The parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/></param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartRenderer.RenderLoop(Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D)">
            <summary>
            Executes a single render pass
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartRenderer.OnLayoutUltrachart(Ecng.Xaml.Charting.Visuals.IUltrachartSurface)">
            <summary>
            Step 1, perform layout, resize components
            </summary>
            <param name="scs"></param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartRenderer.TryPerformAutorangeOn(Ecng.Xaml.Charting.Visuals.Axes.IAxis,Ecng.Xaml.Charting.Visuals.IUltrachartSurface)">
            <summary>
            // Set a default range prior to layout if one doesn't exist
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartRenderer.PrepareRenderData(Ecng.Xaml.Charting.Visuals.IUltrachartSurface,System.Windows.Size)">
            <summary>
            Step 2, prepare render data
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartRenderer.OnDrawAxes(Ecng.Xaml.Charting.Visuals.IUltrachartSurface,Ecng.Xaml.Charting.RenderPassInfo,Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D)">
            <summary>
            Step 3, draw axes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartRenderer.OnDrawSeries(Ecng.Xaml.Charting.Visuals.IUltrachartSurface,Ecng.Xaml.Charting.RenderPassInfo,Ecng.Xaml.Charting.Rendering.Common.IRenderContext2D)">
            <summary>
            Step 4, draw series
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartRenderer.OnDrawAnnotations(Ecng.Xaml.Charting.Visuals.UltrachartSurface,Ecng.Xaml.Charting.RenderPassInfo)">
            <summary>
            Step 5, draw annotations
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ThemeAppliedEventArgs">
            <summary>
            EventArgs used when the <see cref="E:Ecng.Xaml.Charting.ThemeManager.ThemeApplied"/> event is raised
            </summary>
            <seealso cref="T:Ecng.Xaml.Charting.ThemeManager"/>
            <seealso cref="T:Ecng.Xaml.Charting.Themes.IThemeProvider"/>
        </member>
        <member name="M:Ecng.Xaml.Charting.ThemeAppliedEventArgs.#ctor(System.Windows.FrameworkElement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.ThemeAppliedEventArgs" /> class.
            </summary>
            <param name="control">The control which has the theme applied</param>
            <param name="newTheme">The new theme string</param>
        </member>
        <member name="P:Ecng.Xaml.Charting.ThemeAppliedEventArgs.Control">
            <summary>
            Gets the control which has the theme applied
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ThemeAppliedEventArgs.NewTheme">
            <summary>
            Gets the new theme name
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ThemeManager">
            <summary>
            Provides automatic themeing of <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> via the Theme property.
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ThemeManager.ThemeProperty">
            <summary>
            Defines the Theme dependency property.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ThemeManager.GetTheme(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the Theme Attached Property.
            </summary>
            <param name="d">The dependency object.</param>
            <returns>The current Theme.</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ThemeManager.SetTheme(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the value of the Theme Attached property. For a list of All Themes, see the <see cref="P:Ecng.Xaml.Charting.ThemeManager.AllThemes"/> property.
            </summary>
            <param name="d">The dependency object.</param>
            <param name="value">The current theme.</param>
        </member>
        <member name="E:Ecng.Xaml.Charting.ThemeManager.ThemeApplied">
            <summary>
            Raised when a new theme has been applied to the Ultrachart application.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ThemeManager.AllThemes">
            <summary>
            Gets a list of all available themes
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ThemeManager.ThemeProvider">
            <summary>
            Gets <see cref="T:Ecng.Xaml.Charting.Themes.IThemeProvider"/> instance
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ThemeManager.AddTheme(System.String,System.Windows.ResourceDictionary)">
            <summary>
            Add new theme and themeProvider into _theme and ThemeProviders respectively
            </summary>
            <param name="theme"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ThemeManager.RemoveTheme(System.String)">
            <summary>
            Add theme by string Key from _theme and appropriate themeProvider from ThemeProviders
            </summary>
            <param name="theme"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ThemeManager.GetThemeProvider(System.String)">
            <summary>
            Gets a <see cref="T:Ecng.Xaml.Charting.Themes.IThemeProvider"/> instance for the named <paramref name="theme"/> 
            </summary>
            <param name="theme">the named <paramref name="theme"/> </param>
            <returns>a <see cref="T:Ecng.Xaml.Charting.Themes.IThemeProvider"/> instance</returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.TabControlCompatible">
            <summary>
            A cross-platform implementation of <see cref="T:System.Windows.Controls.TabControl"/>, used in the <see cref="T:Ecng.Xaml.Charting.UltrachartGroup"/> control in WPF and Silverlight editions
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.IUltrachartLoggerFacade">
            <summary>
            Defines the interface to a logger facade. If you wish to receive debug log messages from Ultrachart, then set a logger instance via 
            <see cref="M:Ecng.Xaml.Charting.Utility.UltrachartDebugLogger.SetLogger(Ecng.Xaml.Charting.IUltrachartLoggerFacade)"/>. Note that logging will dramatically decrease performance, especially in a real-time scenario
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.IUltrachartLoggerFacade.Log(System.String,System.Object[])">
            <summary>
            Logs the string format message with optional arguments
            </summary>
            <param name="formatString">The formatting string</param>
            <param name="args">Optional arguments to the formatting string</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.IServiceContainer">
            <summary>
            Defines the interface to a ServiceContainer used throughout Ultrachart. For a full list of available services, see the remarks on <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.IServiceContainer.GetService``1">
            <summary>
            Gets the service instance registered by type. For a full list of available services, see the remarks on <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/>
            </summary>
            <typeparam name="T">The type of service to get </typeparam>
            <returns>The service instance, unique to this <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> instance</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.IServiceContainer.RegisterService``1(``0)">
            <summary>
            Registers the service.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.ServiceContainer">
            <summary>
            Provides access to services throughout Ultrachart. ServiceContainers are created one per <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/>
            </summary>
            <remarks>Available Services include:
            <list type="bullet">
                <item><see cref="T:Ecng.Xaml.Charting.Utility.Mouse.IMouseManager"/>, for subscription to mouse events</item>
                <item><see cref="T:Ecng.Xaml.Charting.IUltrachartRenderer"/>, for handling of the rendering pipeline</item>
                <item>
                    <see cref="T:Ecng.Xaml.Charting.IEventAggregator"/>, with event types as follows:
                    <list type="bullet">
                        <item><see cref="T:Ecng.Xaml.Charting.InvalidateUltrachartMessage"/></item>
                        <item><see cref="T:Ecng.Xaml.Charting.ZoomExtentsMessage"/></item>
                        <item><see cref="T:Ecng.Xaml.Charting.UltrachartResizedMessage"/></item>
                        <item><see cref="T:Ecng.Xaml.Charting.UltrachartRenderedMessage"/></item>
                    </list>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ServiceContainer.RegisterService``1(``0)">
            <summary>
            Registers the service.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <remarks></remarks>
        </member>
        <member name="M:Ecng.Xaml.Charting.ServiceContainer.GetService``1">
            <summary>
            Gets the service instance registered by type. For a full list of available services, see the remarks on <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/>
            </summary>
            <typeparam name="T">The type of service to get</typeparam>
            <returns>The service instance, unique to this <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> instance</returns>
            <remarks></remarks>
        </member>
        <member name="T:Ecng.Xaml.Charting.DefaultViewportManager">
            <summary>
            The DefaultViewportManager performs a naive calculation for X and Y Axis VisibleRange. 
            On each render of the parent UltrachartSurface, either autorange to fit the data (depending on the Axis.AutoRange property value), 
            or return the original axis range (no change)
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.DefaultViewportManager.OnVisibleRangeChanged(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Called when the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.VisibleRange"/> changes for an axis. Override in derived types to get a notification of this occurring
            </summary>
            <param name="axis">The <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>instance</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.DefaultViewportManager.OnParentSurfaceRendered(Ecng.Xaml.Charting.Visuals.IUltrachartSurface)">
            <summary>
            Called when the <see cref="T:Ecng.Xaml.Charting.Visuals.IUltrachartSurface" /> is rendered.
            </summary>
            <param name="ultraChartSurface">The UltrachartSurface instance</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.DefaultViewportManager.OnCalculateNewXRange(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Overridden by derived types, called when the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" /> requests the XAxis VisibleRange.
            The Range returned by this method will be applied to the chart on render
            </summary>
            <param name="xAxis">The XAxis</param>
            <returns>
            The new VisibleRange for the XAxis
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.DefaultViewportManager.OnCalculateNewYRange(Ecng.Xaml.Charting.Visuals.Axes.IAxis,Ecng.Xaml.Charting.RenderPassInfo)">
            <summary>
            Overridden by derived types, called when the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" /> requests a YAxis VisibleRange.
            The Range returned by this method will be applied to the chart on render
            </summary>
            <param name="yAxis">The YAxis</param>
            <param name="renderPassInfo"></param>
            <returns>
            The new VisibleRange for the YAxis
            </returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.IViewportManager">
            <summary>
            Defines the interface to a ViewportManager, which may be used to intercept the X,Y axis ranging during render and invalidate the parent surface
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.IViewportManager.Services">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/> which provides access to services throughout Ultrachart. 
            ServiceContainers are created one per <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.IViewportManager.IsAttached">
            <summary>
            Returns <value>True</value> when a <see cref="T:Ecng.Xaml.Charting.ViewportManagerBase"/> has the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> attached to.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.IViewportManager.OnVisibleRangeChanged(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Called when the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.VisibleRange"/> changes for an axis. Override in derived types to get a notification of this occurring
            </summary>
            <param name="axis">The <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>instance</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.IViewportManager.CalculateNewYAxisRange(Ecng.Xaml.Charting.Visuals.Axes.IAxis,Ecng.Xaml.Charting.RenderPassInfo)">
            <summary>
            Called by the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> during render to calculate the new YAxis VisibleRange. Override in derived types to return a custom value
            </summary>
            <param name="yAxis">The YAxis to calculate for</param>
            <param name="renderPassInfo">The current <see cref="T:Ecng.Xaml.Charting.RenderPassInfo"/> containing render data</param>
            <returns>The new <see cref="T:Ecng.Xaml.Charting.IRange"/> VisibleRange for the axis</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.IViewportManager.CalculateNewXAxisRange(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Called by the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> during render to calculate the new XAxis VisibleRange. Override in derived types to return a custom value
            </summary>
            <param name="xAxis">The XAxis to calculate for</param>
            <returns>The new <see cref="T:Ecng.Xaml.Charting.IRange"/> VisibleRange for the axis</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.IViewportManager.CalculateAutoRange(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Called by the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> during render to perform autoranging. Override in derived types to return a custom value
            </summary>
            <param name="axis">The axis  to calculate for</param>
            <returns>
            The new <see cref="T:Ecng.Xaml.Charting.IRange"/> VisibleRange for the axis
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.IViewportManager.OnParentSurfaceRendered(Ecng.Xaml.Charting.Visuals.IUltrachartSurface)">
            <summary>
            Called when the <see cref="T:Ecng.Xaml.Charting.Visuals.IUltrachartSurface"/> is rendered. 
            </summary>
            <param name="ultraChartSurface">The UltrachartSurface instance</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.IViewportManager.InvalidateParentSurface(Ecng.Xaml.Charting.Model.DataSeries.RangeMode)">
            <summary>
            May be called to trigger a redraw on the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>. See tne <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.RangeMode"/> for available options. 
            </summary>
            <param name="rangeMode">Tne <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.RangeMode"/> with options for the re-draw</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.IViewportManager.AttachUltrachartSurface(Ecng.Xaml.Charting.Visuals.IUltrachartSurface)">
            <summary>
            Called when the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> is attached to a <see cref="T:Ecng.Xaml.Charting.ViewportManagerBase"/>. May be overridden to get notification of attachment. 
            </summary>
            <param name="scs">The <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> instance</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.IViewportManager.DetachUltrachartSurface">
            <summary>
            Called when the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> is detached from a <see cref="T:Ecng.Xaml.Charting.ViewportManagerBase"/>. May be overridden to get notification of detachment. 
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ViewportManagerBase">
            <summary>
            Defines a base class for a ViewportManager, which may be used to control visible range and ranging on a <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ViewportManagerBase.Services">
            <summary>
            Gets the <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/> which provides access to services throughout Ultrachart. 
            ServiceContainers are created one per <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisBase"/>, <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, <see cref="T:Ecng.Xaml.Charting.ChartModifiers.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Ecng.Xaml.Charting.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ViewportManagerBase.IsAttached">
            <summary>
            Gets the value indicating whether a <see cref="T:Ecng.Xaml.Charting.ViewportManagerBase"/> has the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> attached to.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.AttachUltrachartSurface(Ecng.Xaml.Charting.Visuals.IUltrachartSurface)">
            <summary>
            Called when the <see cref="T:Ecng.Xaml.Charting.ViewportManagerBase"/> is attached to a parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
            <param name="scs">The UltrachartSurface instance</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.DetachUltrachartSurface">
            <summary>
            Called when the <see cref="T:Ecng.Xaml.Charting.ViewportManagerBase"/> is detached from a parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ViewportManagerBase.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>
            The disposable Update Suspender
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.ResumeUpdates(Ecng.Xaml.Charting.Visuals.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by IUpdateSuspender
            </summary>
            <param name="suspender"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.InvalidateElement">
            <summary>
            Asynchronously requests that the element redraws itself plus children.
            Will be ignored if the element is ISuspendable and currently IsSuspended (within a SuspendUpdates/ResumeUpdates call)
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.ZoomExtents">
            <summary>
            Zooms the chart to the extents of the data, plus any X or Y Grow By fraction set on the X and Y Axes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.AnimateZoomExtents(System.TimeSpan)">
            <summary>
            Zooms to extents with the specified animation duration
            </summary>
            <param name="duration">The duration of animation when zooming to extents</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.ZoomExtentsY">
            <summary>
            Zooms the chart to the extents of the data in the Y-Direction, accounting for the current data in view in the X-direction
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.AnimateZoomExtentsY(System.TimeSpan)">
            <summary>
            Zooms the chart to the extents of the data in the Y-Direction, accounting for the current data in view in the X-direction
            </summary>
            <param name="duration"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.ZoomExtentsX">
            <summary>
            Zooms the chart to the extents of the data in the X-Direction
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.AnimateZoomExtentsX(System.TimeSpan)">
            <summary>
            Zooms the chart to the extents of the data in the X-Direction
            </summary>
            <param name="duration"></param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.CalculateAutoRange(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Overridden by derived types, called when the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" /> requests to perform autoranging.
            The Range returned by this method will be applied to the chart on render
            </summary>
            <param name="axis">The axis</param>
            <returns>
            The new VisibleRange for the YAxis
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.CalculateNewXAxisRange(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Called by the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" /> during render to calculate the new XAxis VisibleRange. Override in derived types to return a custom value
            </summary>
            <param name="xAxis"></param>
            <returns>
            The new <see cref="T:Ecng.Xaml.Charting.IRange" /> VisibleRange for the axis
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.CalculateNewYAxisRange(Ecng.Xaml.Charting.Visuals.Axes.IAxis,Ecng.Xaml.Charting.RenderPassInfo)">
            <summary>
            Called by the <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" /> during render to calculate the new YAxis VisibleRange. Override in derived types to return a custom value
            </summary>
            <param name="yAxis">The YAxis to calculate for</param>
            <param name="renderPassInfo">The current <see cref="T:Ecng.Xaml.Charting.RenderPassInfo" /> containing render data</param>
            <returns>
            The new <see cref="T:Ecng.Xaml.Charting.IRange" /> VisibleRange for the axis
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.OnCalculateNewXRange(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Overridden by derived types, called when the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> requests the XAxis VisibleRange. 
            
            The Range returned by this method will be applied to the chart on render
            </summary>
            <param name="xAxis">The XAxis</param>
            <returns>The new VisibleRange for the XAxis</returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.OnCalculateNewYRange(Ecng.Xaml.Charting.Visuals.Axes.IAxis,Ecng.Xaml.Charting.RenderPassInfo)">
            <summary>
            Overridden by derived types, called when the parent <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface" /> requests a YAxis VisibleRange.
            The Range returned by this method will be applied to the chart on render
            </summary>
            <param name="yAxis">The YAxis</param>
            <param name="renderPassInfo">The render pass info.</param>
            <returns>
            The new VisibleRange for the YAxis
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.OnVisibleRangeChanged(Ecng.Xaml.Charting.Visuals.Axes.IAxis)">
            <summary>
            Called when the <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.VisibleRange"/> changes for an axis. Override in derived types to get a notification of this occurring
            </summary>
            <param name="axis">The <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>instance</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.OnParentSurfaceRendered(Ecng.Xaml.Charting.Visuals.IUltrachartSurface)">
            <summary>
            Called when the <see cref="T:Ecng.Xaml.Charting.Visuals.IUltrachartSurface" /> is rendered.
            </summary>
            <param name="ultraChartSurface">The UltrachartSurface instance</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.InvalidateParentSurface(Ecng.Xaml.Charting.Model.DataSeries.RangeMode)">
            <summary>
            Triggers a redraw on the parent surface with the specified RangeMode
            </summary>
            <param name="rangeMode">The <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.RangeMode"/> specifying how to redraw the parent surface</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.ViewportManagerBase.OnInvalidateParentSurface(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:InvalidateParentSurface" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.XyDirection">
            <summary>
            Defines constants for X or Y direction, used by <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.GridLinesPanel"/> to specify creation of X or Y grid line
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.XyDirection.XDirection">
            <summary>
            Refers to the X-Axis Direction
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.XyDirection.YDirection">
            <summary>
            Refers to the Y-Axis Direction
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.XyDirection.XYDirection">
            <summary>
            Refers to both X and Y Axis Direction
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ActionType">
            <summary>
            Defines constants for Pan or Zoom actions, used by <see cref="T:Ecng.Xaml.Charting.ChartModifiers.MouseWheelZoomModifier"/> to specify required action 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ActionType.Pan">
            <summary>
            Refers to pan action
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ActionType.Zoom">
            <summary>
            Refers to zoom action
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ScientificNotation">
            <summary>
            Defines constants for scientific or engineering notation on <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/>. For instance, 
            using None gives default tick labels, whereas using Normalized gives a scientific notation with superscript
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ScientificNotation.None">
            <summary>
            Default tick labelling, e.g. 10000
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ScientificNotation.Normalized">
            <summary>
            Normalized (Scientific) tick labelling, e.g. 1x10^4 with superscript
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ScientificNotation.E">
            <summary>
            Engineering tick labelling, e.g. 1E+4 without superscript
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ScientificNotation.LogarithmicBase">
            <summary>
            Tick labelling with power of other bases, determined by <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.LogarithmicNumericAxis.LogarithmicBase"/>.
            E.g. 1x[base]+4 with superscript
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ClipMode">
            <summary>
            Defines constants for behavior of the ZoomPanModifier. 
             - ClipMode.None means you can pan right off the edge of the data into uncharted space. 
             - ClipMode.StretchAtExtents causes a zooming (stretch) action when you reach the edge of the data. 
             - ClipAtExtents forces the panning operation to stop suddenly at the extents of the data
             - ClipAtMin forces the panning operation to stop suddenly at the minimum of the data, but expand at the maximum
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ClipMode.None">
            <summary>
            ClipMode.None means you can pan right off the edge of the data into uncharted space. 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ClipMode.StretchAtExtents">
            <summary>
            ClipMode.StretchAtExtents causes a zooming (stretch) action when you reach the edge of the data. 
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ClipMode.ClipAtMin">
            <summary>
            ClipAtMin forces the panning operation to stop suddenly at the minimum of the data, but expand at the maximum
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ClipMode.ClipAtMax">
            <summary>
            ClipAtMax forces the panning operation to stop suddenly at the maximum of the data, but expand at the minimum
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.ClipMode.ClipAtExtents">
            <summary>
            ClipAtExtents forces the panning operation to stop suddenly at the extents of the data
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.AxisDragModes">
            <summary>
            Defines Enumeration Constants for modes of operation of the <see cref="T:Ecng.Xaml.Charting.ChartModifiers.YAxisDragModifier"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.AxisDragModes.Scale">
            <summary>
            Scale mode: the dragging scales the YAxis VisibleRange property directly, or indirectly, via the GrowBy property, if YAxis.AutoRange=true
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.AxisDragModes.Pan">
            <summary>
            Pan mode: the dragging pans the YAxis VisibleRange, allowing a vertical scroll. This may only be used with YAxis.AutoRange=false
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.AxisAlignmentChangedEventArgs">
            <summary>
            Event Args used by the <see cref="E:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRangeChanged"/> event
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.AxisAlignmentChangedEventArgs.OldAlignment">
            <summary>
            Gets the old <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment"/> value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.AxisAlignmentChangedEventArgs.NewAlignment">
            <summary>
            Gets the new <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment"/> value
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.AxisAlignmentChangedEventArgs.AxisId">
            <summary>
            Gets the Id of <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.IAxis"/>, which alignment has been changed
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.AxisAlignmentChangedEventArgs.#ctor(System.String,Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment,Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.AxisAlignmentChangedEventArgs" /> class.
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.SelectedRangeEventType">
            <summary>
            Enumeration constants to define the possible event type during scrolling of <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.SelectedRangeEventType.ExternalSource">
            <summary>
            <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.SelectedRange"/> was changed externally
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.SelectedRangeEventType.Drag">
            <summary>
            <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar"/> viewport was dragged without resizing
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.SelectedRangeEventType.Resize">
            <summary>
            <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar"/> viewport was resized with one of resizing grips
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.SelectedRangeEventType.Moved">
            <summary>
            <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar"/> viewport was moved after click on non selected area
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.SelectedRangeChangedEventArgs">
            <summary>
            Event arguments for the <see cref="E:Ecng.Xaml.Charting.Visuals.UltrachartScrollbar.SelectedRangeChanged"/> event
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.SelectedRangeChangedEventArgs.SelectedRange">
            <summary>
            Gets the range for the event args
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.SelectedRangeChangedEventArgs.EventType">
            <summary>
            Gets the <see cref="P:Ecng.Xaml.Charting.SelectedRangeChangedEventArgs.EventType"/> value which describes current event type
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.SelectedRangeChangedEventArgs.#ctor(System.IComparable,System.IComparable,Ecng.Xaml.Charting.SelectedRangeEventType)">
            <summary>
            sets the range start and range stop for the event args
            </summary>
            <param name="newRangeStart">The new range start set</param>
            <param name="newRangeStop">The new range stop set</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.SelectedRangeChangedEventArgs.#ctor(Ecng.Xaml.Charting.IRange,Ecng.Xaml.Charting.SelectedRangeEventType)">
            <summary>
            sets the range start and range stop for the event args
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.VisibleRangeChangedEventArgs">
            <summary>
            Event Args used by the <see cref="E:Ecng.Xaml.Charting.Visuals.Axes.AxisBase.VisibleRangeChanged"/> event
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.VisibleRangeChangedEventArgs.OldVisibleRange">
            <summary>
            Gets the old <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.VisibleRange"/> before the operation
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.VisibleRangeChangedEventArgs.NewVisibleRange">
            <summary>
            Gets the new <see cref="P:Ecng.Xaml.Charting.Visuals.Axes.IAxisParams.VisibleRange"/> before the operation
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.VisibleRangeChangedEventArgs.IsAnimating">
            <summary>
            Gets the value, indicating whether the current notification was caused by animation
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.VisibleRangeChangedEventArgs.#ctor(Ecng.Xaml.Charting.IRange,Ecng.Xaml.Charting.IRange,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.VisibleRangeChangedEventArgs" /> class.
            </summary>
            <param name="oldRange">The old range.</param>
            <param name="newRange">The new range.</param>
            <param name="isAnimationChange">The value, indicating whether the notification is fired during animation</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.IChildPane">
            <summary>
            The interface to a child pane in a <see cref="T:Ecng.Xaml.Charting.UltrachartGroup"/> control, which displays 1..Many <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/>
            controls in a vertical chart group. Intended specifically for stock charts. 
            
            Derive from this interface when creating a ViewModel which will form the basis of a Child Pane in a multi-paned stock chart application
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.IChildPane.Title">
            <summary>
            Gets or sets the Title of this Child Pane
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.IChildPane.ZoomExtents">
            <summary>
            Causes the child pane to zoom to extents
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.IChildPane.ClosePaneCommand">
            <summary>
            A command which when invoked, closes the child pane
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.ItemPane">
            <summary>
            An ItemContainer for panes in the <see cref="T:Ecng.Xaml.Charting.UltrachartGroup"/> control
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.ItemPane.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ItemPane.PaneElement">
            <summary>
            Gets or sets the Pane UIElement
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ItemPane.PaneViewModel">
            <summary>
            Gets or sets the Pane ViewModel
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ItemPane.IsTabbed">
            <summary>
            Gets or sets whether this pane is tabbed
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ItemPane.ChangeOrientationCommand">
            <summary>
            Gets or sets the change orientation command.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.ItemPane.ClosePaneCommand">
            <summary>
            Gets or sets the close pane command.
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.ItemPane.OnPropertyChanged(System.String)">
            <summary>
            Implementation of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Ecng.Xaml.Charting.UltraStockChart">
            <summary>
            Provides a high performance Stock Chart control surface with a <see cref="T:Ecng.Xaml.Charting.Rendering.Common.RenderSurfaceBase"/> viewport. 
            
            Templated to inclue a <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.CategoryDateTimeAxis"/> as XAxis and <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.NumericAxis"/> as YAxis. 
            
            The UltraStockChart can have an <see cref="T:Ecng.Xaml.Charting.Model.DataSeries.IDataSeries"/> data source for each <see cref="T:Ecng.Xaml.Charting.Visuals.RenderableSeries.IRenderableSeries"/>, or use the new MVVM API (see the <see cref="P:Ecng.Xaml.Charting.Visuals.UltrachartSurface.SeriesSource"/> property)
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.UltraStockChart.XAxisStyleProperty">
            <summary>Defines the XAxisStyle DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.UltraStockChart.YAxisStyleProperty">
            <summary>Defines the YAxisStyle DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.UltraStockChart.IsCursorEnabledProperty">
            <summary>Defines the IsCursorEnabled DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.UltraStockChart.IsRolloverEnabledProperty">
            <summary>Defines the IsRolloverEnabled DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.UltraStockChart.IsPanEnabledProperty">
            <summary>Defines the IsPanEnabled DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.UltraStockChart.IsRubberBandZoomEnabledProperty">
            <summary>Defines the IsRubberBandZoomEnabled DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.UltraStockChart.BarTimeFrameProperty">
            <summary>Defines the BarTimeFrame DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.UltraStockChart.IsXAxisVisibleProperty">
            <summary>Defines the IsXAxisVisible DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.UltraStockChart.VerticalChartGroupIdProperty">
            <summary>Defines the VerticalChartGroupId DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.UltraStockChart.IsAxisMarkersEnabledProperty">
            <summary>Defines the IsAxisMarkersEnabled DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.UltraStockChart.LegendSourceProperty">
            <summary>Defines the LegendSource DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.UltraStockChart.DefaultDataProviderProperty">
            <summary>Defines the CurrentDataProvider DependencyProperty</summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.UltraStockChart.ShowLegendProperty">
            <summary> Defines the ShowLegend DependencyProperty </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.UltraStockChart.LegendStyleProperty">
            <summary> Defines the LegendStyle DependencyProperty </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltraStockChart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.UltraStockChart" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.UltraStockChart.DefaultDataProvider">
            <summary>
            Gets or set modifier which provides data for legend
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.UltraStockChart.LegendSource">
            <summary>
            Gets or sets data source for legend
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.UltraStockChart.ShowLegend">
            <summary>
            Gets or sets whether need to display legend
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.UltraStockChart.LegendStyle">
            <summary>
            Gets or sets style for <see cref="T:Ecng.Xaml.Charting.ChartModifiers.LegendModifier"/>
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.UltraStockChart.IsAxisMarkersEnabled">
            <summary>
            Gets or sets whether Axis Markers are to be displayed on the right YAxis, showing the series values
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.UltraStockChart.VerticalChartGroupId">
            <summary>
            Gets or sets a proxy value for the UltrachartGroup.VerticalChartGroup attached property and MouseManager.MouseEventGroup property, which is used to bind together the chart sizes and mouse events
            </summary>  
        </member>
        <member name="P:Ecng.Xaml.Charting.UltraStockChart.XAxisStyle">
            <summary>
            Gets or sets a Style allowing direct overriding of the built-in XAxis (TargetType must be CategoryDateTimeAxis)
            </summary> 
        </member>
        <member name="P:Ecng.Xaml.Charting.UltraStockChart.YAxisStyle">
            <summary>
            Gets or sets a Style allowing direct overriding of the built-in XAxis (TargetType must be NumericAxis)
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.UltraStockChart.IsXAxisVisible">
            <summary>
            Gets or sets a value indicating whether the X axis is visible.
            </summary>        
        </member>
        <member name="P:Ecng.Xaml.Charting.UltraStockChart.IsCursorEnabled">
            <summary>
            Gets or sets whether the CursorModifier is enabled or not
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.UltraStockChart.IsRolloverEnabled">
            <summary>
            Gets or sets whether the RolloverModifier is enabled or not
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.UltraStockChart.IsPanEnabled">
            <summary>
            Gets or sets whether the Pan modifier is enabled
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.UltraStockChart.IsRubberBandZoomEnabled">
            <summary>
            Gets or sets whether the RubberBandXyZoom is enabled
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.UltraStockChart.BarTimeFrame">
            <summary>
            Gets or sets the BarTimeFrame, this is the time in seconds for each bar on the <see cref="T:Ecng.Xaml.Charting.UltraStockChart"/>
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltraStockChart.ZoomExtents">
            <summary>
            Zooms the chart to the extents of the data, plus any X or Y Grow By fraction set on the X and Y Axes
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.UltrachartGroup">
            <summary>
            An ItemsControl which allows grouping of multiple <see cref="T:Ecng.Xaml.Charting.Visuals.UltrachartSurface"/> instances to create a multi-paned chart. Used specifically by StockCharts but also applicable to other chart types
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.UltrachartGroup.VerticalChartGroupProperty">
            <summary>
            Defines the VerticalChartGroup DependencyProperty
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.UltrachartGroup.IsTabbedProperty">
            <summary>
            Defines the IsTabbed DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.UltrachartGroup" /> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.UltrachartGroup.IsTabbed">
            <summary>
            Gets or sets value, indicates whether panes are tabbed or not
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ecng.Xaml.Charting.UltrachartGroup.HasTabbedItems">
            <summary>
            Gets a value, indicates, whether container has tabbed panes
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartGroup.SetVerticalChartGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the vertical chart group dependency Property
            </summary>
            <param name="element">The element.</param>
            <param name="syncWidthGroup">The named group</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartGroup.GetVerticalChartGroup(System.Windows.DependencyObject)">
            <summary>
            Gets the vertical chart group depedency property
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartGroup.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            true if the item is (or is eligible to be) its own container; otherwise, false.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartGroup.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>
            The element that is used to display the given item.
            </returns>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartGroup.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" /> property changes.
            </summary>
            <param name="oldValue">Old value of the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" /> property.</param>
            <param name="newValue">New value of the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" /> property.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartGroup.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Invoked when the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> property changes.
            </summary>
            <param name="e">Information about the change.</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartGroup.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.UltrachartGroup.PropertyChanged">
            <summary>
            Occurs when a property changes. Part of the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation
            </summary>
        </member>
        <member name="T:Ecng.Xaml.Charting.HorizontalGroupHelper">
            <summary>
            A HelperClass used to perform the functionality of <see cref="F:Ecng.Xaml.Charting.UltrachartGroup.VerticalChartGroupProperty"/> but when the chart is rotated (e.g. YAxis <see cref="T:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment"/> = <see cref="F:Ecng.Xaml.Charting.Visuals.Axes.AxisAlignment.Top"/>
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.HorizontalGroupHelper.HorizontalChartGroupProperty">
            <summary>
            Defines the HorizontalChartGroup DependencyProperty
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.HorizontalGroupHelper.SetHorizontalChartGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the Horizontal chart group dependency Property
            </summary>
            <param name="element">The element.</param>
            <param name="syncWidthGroup">The named group</param>
        </member>
        <member name="M:Ecng.Xaml.Charting.HorizontalGroupHelper.GetHorizontalChartGroup(System.Windows.DependencyObject)">
            <summary>
            Gets the Horizontal chart group depedency property
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="T:Ecng.Xaml.Charting.UltrachartGroupPane">
            <summary>
            An ItemPane for the <see cref="T:Ecng.Xaml.Charting.UltrachartGroup"/> control. Wraps your custom UIElement (provided by <see cref="T:Ecng.Xaml.Charting.UltrachartGroup"/> ItemTemplate property)
            </summary>
        </member>
        <member name="F:Ecng.Xaml.Charting.UltrachartGroupPane.HeaderTemplateProperty">
            <summary>
            The header template property
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.UltrachartGroupPane.Resizing">
            <summary>
            Fired when the outline of a pane is dragged
            </summary>
        </member>
        <member name="E:Ecng.Xaml.Charting.UltrachartGroupPane.Resized">
            <summary>
            Fired after a dragging of the outline of a pane is done
            </summary>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartGroupPane.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ecng.Xaml.Charting.UltrachartGroupPane"/> class.
            </summary>
        </member>
        <member name="P:Ecng.Xaml.Charting.UltrachartGroupPane.HeaderTemplate">
            <summary>
            Gets or sets the header template.
            </summary>
            <value>
            The header template.
            </value>
        </member>
        <member name="M:Ecng.Xaml.Charting.UltrachartGroupPane.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.LayoutTransformer">
            <summary>
            Represents a control that applies a layout transformation to its Content.
            </summary>
            <remarks>
            From the Silverlight Toolkit http://silverlight.codeplex.com/. (c) Copyright Microsoft Corporation. This source is subject to the Microsoft Public License (Ms-PL).
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer.TransformRootName">
            <summary>
            Name of the TransformRoot template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer.PresenterName">
            <summary>
            Name of the Presenter template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LayoutTransformer.LayoutTransform">
            <summary>
            Gets or sets the layout transform to apply on the LayoutTransformer 
            control content.
            </summary>
            <remarks>
            Corresponds to UIElement.LayoutTransform.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer.LayoutTransformProperty">
            <summary>
            Identifies the LayoutTransform DependencyProperty.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LayoutTransformer.Child">
            <summary>
            Gets the child element being transformed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer.AcceptableDelta">
            <summary>
            Acceptable difference between two doubles.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer.DecimalsAfterRound">
            <summary>
            Number of decimals to round the Matrix to.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer._transformRoot">
            <summary>
            Root element for performing transformations.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer._contentPresenter">
            <summary>
            ContentPresenter element for displaying the content.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer._matrixTransform">
            <summary>
            RenderTransform/MatrixTransform applied to _transformRoot.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer._transformation">
            <summary>
            Transformation matrix corresponding to _matrixTransform.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer._childActualSize">
            <summary>
            Actual DesiredSize of Child element (the value it returned from its MeasureOverride method).
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.#ctor">
            <summary>
            Initializes a new instance of the LayoutTransformer class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.OnApplyTemplate">
            <summary>
            Builds the visual tree for the LayoutTransformer control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.LayoutTransformChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Transform DependencyProperty.
            </summary>
            <param name="o">Source of the change.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.ApplyLayoutTransform">
            <summary>
            Applies the layout transform on the LayoutTransformer control content.
            </summary>
            <remarks>
            Only used in advanced scenarios (like animating the LayoutTransform). 
            Should be used to notify the LayoutTransformer control that some aspect 
            of its Transform property has changed. 
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.ProcessTransform(System.Windows.Media.Transform)">
            <summary>
            Processes the Transform to determine the corresponding Matrix.
            </summary>
            <param name="transform">Transform to process.</param>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.GetTransformMatrix(System.Windows.Media.Transform)">
            <summary>
            Walks the Transform(Group) and returns the corresponding Matrix.
            </summary>
            <param name="transform">Transform(Group) to walk.</param>
            <returns>Computed Matrix.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Measure" pass of layout.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
            <remarks>
            Using the WPF paramater name finalSize instead of Silverlight's finalSize for clarity
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.ComputeLargestTransformedSize(System.Windows.Size)">
            <summary>
            Compute the largest usable size (greatest area) after applying the transformation to the specified bounds.
            </summary>
            <param name="arrangeBounds">Arrange bounds.</param>
            <returns>Largest Size possible.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.IsSizeSmaller(System.Windows.Size,System.Windows.Size)">
            <summary>
            Returns true if Size a is smaller than Size b in either dimension.
            </summary>
            <param name="a">Second Size.</param>
            <param name="b">First Size.</param>
            <returns>True if Size a is smaller than Size b in either dimension.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.RoundMatrix(System.Windows.Media.Matrix,System.Int32)">
            <summary>
            Rounds the non-offset elements of a Matrix to avoid issues due to floating point imprecision.
            </summary>
            <param name="matrix">Matrix to round.</param>
            <param name="decimals">Number of decimal places to round to.</param>
            <returns>Rounded Matrix.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.RectTransform(System.Windows.Rect,System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Rect.Transform on Silverlight.
            </summary>
            <param name="rect">Rect to transform.</param>
            <param name="matrix">Matrix to transform with.</param>
            <returns>Bounding box of transformed Rect.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.MatrixMultiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Matrix.Multiply on Silverlight.
            </summary>
            <param name="matrix1">First matrix.</param>
            <param name="matrix2">Second matrix.</param>
            <returns>Multiplication result.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.MatrixHasInverse(System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Matrix.HasInverse on Silverlight.
            </summary>
            <param name="matrix">Matrix to check for inverse.</param>
            <returns>True if the Matrix has an inverse.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.DiagnosticWriteLine(System.String)">
            <summary>
            Outputs diagnostic info if DIAGNOSTICWRITELINE is defined.
            </summary>
            <param name="message">Diagnostic message.</param>
        </member>
        <member name="F:System.Windows.Media.Imaging.ReadWriteMode.ReadOnly">
            <summary>
            On Dispose of a BitmapContext, do not Invalidate
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.ReadWriteMode.ReadWrite">
            <summary>
            On Dispose of a BitmapContext, invalidate the bitmap
            </summary>
        </member>
        <member name="T:System.Windows.Media.Imaging.BitmapContext">
            <summary>
            A disposable cross-platform wrapper around a WriteableBitmap, allowing a common API for Silverlight &quot; WPF with locking &quot; unlocking if necessary
            </summary>
            <remarks>Attempting to put as many preprocessor hacks in this file, to keep the rest of the codebase relatively clean</remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.#ctor(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Creates an instance of a BitmapContext, with default mode = ReadWrite
            </summary>
            <param name="writeableBitmap"></param>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.#ctor(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Media.Imaging.ReadWriteMode)">
            <summary>
            Creates an instance of a BitmapContext, with specified ReadWriteMode
            </summary>
            <param name="writeableBitmap"></param>
            <param name="mode"></param>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.BlockCopy(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32)">
            <summary>
            Performs a Copy operation from source Bto destination BitmapContext
            </summary>
            <remarks>Equivalent to calling Buffer.BlockCopy in Silverlight, or native memcpy in WPF</remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.BlockCopy(System.Int32[],System.Int32,System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32)">
            <summary>
            Performs a Copy operation from source Array to destination BitmapContext
            </summary>
            <remarks>Equivalent to calling Buffer.BlockCopy in Silverlight, or native memcpy in WPF</remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.BlockCopy(System.Byte[],System.Int32,System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32)">
            <summary>
            Performs a Copy operation from source Array to destination BitmapContext
            </summary>
            <remarks>Equivalent to calling Buffer.BlockCopy in Silverlight, or native memcpy in WPF</remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.BlockCopy(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Performs a Copy operation from source BitmapContext to destination Array
            </summary>
            <remarks>Equivalent to calling Buffer.BlockCopy in Silverlight, or native memcpy in WPF</remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.BlockCopy(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Performs a Copy operation from source BitmapContext to destination Array
            </summary>
            <remarks>Equivalent to calling Buffer.BlockCopy in Silverlight, or native memcpy in WPF</remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.Clear">
            <summary>
            Clears the BitmapContext, filling the underlying bitmap with zeros
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.Dispose">
            <summary>
            Disposes the BitmapContext, unlocking it and invalidating if WPF
            </summary>
        </member>
        <member name="T:System.Windows.Media.Imaging.BitmapFactory">
            <summary>
            Cross-platform factory for WriteableBitmaps
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapFactory.New(System.Int32,System.Int32)">
            <summary>
            Creates a new WriteableBitmap of the specified width and height
            </summary>
            <remarks>For WPF the default DPI is 96x96 and PixelFormat is BGRA32</remarks>
            <param name="pixelWidth"></param>
            <param name="pixelHeight"></param>
            <returns></returns>
        </member>
        <member name="T:System.Windows.Media.Imaging.WriteableBitmapExtensions">
            <summary>
            Collection of draw extension methods for the Silverlight WriteableBitmap class.
            </summary>
            <summary>
            Collection of draw extension methods for the Silverlight WriteableBitmap class.
            </summary>
            <summary>
            Collection of blit (copy) extension methods for the Silverlight WriteableBitmap class.
            </summary>
            <summary>
            Collection of interchange extension methods for the Silverlight WriteableBitmap class.
            </summary>
            <summary>
            Collection of draw extension methods for the Silverlight WriteableBitmap class.
            </summary>
            <summary>
            Collection of filter / convolution extension methods for the Silverlight WriteableBitmap class.
            </summary>
            <summary>
            Collection of draw extension methods for the Silverlight WriteableBitmap class.
            </summary>
            <summary>
            Collection of draw spline extension methods for the Silverlight WriteableBitmap class.
            </summary>
            <summary>
            Collection of transformation extension methods for the Silverlight WriteableBitmap class.
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Clear(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Media.Color)">
            <summary>
            Fills the whole WriteableBitmap with a color.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="color">The color used for filling.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Clear(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Fills the whole WriteableBitmap with an empty color (0).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Clone(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Clones the specified WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <returns>A copy of the WriteableBitmap.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ForEach(System.Windows.Media.Imaging.WriteableBitmap,System.Func{System.Int32,System.Int32,System.Windows.Media.Color})">
            <summary>
            Applies the given function to all the pixels of the bitmap in 
            order to set their color.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="func">The function to apply. With parameters x, y and a color as a result</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ForEach(System.Windows.Media.Imaging.WriteableBitmap,System.Func{System.Int32,System.Int32,System.Windows.Media.Color,System.Windows.Media.Color})">
            <summary>
            Applies the given function to all the pixels of the bitmap in 
            order to set their color.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="func">The function to apply. With parameters x, y, source color and a color as a result</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.GetPixeli(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel at the x, y coordinate as integer.  
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>The color of the pixel at x, y.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.GetPixel(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel at the x, y coordinate as a Color struct.  
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>The color of the pixel at x, y as a Color struct.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.GetBrightness(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32)">
            <summary>
            Gets the brightness / luminance of the pixel at the x, y coordinate as byte.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>The brightness of the pixel at x, y.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixeli(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color of the pixel using a precalculated index (faster). 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="index">The coordinate index.</param>
            <param name="r">The red value of the color.</param>
            <param name="g">The green value of the color.</param>
            <param name="b">The blue value of the color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixel(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color of the pixel. 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate (row).</param>
            <param name="y">The y coordinate (column).</param>
            <param name="r">The red value of the color.</param>
            <param name="g">The green value of the color.</param>
            <param name="b">The blue value of the color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixeli(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color of the pixel including the alpha value and using a precalculated index (faster). 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="index">The coordinate index.</param>
            <param name="a">The alpha value of the color.</param>
            <param name="r">The red value of the color.</param>
            <param name="g">The green value of the color.</param>
            <param name="b">The blue value of the color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixel(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color of the pixel including the alpha value. 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate (row).</param>
            <param name="y">The y coordinate (column).</param>
            <param name="a">The alpha value of the color.</param>
            <param name="r">The red value of the color.</param>
            <param name="g">The green value of the color.</param>
            <param name="b">The blue value of the color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixeli(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Windows.Media.Color)">
            <summary>
            Sets the color of the pixel using a precalculated index (faster). 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="index">The coordinate index.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixel(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Sets the color of the pixel. 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate (row).</param>
            <param name="y">The y coordinate (column).</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixeli(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Byte,System.Windows.Media.Color)">
            <summary>
            Sets the color of the pixel using an extra alpha value and a precalculated index (faster). 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="index">The coordinate index.</param>
            <param name="a">The alpha value of the color.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixel(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Byte,System.Windows.Media.Color)">
            <summary>
            Sets the color of the pixel using an extra alpha value. 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate (row).</param>
            <param name="y">The y coordinate (column).</param>
            <param name="a">The alpha value of the color.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixeli(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32)">
            <summary>
            Sets the color of the pixel using a precalculated index (faster).  
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="index">The coordinate index.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixel(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the color of the pixel. 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate (row).</param>
            <param name="y">The y coordinate (column).</param>
            <param name="color">The color.</param>
        </member>
        <member name="T:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode">
            <summary>
            The blending mode.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.Alpha">
            <summary>
            Alpha blendiing uses the alpha channel to combine the source and destination. 
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.Additive">
            <summary>
            Additive blending adds the colors of the source and the destination.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.Subtractive">
            <summary>
            Subtractive blending subtracts the source color from the destination.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.Mask">
            <summary>
            Uses the source color as a mask.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.Multiply">
            <summary>
            Multiplies the source color with the destination color.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.ColorKeying">
            <summary>
            Ignores the specified Color
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.None">
            <summary>
            No blending just copies the pixels from the source.
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Blit(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect,System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect,System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            Copies (blits) the pixels from the WriteableBitmap source to the destination WriteableBitmap (this).
            </summary>
            <param name="bmp">The destination WriteableBitmap.</param>
            <param name="destRect">The rectangle that defines the destination region.</param>
            <param name="source">The source WriteableBitmap.</param>
            <param name="sourceRect">The rectangle that will be copied from the source to the destination.</param>
            <param name="BlendMode">The blending mode <see cref="T:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode"/>.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Blit(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect,System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect)">
            <summary>
            Copies (blits) the pixels from the WriteableBitmap source to the destination WriteableBitmap (this).
            </summary>
            <param name="bmp">The destination WriteableBitmap.</param>
            <param name="destRect">The rectangle that defines the destination region.</param>
            <param name="source">The source WriteableBitmap.</param>
            <param name="sourceRect">The rectangle that will be copied from the source to the destination.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Blit(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Point,System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect,System.Windows.Media.Color,System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            Copies (blits) the pixels from the WriteableBitmap source to the destination WriteableBitmap (this).
            </summary>
            <param name="bmp">The destination WriteableBitmap.</param>
            <param name="destPosition">The destination position in the destination bitmap.</param>
            <param name="source">The source WriteableBitmap.</param>
            <param name="sourceRect">The rectangle that will be copied from the source to the destination.</param>
            <param name="color">If not Colors.White, will tint the source image. A partially transparent color and the image will be drawn partially transparent.</param>
            <param name="BlendMode">The blending mode <see cref="T:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode"/>.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Blit(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect,System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect,System.Windows.Media.Color,System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            Copies (blits) the pixels from the WriteableBitmap source to the destination WriteableBitmap (this).
            </summary>
            <param name="bmp">The destination WriteableBitmap.</param>
            <param name="destRect">The rectangle that defines the destination region.</param>
            <param name="source">The source WriteableBitmap.</param>
            <param name="sourceRect">The rectangle that will be copied from the source to the destination.</param>
            <param name="color">If not Colors.White, will tint the source image. A partially transparent color and the image will be drawn partially transparent. If the BlendMode is ColorKeying, this color will be used as color key to mask all pixels with this value out.</param>
            <param name="BlendMode">The blending mode <see cref="T:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode"/>.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ToByteArray(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32)">
            <summary>
            Copies the Pixels from the WriteableBitmap into a ARGB byte array starting at a specific Pixels index.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="offset">The starting Pixels index.</param>
            <param name="count">The number of Pixels to copy, -1 for all</param>
            <returns>The color buffer as byte ARGB values.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ToByteArray(System.Windows.Media.Imaging.WriteableBitmap,System.Int32)">
            <summary>
            Copies the Pixels from the WriteableBitmap into a ARGB byte array.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="count">The number of pixels to copy.</param>
            <returns>The color buffer as byte ARGB values.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ToByteArray(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Copies all the Pixels from the WriteableBitmap into a ARGB byte array.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <returns>The color buffer as byte ARGB values.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FromByteArray(System.Windows.Media.Imaging.WriteableBitmap,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies color information from an ARGB byte array into this WriteableBitmap starting at a specific buffer index.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="offset">The starting index in the buffer.</param>
            <param name="count">The number of bytes to copy from the buffer.</param>
            <param name="buffer">The color buffer as byte ARGB values.</param>
            <returns>The WriteableBitmap that was passed as parameter.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FromByteArray(System.Windows.Media.Imaging.WriteableBitmap,System.Byte[],System.Int32)">
            <summary>
            Copies color information from an ARGB byte array into this WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="count">The number of bytes to copy from the buffer.</param>
            <param name="buffer">The color buffer as byte ARGB values.</param>
            <returns>The WriteableBitmap that was passed as parameter.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FromByteArray(System.Windows.Media.Imaging.WriteableBitmap,System.Byte[])">
            <summary>
            Copies all the color information from an ARGB byte array into this WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="buffer">The color buffer as byte ARGB values.</param>
            <returns>The WriteableBitmap that was passed as parameter.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.WriteTga(System.Windows.Media.Imaging.WriteableBitmap,System.IO.Stream)">
            <summary>
            Writes the WriteableBitmap as a TGA image to a stream. 
            Used with permission from Nokola: http://nokola.com/blog/post/2010/01/21/Quick-and-Dirty-Output-of-WriteableBitmap-as-TGA-Image.aspx
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="destination">The destination stream.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FromResource(System.Windows.Media.Imaging.WriteableBitmap,System.String)">
            <summary>
            Loads an image from the applications resource file and fills this WriteableBitmap with it.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="relativePath">Only the relative path to the resource file. The assembly name is retrieved automatically.</param>
            <returns>The WriteableBitmap that was passed as parameter.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FromContent(System.Windows.Media.Imaging.WriteableBitmap,System.String)">
            <summary>
            Loads an image from the applications content and fills this WriteableBitmap with it.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="relativePath">Only the relative path to the content file.</param>
            <returns>The WriteableBitmap that was passed as parameter.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillRectangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a filled rectangle.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillRectangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            Draws a filled rectangle.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color.</param>
            <param name="blendMode">The blend mode.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillRectangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Int32},System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            Draws a filled rectangle.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="colorCb">The color.</param>
            <param name="blendMode">The blend mode.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillEllipse(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing filled ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillEllipse(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing filled ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillEllipseCentered(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing filled ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillEllipseCentered(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing filled ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillPolygon(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Windows.Media.Color)">
            <summary>
            Draws a filled polygon. Add the first point also at the end of the array if the line should be closed.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points of the polygon in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, ..., xn, yn).</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillPolygon(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Int32,System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            Draws a filled polygon. Add the first point also at the end of the array if the line should be closed.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points of the polygon in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, ..., xn, yn).</param>
            <param name="color">The color for the line.</param>
            <param name="blendMode">The blend mode. Default is Alpha</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillPolygon(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Func{System.Int32,System.Int32,System.Int32},System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            Draws a filled polygon. Add the first point also at the end of the array if the line should be closed.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points of the polygon in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, ..., xn, yn).</param>
            <param name="colorCb">The color for the fill.</param>
            <param name="blendMode">The blend mode. Default is Alpha</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillQuad(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a filled quad.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="x4">The x-coordinate of the 4th point.</param>
            <param name="y4">The y-coordinate of the 4th point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillQuad(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a filled quad.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="x4">The x-coordinate of the 4th point.</param>
            <param name="y4">The y-coordinate of the 4th point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillTriangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a filled triangle.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillTriangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a filled triangle.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ComputeBezierPoints(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32)">
            <summary>
            Draws a filled, cubic Beziér spline defined by start, end and two control points.
            </summary>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="cx1">The x-coordinate of the 1st control point.</param>
            <param name="cy1">The y-coordinate of the 1st control point.</param>
            <param name="cx2">The x-coordinate of the 2nd control point.</param>
            <param name="cy2">The y-coordinate of the 2nd control point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color.</param>
            <param name="context">The bitmap context.</param>
            <param name="w">The width of the bitmap.</param>
            <param name="h">The height of the bitmap.</param> 
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillBeziers(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Windows.Media.Color)">
            <summary>
            Draws a series of filled, cubic Beziér splines each defined by start, end and two control points. 
            The ending point of the previous curve is used as starting point for the next. 
            Therfore the inital curve needs four points and the subsequent 3 (2 control and 1 end point).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, cx1, cy1, cx2, cy2, x2, y2, cx3, cx4 ..., xn, yn).</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillBeziers(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Int32)">
            <summary>
            Draws a series of filled, cubic Beziér splines each defined by start, end and two control points. 
            The ending point of the previous curve is used as starting point for the next. 
            Therfore the inital curve needs four points and the subsequent 3 (2 control and 1 end point).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, cx1, cy1, cx2, cy2, x2, y2, cx3, cx4 ..., xn, yn).</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ComputeSegmentPoints(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32)">
            <summary>
            Computes the discrete segment points of a Cardinal spline (cubic) defined by four control points.
            </summary>
            <param name="x1">The x-coordinate of the 1st control point.</param>
            <param name="y1">The y-coordinate of the 1st control point.</param>
            <param name="x2">The x-coordinate of the 2nd control point.</param>
            <param name="y2">The y-coordinate of the 2nd control point.</param>
            <param name="x3">The x-coordinate of the 3rd control point.</param>
            <param name="y3">The y-coordinate of the 3rd control point.</param>
            <param name="x4">The x-coordinate of the 4th control point.</param>
            <param name="y4">The y-coordinate of the 4th control point.</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color.</param>
            <param name="context">The context containing the pixels array.</param>
            <param name="w">The width of the bitmap.</param>
            <param name="h">The height of the bitmap.</param> 
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillCurve(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Windows.Media.Color)">
            <summary>
            Draws a filled Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillCurve(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Int32)">
            <summary>
            Draws a filled Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillCurveClosed(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Windows.Media.Color)">
            <summary>
            Draws a filled, closed Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillCurveClosed(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Int32)">
            <summary>
            Draws a filled, closed Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.KernelGaussianBlur5x5">
            <summary>
             Gaussian blur kernel with the size 5x5
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.KernelGaussianBlur3x3">
            <summary>
             Gaussian blur kernel with the size 3x3
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.KernelSharpen3x3">
            <summary>
             Sharpen kernel with the size 3x3
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Convolute(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[0:,0:])">
            <summary>
            Creates a new filtered WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="kernel">The kernel used for convolution.</param>
            <returns>A new WriteableBitmap that is a filtered version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Convolute(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Creates a new filtered WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="kernel">The kernel used for convolution.</param>
            <param name="kernelFactorSum">The factor used for the kernel summing.</param>
            <param name="kernelOffsetSum">The offset used for the kernel summing.</param>
            <returns>A new WriteableBitmap that is a filtered version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Invert(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Creates a new inverted WriteableBitmap and returns it.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <returns>The new inverted WriteableBitmap.</returns>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.INSIDE">
            <summary>
            Bitfields used to partition the space into 9 regiond
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ComputeOutCode(System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Compute the bit code for a point (x, y) using the clip rectangle
            bounded diagonally by (xmin, ymin), and (xmax, ymax)
            ASSUME THAT xmax , xmin , ymax and ymin are global constants.
            </summary>
            <param name="extents">The extents.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.CohenSutherlandLineClip(System.Windows.Rect,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Cohen–Sutherland clipping algorithm clips a line from
            P0 = (x0, y0) to P1 = (x1, y1) against a rectangle with 
            diagonal from (xmin, ymin) to (xmax, ymax).
            </summary>
            <remarks>See http://en.wikipedia.org/wiki/Cohen%E2%80%93Sutherland_algorithm for details</remarks>
            <returns>a list of two points in the resulting clipped line, or zero</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.AlphaBlend(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Alpha blends 2 premultiplied colors with each other
            </summary>
            <param name="sa">Source alpha color component</param>
            <param name="sr">Premultiplied source red color component</param>
            <param name="sg">Premultiplied source green color component</param>
            <param name="sb">Premultiplied source blue color component</param>
            <param name="destPixel">Premultiplied destination color</param>
            <returns>Premultiplied blended color value</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawWuLine(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32,System.Int16,System.Int16,System.Int16,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an anti-aliased, alpha blended, colored line by connecting two points using Wu's antialiasing algorithm
            Uses the pixels array and the width directly for best performance.
            </summary>
            <param name="context">An array containing the pixels as int RGBA value.</param>
            <param name="pixelWidth">The width of one scanline in the pixels array.</param>
            <param name="pixelHeight">The height of the bitmap.</param>
            <param name="X0">The x0.</param>
            <param name="Y0">The y0.</param>
            <param name="X1">The x1.</param>
            <param name="Y1">The y1.</param>
            <param name="sa">Alpha color component</param>
            <param name="sr">Premultiplied red color component</param>
            <param name="sg">Premultiplied green color component</param>
            <param name="sb">Premultiplied blue color component</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineBresenham(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a colored line by connecting two points using the Bresenham algorithm.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineBresenham(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a colored line by connecting two points using the Bresenham algorithm.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineDDA(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a colored line by connecting two points using a DDA algorithm (Digital Differential Analyzer).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineDDA(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a colored line by connecting two points using a DDA algorithm (Digital Differential Analyzer).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLine(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a colored line by connecting two points using an optimized DDA.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLine(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a colored line by connecting two points using an optimized DDA.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLine(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a colored line by connecting two points using an optimized DDA. 
            Uses the pixels array and the width directly for best performance.
            </summary>
            <param name="context">A context containing the pixels as int RGBA value.</param>
            <param name="pixelWidth">The width of one scanline in the pixels array.</param>
            <param name="pixelHeight">The height of the bitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineAa(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary> 
            Draws an anti-aliased line, using an optimized version of Gupta-Sproull algorithm 
            From http://nokola.com/blog/post/2010/10/14/Anti-aliased-Lines-And-Optimizing-Code-for-Windows-Phone-7e28093First-Look.aspx
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
            </summary> 
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineAa(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> 
            Draws an anti-aliased line, using an optimized version of Gupta-Sproull algorithm 
            From http://nokola.com/blog/post/2010/10/14/Anti-aliased-Lines-And-Optimizing-Code-for-Windows-Phone-7e28093First-Look.aspx
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
            </summary> 
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineAa(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary> 
            Draws an anti-aliased line, using an optimized version of Gupta-Sproull algorithm 
            From http://nokola.com/blog/post/2010/10/14/Anti-aliased-Lines-And-Optimizing-Code-for-Windows-Phone-7e28093First-Look.aspx
            <param name="context">A context containing the pixels as int RGBA value.</param>
            <param name="pixelWidth">The width of one scanline in the pixels array.</param>
            <param name="pixelHeight">The height of the bitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
            </summary> 
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.AlphaBlendNormalOnPremultiplied(System.Int32*,System.Int32,System.Int32,System.UInt32,System.UInt32)">
            <summary> 
            Blends a specific source color on top of a destination premultiplied color 
            </summary> 
            <param name="pixels">pixels array</param> 
            <param name="index">Index of destination pixel</param> 
            <param name="sa">Source alpha (0..255)</param> 
            <param name="srb">Source non-premultiplied red and blue component in the format 0x00rr00bb</param> 
            <param name="sg">Source green component (0..255)</param> 
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawPolyline(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Windows.Media.Color)">
            <summary>
            Draws a polyline. Add the first point also at the end of the array if the line should be closed.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points of the polyline in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, ..., xn, yn).</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawPolyline(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Int32)">
            <summary>
            Draws a polyline. Add the first point also at the end of the array if the line should be closed.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points of the polyline in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, ..., xn, yn).</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawTriangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a triangle.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawTriangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a triangle.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawQuad(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a quad.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="x4">The x-coordinate of the 4th point.</param>
            <param name="y4">The y-coordinate of the 4th point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawQuad(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a quad.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="x4">The x-coordinate of the 4th point.</param>
            <param name="y4">The y-coordinate of the 4th point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawRectangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a rectangle.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawRectangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawEllipse(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing Ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color for the line.</param>
            <param name="thickness">The thickness for the line</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawEllipseCentered(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing Ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawEllipseCentered(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing Ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawBezier(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a cubic Beziér spline defined by start, end and two control points.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="cx1">The x-coordinate of the 1st control point.</param>
            <param name="cy1">The y-coordinate of the 1st control point.</param>
            <param name="cx2">The x-coordinate of the 2nd control point.</param>
            <param name="cy2">The y-coordinate of the 2nd control point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawBezier(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a cubic Beziér spline defined by start, end and two control points.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="cx1">The x-coordinate of the 1st control point.</param>
            <param name="cy1">The y-coordinate of the 1st control point.</param>
            <param name="cx2">The x-coordinate of the 2nd control point.</param>
            <param name="cy2">The y-coordinate of the 2nd control point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawBeziers(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Windows.Media.Color)">
            <summary>
            Draws a series of cubic Beziér splines each defined by start, end and two control points. 
            The ending point of the previous curve is used as starting point for the next. 
            Therfore the inital curve needs four points and the subsequent 3 (2 control and 1 end point).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, cx1, cy1, cx2, cy2, x2, y2, cx3, cx4 ..., xn, yn).</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawBeziers(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Int32)">
            <summary>
            Draws a series of cubic Beziér splines each defined by start, end and two control points. 
            The ending point of the previous curve is used as starting point for the next. 
            Therfore the inital curve needs four points and the subsequent 3 (2 control and 1 end point).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, cx1, cy1, cx2, cy2, x2, y2, cx3, cx4 ..., xn, yn).</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawCurveSegment(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32)">
            <summary>
            Draws a segment of a Cardinal spline (cubic) defined by four control points.
            </summary>
            <param name="x1">The x-coordinate of the 1st control point.</param>
            <param name="y1">The y-coordinate of the 1st control point.</param>
            <param name="x2">The x-coordinate of the 2nd control point.</param>
            <param name="y2">The y-coordinate of the 2nd control point.</param>
            <param name="x3">The x-coordinate of the 3rd control point.</param>
            <param name="y3">The y-coordinate of the 3rd control point.</param>
            <param name="x4">The x-coordinate of the 4th control point.</param>
            <param name="y4">The y-coordinate of the 4th control point.</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color.</param>
            <param name="context">The context containing the pixels array.</param>
            <param name="w">The width of the bitmap.</param>
            <param name="h">The height of the bitmap.</param> 
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawCurve(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Windows.Media.Color)">
            <summary>
            Draws a Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawCurve(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Int32)">
            <summary>
            Draws a Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawCurveClosed(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Windows.Media.Color)">
            <summary>
            Draws a closed Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawCurveClosed(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Int32)">
            <summary>
            Draws a closed Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="T:System.Windows.Media.Imaging.WriteableBitmapExtensions.Interpolation">
            <summary>
            The interpolation method.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.Interpolation.NearestNeighbor">
            <summary>
            The nearest neighbor algorithm simply selects the color of the nearest pixel.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.Interpolation.Bilinear">
            <summary>
            Linear interpolation in 2D using the average of 3 neighboring pixels.
            </summary>
        </member>
        <member name="T:System.Windows.Media.Imaging.WriteableBitmapExtensions.FlipMode">
            <summary>
            The mode for flipping.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.FlipMode.Vertical">
            <summary>
            Flips the image vertical (around the center of the y-axis).
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.FlipMode.Horizontal">
            <summary>
            Flips the image horizontal (around the center of the x-axis).
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Resize(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Windows.Media.Imaging.WriteableBitmapExtensions.Interpolation)">
            <summary>
            Creates a new resized WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="width">The new desired width.</param>
            <param name="height">The new desired height.</param>
            <param name="interpolation">The interpolation method that should be used.</param>
            <returns>A new WriteableBitmap that is a resized version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Resize(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Imaging.WriteableBitmapExtensions.Interpolation)">
            <summary>
            Creates a new resized bitmap.
            </summary>
            <param name="srcContext">The source context.</param>
            <param name="widthSource">The width of the source pixels.</param>
            <param name="heightSource">The height of the source pixels.</param>
            <param name="width">The new desired width.</param>
            <param name="height">The new desired height.</param>
            <param name="interpolation">The interpolation method that should be used.</param>
            <returns>A new bitmap that is a resized version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Rotate(System.Windows.Media.Imaging.WriteableBitmap,System.Int32)">
            <summary>
            Rotates the bitmap in 90° steps clockwise and returns a new rotated WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="angle">The angle in degress the bitmap should be rotated in 90° steps clockwise.</param>
            <returns>A new WriteableBitmap that is a rotated version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.RotateFree(System.Windows.Media.Imaging.WriteableBitmap,System.Double,System.Boolean)">
            <summary>
            Rotates the bitmap in any degree returns a new rotated WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="angle">Arbitrary angle in 360 Degrees (positive = clockwise).</param>
            <param name="crop">if true: keep the size, false: adjust canvas to new size</param>
            <returns>A new WriteableBitmap that is a rotated version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Flip(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Media.Imaging.WriteableBitmapExtensions.FlipMode)">
            <summary>
            Flips (reflects the image) eiter vertical or horizontal.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="flipMode">The flip mode.</param>
            <returns>A new WriteableBitmap that is a flipped version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapContextExtensions.GetBitmapContext(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Gets a BitmapContext within which to perform nested IO operations on the bitmap
            </summary>
            <remarks>For WPF the BitmapContext will lock the bitmap. Call Dispose on the context to unlock</remarks>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapContextExtensions.GetBitmapContext(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Media.Imaging.ReadWriteMode)">
            <summary>
            Gets a BitmapContext within which to perform nested IO operations on the bitmap
            </summary>
            <remarks>For WPF the BitmapContext will lock the bitmap. Call Dispose on the context to unlock</remarks>
            <param name="bmp">The writeable bitmap to get a context for</param>
            <param name="mode">The ReadWriteMode. If set to ReadOnly, the bitmap will not be invalidated on dispose of the context, else it will</param>
            <returns></returns>
        </member>
        <member name="T:TinyMessenger.ITinyMessage">
            <summary>
            A TinyMessage to be published/delivered by TinyMessenger
            </summary>
        </member>
        <member name="P:TinyMessenger.ITinyMessage.Sender">
            <summary>
            The sender of the message, or null if not supported by the message implementation.
            </summary>
        </member>
        <member name="T:TinyMessenger.TinyMessageBase">
            <summary>
            Base class for messages that provides weak refrence storage of the sender
            </summary>
        </member>
        <member name="F:TinyMessenger.TinyMessageBase._Sender">
            <summary>
            Store a WeakReference to the sender just in case anyone is daft enough to
            keep the message around and prevent the sender from being collected.
            </summary>
        </member>
        <member name="P:TinyMessenger.TinyMessageBase.Sender">
            <summary>
            The sender of the message, or null if not supported by the message implementation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessageBase.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the MessageBase class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
        </member>
        <member name="T:TinyMessenger.GenericTinyMessage`1">
            <summary>
            Generic message with user specified content
            </summary>
            <typeparam name="TContent">Content type to store</typeparam>
        </member>
        <member name="P:TinyMessenger.GenericTinyMessage`1.Content">
            <summary>
            Contents of the message
            </summary>
        </member>
        <member name="M:TinyMessenger.GenericTinyMessage`1.#ctor(System.Object,`0)">
            <summary>
            Create a new instance of the GenericTinyMessage class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
            <param name="content">Contents of the message</param>
        </member>
        <member name="T:TinyMessenger.CancellableGenericTinyMessage`1">
            <summary>
            Basic "cancellable" generic message
            </summary>
            <typeparam name="TContent">Content type to store</typeparam>
        </member>
        <member name="P:TinyMessenger.CancellableGenericTinyMessage`1.Cancel">
            <summary>
            Cancel action
            </summary>
        </member>
        <member name="P:TinyMessenger.CancellableGenericTinyMessage`1.Content">
            <summary>
            Contents of the message
            </summary>
        </member>
        <member name="M:TinyMessenger.CancellableGenericTinyMessage`1.#ctor(System.Object,`0,System.Action)">
            <summary>
            Create a new instance of the CancellableGenericTinyMessage class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
            <param name="content">Contents of the message</param>
            <param name="cancelAction">Action to call for cancellation</param>
        </member>
        <member name="T:TinyMessenger.TinyMessageSubscriptionToken">
            <summary>
            Represents an active subscription to a message
            </summary>
        </member>
        <member name="M:TinyMessenger.TinyMessageSubscriptionToken.#ctor(TinyMessenger.ITinyMessengerHub,System.Type)">
            <summary>
            Initializes a new instance of the TinyMessageSubscriptionToken class.
            </summary>
        </member>
        <member name="M:TinyMessenger.TinyMessageSubscriptionToken.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:TinyMessenger.ITinyMessageSubscription">
            <summary>
            Represents a message subscription
            </summary>
        </member>
        <member name="P:TinyMessenger.ITinyMessageSubscription.SubscriptionToken">
            <summary>
            Token returned to the subscribed to reference this subscription
            </summary>
        </member>
        <member name="M:TinyMessenger.ITinyMessageSubscription.ShouldAttemptDelivery(TinyMessenger.ITinyMessage)">
            <summary>
            Whether delivery should be attempted.
            </summary>
            <param name="message">Message that may potentially be delivered.</param>
            <returns>True - ok to send, False - should not attempt to send</returns>
        </member>
        <member name="M:TinyMessenger.ITinyMessageSubscription.Deliver(TinyMessenger.ITinyMessage)">
            <summary>
            Deliver the message
            </summary>
            <param name="message">Message to deliver</param>
        </member>
        <member name="T:TinyMessenger.ITinyMessageProxy">
            <summary>
            Message proxy definition.
            
            A message proxy can be used to intercept/alter messages and/or
            marshall delivery actions onto a particular thread.
            </summary>
        </member>
        <member name="M:TinyMessenger.ITinyMessageProxy.Deliver(TinyMessenger.ITinyMessage,TinyMessenger.ITinyMessageSubscription)">
            <summary>
            Delivers the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="subscription">The subscription.</param>
            <remarks></remarks>
        </member>
        <member name="T:TinyMessenger.DefaultTinyMessageProxy">
            <summary>
            Default "pass through" proxy.
            
            Does nothing other than deliver the message.
            </summary>
        </member>
        <member name="P:TinyMessenger.DefaultTinyMessageProxy.Instance">
            <summary>
            Singleton instance of the proxy.
            </summary>
        </member>
        <member name="M:TinyMessenger.DefaultTinyMessageProxy.Deliver(TinyMessenger.ITinyMessage,TinyMessenger.ITinyMessageSubscription)">
            <summary>
            Delivers the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="subscription">The subscription.</param>
            <remarks></remarks>
        </member>
        <member name="T:TinyMessenger.TinyMessengerSubscriptionException">
            <summary>
            Thrown when an exceptions occurs while subscribing to a message type
            </summary>
        </member>
        <member name="M:TinyMessenger.TinyMessengerSubscriptionException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TinyMessenger.TinyMessengerSubscriptionException"/> class.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="reason">The reason.</param>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessengerSubscriptionException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TinyMessenger.TinyMessengerSubscriptionException"/> class.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="reason">The reason.</param>
            <param name="innerException">The inner exception.</param>
            <remarks></remarks>
        </member>
        <member name="T:TinyMessenger.ITinyMessengerHub">
            <summary>
            Messenger hub responsible for taking subscriptions/publications and delivering of messages.
            </summary>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            All references are held with WeakReferences
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            Messages will be delivered via the specified proxy.
            All references (apart from the proxy) are held with WeakReferences
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},System.Boolean)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction </param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},System.Boolean,TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            Messages will be delivered via the specified proxy.
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction </param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            Messages will be delivered via the specified proxy.
            All references (apart from the proxy) are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},System.Boolean,TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            Messages will be delivered via the specified proxy.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Unsubscribe``1(TinyMessenger.TinyMessageSubscriptionToken)">
            <summary>
            Unsubscribe from a particular message type.
            
            Does not throw an exception if the subscription is not found.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="subscriptionToken">Subscription token received from Subscribe</param>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Publish``1(``0)">
            <summary>
            Publish a message to any subscribers
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.PublishAsync``1(``0)">
            <summary>
            Publish a message to any subscribers asynchronously
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.PublishAsync``1(``0,System.AsyncCallback)">
            <summary>
            Publish a message to any subscribers asynchronously
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
            <param name="callback">AsyncCallback called on completion</param>
        </member>
        <member name="T:TinyMessenger.TinyMessengerHub">
            <summary>
            Messenger hub responsible for taking subscriptions/publications and delivering of messages.
            </summary>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.WeakTinyMessageSubscription`1.#ctor(TinyMessenger.TinyMessageSubscriptionToken,System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the WeakTinyMessageSubscription class.
            </summary>
            <param name="subscriptionToken">The subscription token.</param>
            <param name="deliveryAction">The delivery action.</param>
            <param name="messageFilter">The message filter.</param>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.StrongTinyMessageSubscription`1.#ctor(TinyMessenger.TinyMessageSubscriptionToken,System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the TinyMessageSubscription class.
            </summary>
            <param name="subscriptionToken">The subscription token.</param>
            <param name="deliveryAction">The delivery action.</param>
            <param name="messageFilter">The message filter.</param>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            All references are held with strong references
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            Messages will be delivered via the specified proxy.
            All references (apart from the proxy) are held with strong references
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},System.Boolean)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction </param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},System.Boolean,TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            Messages will be delivered via the specified proxy.
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction </param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            Messages will be delivered via the specified proxy.
            All references (apart from the proxy) are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},System.Boolean,TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            Messages will be delivered via the specified proxy.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Unsubscribe``1(TinyMessenger.TinyMessageSubscriptionToken)">
            <summary>
            Unsubscribe from a particular message type.
            
            Does not throw an exception if the subscription is not found.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="subscriptionToken">Subscription token received from Subscribe</param>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Publish``1(``0)">
            <summary>
            Publish a message to any subscribers
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.PublishAsync``1(``0)">
            <summary>
            Publish a message to any subscribers asynchronously
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.PublishAsync``1(``0,System.AsyncCallback)">
            <summary>
            Publish a message to any subscribers asynchronously
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
            <param name="callback">AsyncCallback called on completion</param>
        </member>
        <member name="T:MatterHackers.Agg.BorderDouble">
            <summary>
            BorderDouble is used to represent the border around (Margin) on inside (Padding) of a rectangular area.
            </summary>
        </member>
        <member name="P:MatterHackers.Agg.Font.StyledTypeFace.FlatenCurves">
            <summary>
            <para>If true the font will have it's curves flattened to the current point size when retrieved.</para>
            <para>You may want to disable this so you can flaten the curve after other transforms have been applied,</para>
            <para>such as skewing or scalling.  Rotation and Translation will not alter how a curve is flattened.</para>
            </summary>
        </member>
        <member name="P:MatterHackers.Agg.Font.StyledTypeFace.EmSizeInPixels">
            <summary>
            Sets the Em size for the font in pixels.
            </summary>
        </member>
        <member name="P:MatterHackers.Agg.Font.StyledTypeFace.EmSizeInPoints">
            <summary>
            Sets the Em size for the font assuming there are 72 points per inch and there are 96 pixels per inch.
            </summary>
        </member>
        <member name="M:MatterHackers.Agg.Image.ImageBuffer.NewSubImageReference(MatterHackers.Agg.Image.IImageByte,MatterHackers.Agg.RectangleDouble)">
            <summary>
            This will create a new ImageBuffer that references the same memory as the image that you took the sub image from.
            It will modify the original main image when you draw to it.
            </summary>
            <param name="imageContainingSubImage"></param>
            <param name="subImageBounds"></param>
            <returns></returns>
        </member>
        <member name="M:MatterHackers.Agg.VertexSource.PathStorage.curve3(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a quadratic Bézier curve from the current point to (x,y) using (xControl,yControl) as the control point.
            </summary>
            <param name="xControl"></param>
            <param name="yControl"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:MatterHackers.Agg.VertexSource.PathStorage.curve3_rel(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a quadratic Bézier curve from the current point to (x,y) using (xControl,yControl) as the control point.
            </summary>
        </member>
        <member name="M:MatterHackers.Agg.VertexSource.PathStorage.curve3(System.Double,System.Double)">
            <summary>
            <para>Draws a quadratic Bézier curve from the current point to (x,y).</para>
            <para>The control point is assumed to be the reflection of the control point on the previous command relative to the current point.</para>
            <para>(If there is no previous command or if the previous command was not a curve, assume the control point is coincident with the current point.)</para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:MatterHackers.Agg.VertexSource.PathStorage.curve3_rel(System.Double,System.Double)">
            <summary>
            <para>Draws a quadratic Bézier curve from the current point to (x,y).</para>
            <para>The control point is assumed to be the reflection of the control point on the previous command relative to the current point.</para>
            <para>(If there is no previous command or if the previous command was not a curve, assume the control point is coincident with the current point.)</para>
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.AxisAlignedBoundingBox.GetIntersectCost">
            <summary>
            This is the computation cost of doing an intersection with the given type.
            Attempt to give it in average CPU cycles for the intersecton.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MatterHackers.VectorMath.MathHelper">
            <summary>
            Contains common mathematical functions and constants.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.MathHelper.Pi">
            <summary>
            Defines the value of Pi as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.MathHelper.PiOver2">
            <summary>
            Defines the value of Pi divided by two as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.MathHelper.PiOver3">
            <summary>
            Defines the value of Pi divided by three as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.MathHelper.PiOver4">
            <summary>
            Definesthe value of  Pi divided by four as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.MathHelper.PiOver6">
            <summary>
            Defines the value of Pi divided by six as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.MathHelper.TwoPi">
            <summary>
            Defines the value of Pi multiplied by two as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.MathHelper.ThreePiOver2">
            <summary>
            Defines the value of Pi multiplied by 3 and divided by two as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.MathHelper.E">
            <summary>
            Defines the value of E as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.MathHelper.Log10E">
            <summary>
            Defines the base-10 logarithm of E.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.MathHelper.Log2E">
            <summary>
            Defines the base-2 logarithm of E.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.MathHelper.NextPowerOfTwo(System.Int64)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.MathHelper.NextPowerOfTwo(System.Int32)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.MathHelper.NextPowerOfTwo(System.Single)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.MathHelper.NextPowerOfTwo(System.Double)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.MathHelper.Factorial(System.Int32)">
            <summary>Calculates the factorial of a given natural number.
            </summary>
            <param name="n">The number.</param>
            <returns>n!</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.MathHelper.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Calculates the binomial coefficient <paramref name="n"/> above <paramref name="k"/>.
            </summary>
            <param name="n">The n.</param>
            <param name="k">The k.</param>
            <returns>n! / (k! * (n - k)!)</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.MathHelper.InverseSqrtFast(System.Single)">
            <summary>
            Returns an approximation of the inverse square root of left number.
            </summary>
            <param name="x">A number.</param>
            <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
            <remarks>
            This is an improved implementation of the the method known as Carmack's inverse square root
            which is found in the Quake III source code. This implementation comes from
            http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see
            http://www.beyond3d.com/content/articles/8/
            </remarks>
        </member>
        <member name="M:MatterHackers.VectorMath.MathHelper.InverseSqrtFast(System.Double)">
            <summary>
            Returns an approximation of the inverse square root of left number.
            </summary>
            <param name="x">A number.</param>
            <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
            <remarks>
            This is an improved implementation of the the method known as Carmack's inverse square root
            which is found in the Quake III source code. This implementation comes from
            http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see
            http://www.beyond3d.com/content/articles/8/
            </remarks>
        </member>
        <member name="M:MatterHackers.VectorMath.MathHelper.DegreesToRadians(System.Double)">
            <summary>
            Convert degrees to radians
            </summary>
            <param name="degrees">An angle in degrees</param>
            <returns>The angle expressed in radians</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.MathHelper.RadiansToDegrees(System.Double)">
            <summary>
            Convert radians to degrees
            </summary>
            <param name="radians">An angle in radians</param>
            <returns>The angle expressed in degrees</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.MathHelper.Swap(System.Double@,System.Double@)">
            <summary>
            Swaps two double values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.MathHelper.Swap(System.Single@,System.Single@)">
            <summary>
            Swaps two float values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
        </member>
        <member name="T:MatterHackers.VectorMath.Matrix4X4">
            <summary>
            Represents a 4x4 Matrix with double-precision components.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Matrix4X4.Row0">
            <summary>
            Top row of the matrix
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Matrix4X4.Row1">
            <summary>
            2nd row of the matrix
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Matrix4X4.Row2">
            <summary>
            3rd row of the matrix
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Matrix4X4.Row3">
            <summary>
            Bottom row of the matrix
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Matrix4X4.Identity">
            <summary>
            The identity matrix
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.#ctor(MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="row0">Top row of the matrix</param>
            <param name="row1">Second row of the matrix</param>
            <param name="row2">Third row of the matrix</param>
            <param name="row3">Bottom row of the matrix</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="m00">First item of the first row.</param>
            <param name="m01">Second item of the first row.</param>
            <param name="m02">Third item of the first row.</param>
            <param name="m03">Fourth item of the first row.</param>
            <param name="m10">First item of the second row.</param>
            <param name="m11">Second item of the second row.</param>
            <param name="m12">Third item of the second row.</param>
            <param name="m13">Fourth item of the second row.</param>
            <param name="m20">First item of the third row.</param>
            <param name="m21">Second item of the third row.</param>
            <param name="m22">Third item of the third row.</param>
            <param name="m23">First item of the third row.</param>
            <param name="m30">Fourth item of the fourth row.</param>
            <param name="m31">Second item of the fourth row.</param>
            <param name="m32">Third item of the fourth row.</param>
            <param name="m33">Fourth item of the fourth row.</param>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.Determinant">
            <summary>
            The determinant of this matrix
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.Position">
            <summary>
            Get just the position out of the matrix.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.Column0">
            <summary>
            The first column of this matrix
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.Column1">
            <summary>
            The second column of this matrix
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.Column2">
            <summary>
            The third column of this matrix
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.Column3">
            <summary>
            The fourth column of this matrix
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.M11">
            <summary>
            Gets or sets the value at row 1, column 1 of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.M12">
            <summary>
            Gets or sets the value at row 1, column 2 of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.M13">
            <summary>
            Gets or sets the value at row 1, column 3 of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.M14">
            <summary>
            Gets or sets the value at row 1, column 4 of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.M21">
            <summary>
            Gets or sets the value at row 2, column 1 of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.M22">
            <summary>
            Gets or sets the value at row 2, column 2 of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.M23">
            <summary>
            Gets or sets the value at row 2, column 3 of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.M24">
            <summary>
            Gets or sets the value at row 2, column 4 of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.M31">
            <summary>
            Gets or sets the value at row 3, column 1 of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.M32">
            <summary>
            Gets or sets the value at row 3, column 2 of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.M33">
            <summary>
            Gets or sets the value at row 3, column 3 of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.M34">
            <summary>
            Gets or sets the value at row 3, column 4 of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.M41">
            <summary>
            Gets or sets the value at row 4, column 1 of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.M42">
            <summary>
            Gets or sets the value at row 4, column 2 of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.M43">
            <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Matrix4X4.M44">
            <summary>
            Gets or sets the value at row 4, column 4 of this instance.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.Invert">
            <summary>
            Converts this instance into its inverse.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.Transpose">
            <summary>
            Converts this instance into its transpose.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateFromAxisAngle(MatterHackers.VectorMath.Vector3,System.Double,MatterHackers.VectorMath.Matrix4X4@)">
            <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
            <param name="axis">The axis to rotate about.</param>
            <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
            <param name="result">A matrix instance.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateFromAxisAngle(MatterHackers.VectorMath.Vector3,System.Double)">
            <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
            <param name="axis">The axis to rotate about.</param>
            <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
            <returns>A matrix instance.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateRotationX(System.Double,MatterHackers.VectorMath.Matrix4X4@)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateRotationX(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateRotationY(System.Double,MatterHackers.VectorMath.Matrix4X4@)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateRotationY(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateRotationZ(System.Double,MatterHackers.VectorMath.Matrix4X4@)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateRotationZ(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateRotation(MatterHackers.VectorMath.Vector3,System.Double)">
            <summary>
            Build a rotation matrix to rotate about the given axis
            </summary>
            <param name="axis">the axis to rotate about</param>
            <param name="angle">angle in radians to rotate counter-clockwise (looking in the direction of the given axis)</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateRotation(MatterHackers.VectorMath.Quaternion)">
            <summary>
            Build a rotation matrix from a quaternion
            </summary>
            <param name="q">the quaternion</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateTranslation(System.Double,System.Double,System.Double,MatterHackers.VectorMath.Matrix4X4@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <param name="result">The resulting Matrix4d instance.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateTranslation(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Matrix4X4@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
            <param name="result">The resulting Matrix4d instance.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateTranslation(System.Double,System.Double,System.Double)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <returns>The resulting Matrix4d instance.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateTranslation(MatterHackers.VectorMath.Vector3)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
            <returns>The resulting Matrix4d instance.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateOrthographic(System.Double,System.Double,System.Double,System.Double,MatterHackers.VectorMath.Matrix4X4@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4d instance.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateOrthographic(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <rereturns>The resulting Matrix4d instance.</rereturns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateOrthographicOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,MatterHackers.VectorMath.Matrix4X4@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4d instance.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateOrthographicOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <returns>The resulting Matrix4d instance.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreatePerspectiveFieldOfView(System.Double,System.Double,System.Double,System.Double,MatterHackers.VectorMath.Matrix4X4@)">
            <summary>
            Creates a perspective projection matrix.
            </summary>
            <param name="fovYRadians">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspectWidthOverHeight">Aspect ratio of the view (width / height)</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <param name="result">A projection matrix that transforms camera space to raster space</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>fovy is zero, less than zero or larger than Math.PI</item>
            <item>aspect is negative or zero</item>
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreatePerspectiveFieldOfView(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a perspective projection matrix.
            </summary>
            <param name="fovYRadians">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspectWidthOverHeight">Aspect ratio of the view (width / height)</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>fovYRadians is zero, less than zero or larger than Math.PI</item>
            <item>aspect is negative or zero</item>
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreatePerspectiveOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,MatterHackers.VectorMath.Matrix4X4@)">
            <summary>
            Creates an perspective projection matrix.
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <param name="result">A projection matrix that transforms camera space to raster space</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreatePerspectiveOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an perspective projection matrix.
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateScale(System.Double)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Single scale factor for x,y and z axes</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateScale(MatterHackers.VectorMath.Vector3)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Scale factors for x,y and z axes</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.CreateScale(System.Double,System.Double,System.Double)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="x">Scale factor for x-axis</param>
            <param name="y">Scale factor for y-axis</param>
            <param name="z">Scale factor for z-axis</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.LookAt(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3)">
            <summary>
            Build a world space to camera space matrix
            </summary>
            <param name="eye">Eye (camera) position in world space</param>
            <param name="target">Target position in world space</param>
            <param name="up">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <returns>A Matrix that transforms world space to camera space</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.LookAt(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Build a world space to camera space matrix
            </summary>
            <param name="eyeX">Eye (camera) position in world space</param>
            <param name="eyeY">Eye (camera) position in world space</param>
            <param name="eyeZ">Eye (camera) position in world space</param>
            <param name="targetX">Target position in world space</param>
            <param name="targetY">Target position in world space</param>
            <param name="targetZ">Target position in world space</param>
            <param name="upX">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <param name="upY">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <param name="upZ">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <returns>A Matrix4 that transforms world space to camera space</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.Frustum(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Build a projection matrix
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.Perspective(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Build a projection matrix
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.Mult(MatterHackers.VectorMath.Matrix4X4,MatterHackers.VectorMath.Matrix4X4)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <returns>A new instance that is the result of the multiplication</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.Mult(MatterHackers.VectorMath.Matrix4X4@,MatterHackers.VectorMath.Matrix4X4@,MatterHackers.VectorMath.Matrix4X4@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <param name="result">A new instance that is the result of the multiplication</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.Invert(MatterHackers.VectorMath.Matrix4X4)">
            <summary>
            Calculate the inverse of the given matrix
            </summary>
            <param name="mat">The matrix to invert</param>
            <returns>The inverse of the given matrix if it has one, or the input if it is singular</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the Matrix4d is singular.</exception>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.Transpose(MatterHackers.VectorMath.Matrix4X4)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <returns>The transpose of the given matrix</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.Transpose(MatterHackers.VectorMath.Matrix4X4@,MatterHackers.VectorMath.Matrix4X4@)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <param name="result">The result of the calculation</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.op_Multiply(MatterHackers.VectorMath.Matrix4X4,MatterHackers.VectorMath.Matrix4X4)">
            <summary>
            Matrix multiplication
            </summary>
            <param name="left">left-hand operand</param>
            <param name="right">right-hand operand</param>
            <returns>A new Matrix44 which holds the result of the multiplication</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.op_Equality(MatterHackers.VectorMath.Matrix4X4,MatterHackers.VectorMath.Matrix4X4)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.op_Inequality(MatterHackers.VectorMath.Matrix4X4,MatterHackers.VectorMath.Matrix4X4)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equal right; false otherwise.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.ToString">
            <summary>
            Returns a System.String that represents the current Matrix44.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Matrix4X4.Equals(MatterHackers.VectorMath.Matrix4X4)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="other">An matrix to compare with this matrix.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="T:MatterHackers.VectorMath.Quaternion">
            <summary>
            Represents a double-precision Quaternion.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.#ctor(MatterHackers.VectorMath.Vector3,System.Double)">
            <summary>
            Construct a new Quaterniond from vector and w components
            </summary>
            <param name="v">The vector part</param>
            <param name="w">The w part</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a new Quaterniond
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
            <param name="z">The z component</param>
            <param name="w">The w component</param>
        </member>
        <member name="P:MatterHackers.VectorMath.Quaternion.Xyz">
            <summary>
            Gets or sets an OpenTK.Vector3d with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Quaternion.X">
            <summary>
            Gets or sets the X component of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Quaternion.Y">
            <summary>
            Gets or sets the Y component of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Quaternion.Z">
            <summary>
            Gets or sets the Z component of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Quaternion.W">
            <summary>
            Gets or sets the W component of this instance.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.ToAxisAngle(MatterHackers.VectorMath.Vector3@,System.Double@)">
            <summary>
            Convert the current quaternion to axis angle representation
            </summary>
            <param name="axis">The resultant axis</param>
            <param name="angle">The resultant angle</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.ToAxisAngle">
            <summary>
            Convert this instance to an axis-angle representation.
            </summary>
            <returns>A Vector4 that is the axis-angle representation of this quaternion.</returns>
        </member>
        <member name="P:MatterHackers.VectorMath.Quaternion.Length">
            <summary>
            Gets the length (magnitude) of the Quaterniond.
            </summary>
            <seealso cref="P:MatterHackers.VectorMath.Quaternion.LengthSquared"/>
        </member>
        <member name="P:MatterHackers.VectorMath.Quaternion.LengthSquared">
            <summary>
            Gets the square of the Quaterniond length (magnitude).
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Normalize">
            <summary>
            Scales the Quaterniond to unit length.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Conjugate">
            <summary>
            Convert this Quaterniond to its conjugate
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Quaternion.Identity">
            <summary>
            Defines the identity quaternion.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Add(MatterHackers.VectorMath.Quaternion,MatterHackers.VectorMath.Quaternion)">
            <summary>
            Add two quaternions
            </summary>
            <param name="left">The first operand</param>
            <param name="right">The second operand</param>
            <returns>The result of the addition</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Add(MatterHackers.VectorMath.Quaternion@,MatterHackers.VectorMath.Quaternion@,MatterHackers.VectorMath.Quaternion@)">
            <summary>
            Add two quaternions
            </summary>
            <param name="left">The first operand</param>
            <param name="right">The second operand</param>
            <param name="result">The result of the addition</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Sub(MatterHackers.VectorMath.Quaternion,MatterHackers.VectorMath.Quaternion)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Sub(MatterHackers.VectorMath.Quaternion@,MatterHackers.VectorMath.Quaternion@,MatterHackers.VectorMath.Quaternion@)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Mult(MatterHackers.VectorMath.Quaternion,MatterHackers.VectorMath.Quaternion)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Mult(MatterHackers.VectorMath.Quaternion@,MatterHackers.VectorMath.Quaternion@,MatterHackers.VectorMath.Quaternion@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Multiply(MatterHackers.VectorMath.Quaternion,MatterHackers.VectorMath.Quaternion)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Multiply(MatterHackers.VectorMath.Quaternion@,MatterHackers.VectorMath.Quaternion@,MatterHackers.VectorMath.Quaternion@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Multiply(MatterHackers.VectorMath.Quaternion@,System.Double,MatterHackers.VectorMath.Quaternion@)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Multiply(MatterHackers.VectorMath.Quaternion,System.Double)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Conjugate(MatterHackers.VectorMath.Quaternion)">
            <summary>
            Get the conjugate of the given Quaterniond
            </summary>
            <param name="q">The Quaterniond</param>
            <returns>The conjugate of the given Quaterniond</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Conjugate(MatterHackers.VectorMath.Quaternion@,MatterHackers.VectorMath.Quaternion@)">
            <summary>
            Get the conjugate of the given Quaterniond
            </summary>
            <param name="q">The Quaterniond</param>
            <param name="result">The conjugate of the given Quaterniond</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Invert(MatterHackers.VectorMath.Quaternion)">
            <summary>
            Get the inverse of the given Quaterniond
            </summary>
            <param name="q">The Quaterniond to invert</param>
            <returns>The inverse of the given Quaterniond</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Invert(MatterHackers.VectorMath.Quaternion@,MatterHackers.VectorMath.Quaternion@)">
            <summary>
            Get the inverse of the given Quaterniond
            </summary>
            <param name="q">The Quaterniond to invert</param>
            <param name="result">The inverse of the given Quaterniond</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Normalize(MatterHackers.VectorMath.Quaternion)">
            <summary>
            Scale the given Quaterniond to unit length
            </summary>
            <param name="q">The Quaterniond to normalize</param>
            <returns>The normalized Quaterniond</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Normalize(MatterHackers.VectorMath.Quaternion@,MatterHackers.VectorMath.Quaternion@)">
            <summary>
            Scale the given Quaterniond to unit length
            </summary>
            <param name="q">The Quaterniond to normalize</param>
            <param name="result">The normalized Quaterniond</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.FromAxisAngle(MatterHackers.VectorMath.Vector3,System.Double)">
            <summary>
            Build a Quaterniond from the given axis and angle
            </summary>
            <param name="axis">The axis to rotate about</param>
            <param name="angle">The rotation angle in radians</param>
            <returns></returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Slerp(MatterHackers.VectorMath.Quaternion,MatterHackers.VectorMath.Quaternion,System.Double)">
            <summary>
            Do Spherical linear interpolation between two quaternions 
            </summary>
            <param name="q1">The first Quaterniond</param>
            <param name="q2">The second Quaterniond</param>
            <param name="blend">The blend factor</param>
            <returns>A smooth blend between the given quaternions</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.op_Addition(MatterHackers.VectorMath.Quaternion,MatterHackers.VectorMath.Quaternion)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.op_Subtraction(MatterHackers.VectorMath.Quaternion,MatterHackers.VectorMath.Quaternion)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.op_Multiply(MatterHackers.VectorMath.Quaternion,MatterHackers.VectorMath.Quaternion)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.op_Multiply(MatterHackers.VectorMath.Quaternion,System.Double)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.op_Multiply(System.Double,MatterHackers.VectorMath.Quaternion)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.op_Equality(MatterHackers.VectorMath.Quaternion,MatterHackers.VectorMath.Quaternion)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.op_Inequality(MatterHackers.VectorMath.Quaternion,MatterHackers.VectorMath.Quaternion)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equal right; false otherwise.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.ToString">
            <summary>
            Returns a System.String that represents the current Quaterniond.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Equals(System.Object)">
            <summary>
            Compares this object instance to another object for equality. 
            </summary>
            <param name="other">The other object to be used in the comparison.</param>
            <returns>True if both objects are Quaternions of equal value. Otherwise it returns false.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.GetHashCode">
            <summary>
            Provides the hash code for this object. 
            </summary>
            <returns>A hash code formed from the bitwise XOR of this objects members.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Quaternion.Equals(MatterHackers.VectorMath.Quaternion)">
            <summary>
            Compares this Quaterniond instance to another Quaterniond for equality. 
            </summary>
            <param name="other">The other Quaterniond to be used in the comparison.</param>
            <returns>True if both instances are equal; false otherwise.</returns>
        </member>
        <member name="T:MatterHackers.VectorMath.Vector2">
            <summary>Represents a 2D vector using two double-precision floating-point numbers.</summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector2.x">
            <summary>The X coordinate of this instance.</summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector2.y">
            <summary>The Y coordinate of this instance.</summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector2.UnitX">
            <summary>
            Defines a unit-length Vector2d that points towards the X-axis.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector2.UnitY">
            <summary>
            Defines a unit-length Vector2d that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector2.Zero">
            <summary>
            Defines a zero-length Vector2d.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector2.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector2.SizeInBytes">
            <summary>
            Defines the size of the Vector2d struct in bytes.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.#ctor(System.Double,System.Double)">
            <summary>Constructs left vector with the given coordinates.</summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="P:MatterHackers.VectorMath.Vector2.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <seealso cref="P:MatterHackers.VectorMath.Vector2.LengthSquared"/>
        </member>
        <member name="P:MatterHackers.VectorMath.Vector2.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:MatterHackers.VectorMath.Vector2.Length"/>
        </member>
        <member name="P:MatterHackers.VectorMath.Vector2.PerpendicularRight">
            <summary>
            Gets the perpendicular vector on the right side of this vector.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Vector2.PerpendicularLeft">
            <summary>
            Gets the perpendicular vector on the left side of this vector.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.GetNormal">
            <summary>
            Returns a normalized Vector of this.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Normalize">
            <summary>
            Scales the Vector2 to unit length.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Add(MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Add(MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Subtract(MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Subtract(MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Multiply(MatterHackers.VectorMath.Vector2,System.Double)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Multiply(MatterHackers.VectorMath.Vector2@,System.Double,MatterHackers.VectorMath.Vector2@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Multiply(MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Multiply(MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Divide(MatterHackers.VectorMath.Vector2,System.Double)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Divide(MatterHackers.VectorMath.Vector2@,System.Double,MatterHackers.VectorMath.Vector2@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Divide(MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Divide(MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Min(MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Min(MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Max(MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Max(MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Clamp(MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Clamp(MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Normalize(MatterHackers.VectorMath.Vector2)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Normalize(MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.NormalizeFast(MatterHackers.VectorMath.Vector2)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.NormalizeFast(MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Dot(MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Dot(MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@,System.Double@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Cross(MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2)">
            <summary>
            Calculate the cross product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Lerp(MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2,System.Double)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Lerp(MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@,System.Double,MatterHackers.VectorMath.Vector2@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.BaryCentric(MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2,System.Double,System.Double)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.BaryCentric(MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@,System.Double,System.Double,MatterHackers.VectorMath.Vector2@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Transform(MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Quaternion)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Transform(MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Quaternion@,MatterHackers.VectorMath.Vector2@)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.ComponentMin(MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.ComponentMin(MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.ComponentMax(MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.ComponentMax(MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@,MatterHackers.VectorMath.Vector2@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.op_Addition(MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.op_Subtraction(MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.op_UnaryNegation(MatterHackers.VectorMath.Vector2)">
            <summary>
            Negates an instance.
            </summary>
            <param name="vec">The instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.op_Multiply(MatterHackers.VectorMath.Vector2,System.Double)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="f">The scalar.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.op_Multiply(System.Double,MatterHackers.VectorMath.Vector2)">
            <summary>
            Multiply an instance by a scalar.
            </summary>
            <param name="f">The scalar.</param>
            <param name="vec">The instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.op_Division(MatterHackers.VectorMath.Vector2,System.Double)">
            <summary>
            Divides an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="f">The scalar.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.op_Division(System.Double,MatterHackers.VectorMath.Vector2)">
            <summary>
            Divides a scaler by an instance components wise.
            </summary>
            <param name="vec">The scalar.</param>
            <param name="f">The instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.op_Equality(MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>True, if both instances are equal; false otherwise.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.op_Inequality(MatterHackers.VectorMath.Vector2,MatterHackers.VectorMath.Vector2)">
            <summary>
            Compares two instances for ienquality.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>True, if the instances are not equal; false otherwise.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.ToString">
            <summary>
            Returns a System.String that represents the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Equals(MatterHackers.VectorMath.Vector2)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector2.Equals(MatterHackers.VectorMath.Vector2,System.Double)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <param name="errorRange"></param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:MatterHackers.VectorMath.Vector3">
            <summary>
            Represents a 3D vector using three double-precision floating-point numbers.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector3.x">
            <summary>
            The X component of the Vector3.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector3.y">
            <summary>
            The Y component of the Vector3.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector3.z">
            <summary>
            The Z component of the Vector3.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new Vector3.
            </summary>
            <param name="x">The x component of the Vector3.</param>
            <param name="y">The y component of the Vector3.</param>
            <param name="z">The z component of the Vector3.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.#ctor(MatterHackers.VectorMath.Vector2,System.Double)">
            <summary>
            Constructs a new instance from the given Vector2d.
            </summary>
            <param name="v">The Vector2d to copy components from.</param>
            <param name="z"></param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.#ctor(MatterHackers.VectorMath.Vector3)">
            <summary>
            Constructs a new instance from the given Vector3d.
            </summary>
            <param name="v">The Vector3d to copy components from.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.#ctor(MatterHackers.VectorMath.Vector4)">
            <summary>
            Constructs a new instance from the given Vector4d.
            </summary>
            <param name="v">The Vector4d to copy components from.</param>
        </member>
        <member name="P:MatterHackers.VectorMath.Vector3.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:MatterHackers.VectorMath.Vector3.LengthFast"/>
            <seealso cref="P:MatterHackers.VectorMath.Vector3.LengthSquared"/>
        </member>
        <member name="P:MatterHackers.VectorMath.Vector3.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:MatterHackers.VectorMath.Vector3.Length"/>
            <seealso cref="P:MatterHackers.VectorMath.Vector3.LengthSquared"/>
        </member>
        <member name="P:MatterHackers.VectorMath.Vector3.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:MatterHackers.VectorMath.Vector3.Length"/>
            <seealso cref="P:MatterHackers.VectorMath.Vector3.LengthFast"/>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.GetNormal">
            <summary>
            Returns a normalized Vector of this.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Normalize">
            <summary>
            Scales the Vector3d to unit length.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.NormalizeFast">
            <summary>
            Scales the Vector3d to approximately unit length.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector3.UnitX">
            <summary>
            Defines a unit-length Vector3d that points towards the X-axis.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector3.UnitY">
            <summary>
            Defines a unit-length Vector3d that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector3.UnitZ">
            <summary>
            /// Defines a unit-length Vector3d that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector3.Zero">
            <summary>
            Defines a zero-length Vector3.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector3.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector3.PositiveInfinity">
            <summary>
            Defines an instance with all components set to positive infinity.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector3.NegativeInfinity">
            <summary>
            Defines an instance with all components set to negative infinity.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector3.SizeInBytes">
            <summary>
            Defines the size of the Vector3d struct in bytes.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Add(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Add(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Subtract(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Subtract(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Multiply(MatterHackers.VectorMath.Vector3,System.Double)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Multiply(MatterHackers.VectorMath.Vector3@,System.Double,MatterHackers.VectorMath.Vector3@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Multiply(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Multiply(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Divide(MatterHackers.VectorMath.Vector3,System.Double)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Divide(MatterHackers.VectorMath.Vector3@,System.Double,MatterHackers.VectorMath.Vector3@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Divide(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Divide(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.ComponentMin(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.ComponentMin(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.ComponentMax(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.ComponentMax(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Min(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3)">
            <summary>
            Returns the Vector3d with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Max(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3)">
            <summary>
            Returns the Vector3d with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Clamp(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Clamp(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Normalize(MatterHackers.VectorMath.Vector3)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Normalize(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.NormalizeFast(MatterHackers.VectorMath.Vector3)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.NormalizeFast(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Dot(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Dot(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@,System.Double@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Cross(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Cross(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
            <param name="result">The cross product of the two inputs</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Lerp(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3,System.Double)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Lerp(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@,System.Double,MatterHackers.VectorMath.Vector3@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.BaryCentric(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3,System.Double,System.Double)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.BaryCentric(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@,System.Double,System.Double,MatterHackers.VectorMath.Vector3@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.TransformVector(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Matrix4X4)">
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.TransformVector(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Matrix4X4@,MatterHackers.VectorMath.Vector3@)">
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.TransformNormal(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Matrix4X4)">
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed normal</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.TransformNormal(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Matrix4X4@,MatterHackers.VectorMath.Vector3@)">
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed normal</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.TransformNormalInverse(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Matrix4X4)">
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <returns>The transformed normal</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.TransformNormalInverse(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Matrix4X4@,MatterHackers.VectorMath.Vector3@)">
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <param name="result">The transformed normal</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.TransformPosition(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Matrix4X4)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed position</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.TransformPosition(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Matrix4X4@,MatterHackers.VectorMath.Vector3@)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed position</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Transform(MatterHackers.VectorMath.Vector3[],MatterHackers.VectorMath.Matrix4X4)">
            <summary>
            Transform all the vectors in the array by the given Matrix.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Transform(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Matrix4X4)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Transform(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Matrix4X4@,MatterHackers.VectorMath.Vector3@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Transform(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Quaternion)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Transform(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Quaternion@,MatterHackers.VectorMath.Vector3@)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Transform(MatterHackers.VectorMath.Vector3[],MatterHackers.VectorMath.Quaternion)">
            <summary>
            Transform all the vectors in the array by the quaternion rotation.
            </summary>
            <param name="vecArray"></param>
            <param name="rotationQuaternion"></param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.TransformPerspective(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Matrix4X4)">
            <summary>
            Transform a Vector3d by the given Matrix, and project the resulting Vector4 back to a Vector3
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.TransformPerspective(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Matrix4X4@,MatterHackers.VectorMath.Vector3@)">
            <summary>Transform a Vector3d by the given Matrix, and project the resulting Vector4d back to a Vector3d</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.CalculateAngle(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3)">
            <summary>
            Calculates the angle (in radians) between two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <returns>Angle (in radians) between the vectors.</returns>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.CalculateAngle(MatterHackers.VectorMath.Vector3@,MatterHackers.VectorMath.Vector3@,System.Double@)">
            <summary>Calculates the angle (in radians) between two vectors.</summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <param name="result">Angle (in radians) between the vectors.</param>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="P:MatterHackers.VectorMath.Vector3.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2d with the X and Y components of this instance.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.op_Addition(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.op_Subtraction(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.op_UnaryNegation(MatterHackers.VectorMath.Vector3)">
            <summary>
            Negates an instance.
            </summary>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.op_Multiply(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3)">
            <summary>
            Component wise multiply two vectors together, x*x, y*y, z*z.
            </summary>
            <param name="vecA"></param>
            <param name="vecB"></param>
            <returns></returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.op_Multiply(MatterHackers.VectorMath.Vector3,System.Double)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.op_Multiply(System.Double,MatterHackers.VectorMath.Vector3)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="scale">The scalar.</param>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.op_Division(System.Double,MatterHackers.VectorMath.Vector3)">
            <summary>
            Creates a new vector which is the numerator devided by each component of the vector.
            </summary>
            <param name="numerator"></param>
            <param name="vec"></param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.op_Division(MatterHackers.VectorMath.Vector3,System.Double)">
            <summary>
            Divides an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.op_Equality(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.op_Inequality(MatterHackers.VectorMath.Vector3,MatterHackers.VectorMath.Vector3)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equa lright; false otherwise.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.ToString">
            <summary>
            Returns a System.String that represents the current Vector3.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Equals(MatterHackers.VectorMath.Vector3,System.Double)">
            <summary>
            Indicates whether this instance and a specified object are equal within an error range.
            </summary>
            <param name="OtherVector"></param>
            <param name="ErrorValue"></param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector3.Equals(MatterHackers.VectorMath.Vector3)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:MatterHackers.VectorMath.Vector4">
            <summary>Represents a 4D vector using four double-precision floating-point numbers.</summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector4.x">
            <summary>
            The X component of the Vector4d.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector4.y">
            <summary>
            The Y component of the Vector4d.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector4.z">
            <summary>
            The Z component of the Vector4d.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector4.w">
            <summary>
            The W component of the Vector4d.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector4.UnitX">
            <summary>
            Defines a unit-length Vector4d that points towards the X-axis.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector4.UnitY">
            <summary>
            Defines a unit-length Vector4d that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector4.UnitZ">
            <summary>
            Defines a unit-length Vector4d that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector4.UnitW">
            <summary>
            Defines a unit-length Vector4d that points towards the W-axis.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector4.Zero">
            <summary>
            Defines a zero-length Vector4d.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector4.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:MatterHackers.VectorMath.Vector4.SizeInBytes">
            <summary>
            Defines the size of the Vector4d struct in bytes.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new Vector4d.
            </summary>
            <param name="x">The x component of the Vector4d.</param>
            <param name="y">The y component of the Vector4d.</param>
            <param name="z">The z component of the Vector4d.</param>
            <param name="w">The w component of the Vector4d.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.#ctor(MatterHackers.VectorMath.Vector2)">
            <summary>
            Constructs a new Vector4d from the given Vector2d.
            </summary>
            <param name="v">The Vector2d to copy components from.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.#ctor(MatterHackers.VectorMath.Vector3)">
            <summary>
            Constructs a new Vector4d from the given Vector3d.
            </summary>
            <param name="v">The Vector3d to copy components from.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.#ctor(MatterHackers.VectorMath.Vector3,System.Double)">
            <summary>
            Constructs a new Vector4d from the specified Vector3d and w component.
            </summary>
            <param name="v">The Vector3d to copy components from.</param>
            <param name="w">The w component of the new Vector4.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.#ctor(MatterHackers.VectorMath.Vector4)">
            <summary>
            Constructs a new Vector4d from the given Vector4d.
            </summary>
            <param name="v">The Vector4d to copy components from.</param>
        </member>
        <member name="P:MatterHackers.VectorMath.Vector4.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:MatterHackers.VectorMath.Vector4.LengthFast"/>
            <seealso cref="P:MatterHackers.VectorMath.Vector4.LengthSquared"/>
        </member>
        <member name="P:MatterHackers.VectorMath.Vector4.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:MatterHackers.VectorMath.Vector4.Length"/>
            <seealso cref="P:MatterHackers.VectorMath.Vector4.LengthSquared"/>
        </member>
        <member name="P:MatterHackers.VectorMath.Vector4.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:MatterHackers.VectorMath.Vector4.Length"/>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Normalize">
            <summary>
            Scales the Vector4d to unit length.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.NormalizeFast">
            <summary>
            Scales the Vector4d to approximately unit length.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Add(MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Add(MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Subtract(MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Subtract(MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Multiply(MatterHackers.VectorMath.Vector4,System.Double)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Multiply(MatterHackers.VectorMath.Vector4@,System.Double,MatterHackers.VectorMath.Vector4@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Multiply(MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Multiply(MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Divide(MatterHackers.VectorMath.Vector4,System.Double)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Divide(MatterHackers.VectorMath.Vector4@,System.Double,MatterHackers.VectorMath.Vector4@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Divide(MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Divide(MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Min(MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Min(MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Max(MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Max(MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Clamp(MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Clamp(MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Normalize(MatterHackers.VectorMath.Vector4)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Normalize(MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.NormalizeFast(MatterHackers.VectorMath.Vector4)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.NormalizeFast(MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Dot(MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Dot(MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@,System.Double@)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Lerp(MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4,System.Double)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Lerp(MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@,System.Double,MatterHackers.VectorMath.Vector4@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.BaryCentric(MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4,System.Double,System.Double)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.BaryCentric(MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Vector4@,System.Double,System.Double,MatterHackers.VectorMath.Vector4@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Transform(MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Matrix4X4)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Transform(MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Matrix4X4@,MatterHackers.VectorMath.Vector4@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Transform(MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Quaternion)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Transform(MatterHackers.VectorMath.Vector4@,MatterHackers.VectorMath.Quaternion@,MatterHackers.VectorMath.Vector4@)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="P:MatterHackers.VectorMath.Vector4.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2d with the X and Y components of this instance.
            </summary>
        </member>
        <member name="P:MatterHackers.VectorMath.Vector4.Xyz">
            <summary>
            Gets or sets an OpenTK.Vector3d with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.op_Addition(MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.op_Subtraction(MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.op_UnaryNegation(MatterHackers.VectorMath.Vector4)">
            <summary>
            Negates an instance.
            </summary>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.op_Multiply(MatterHackers.VectorMath.Vector4,System.Double)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.op_Multiply(System.Double,MatterHackers.VectorMath.Vector4)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="scale">The scalar.</param>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.op_Division(MatterHackers.VectorMath.Vector4,System.Double)">
            <summary>
            Divides an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.op_Equality(MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.op_Inequality(MatterHackers.VectorMath.Vector4,MatterHackers.VectorMath.Vector4)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equa lright; false otherwise.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.op_Explicit(MatterHackers.VectorMath.Vector4)~System.Double*">
            <summary>
            Returns a pointer to the first element of the specified instance.
            </summary>
            <param name="v">The instance.</param>
            <returns>A pointer to the first element of v.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.op_Explicit(MatterHackers.VectorMath.Vector4)~System.IntPtr">
            <summary>
            Returns a pointer to the first element of the specified instance.
            </summary>
            <param name="v">The instance.</param>
            <returns>A pointer to the first element of v.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.ToString">
            <summary>
            Returns a System.String that represents the current Vector4d.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.ToString(System.String)">
            <summary>
            Returns a System.String that represents the current Vector4d, formatting each element with format.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.Equals(MatterHackers.VectorMath.Vector4)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
